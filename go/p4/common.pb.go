// Copyright 2018 Google LLC
// Copyright 2018-present Open Networking Foundation
// SPDX-License-Identifier: Apache-2.0

// This file include all the common internal messages used by Stratum stack.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: common.proto

package p4

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode of operation of the stack.
type OperationMode int32

const (
	OperationMode_OPERATION_MODE_UNKNOWN    OperationMode = 0
	OperationMode_OPERATION_MODE_STANDALONE OperationMode = 1 // Standalone Stratum.
	OperationMode_OPERATION_MODE_COUPLED    OperationMode = 2 // Stratum running as part of Sandcastle.
	OperationMode_OPERATION_MODE_SIM        OperationMode = 3 // Stratum running in sim mode.
)

// Enum value maps for OperationMode.
var (
	OperationMode_name = map[int32]string{
		0: "OPERATION_MODE_UNKNOWN",
		1: "OPERATION_MODE_STANDALONE",
		2: "OPERATION_MODE_COUPLED",
		3: "OPERATION_MODE_SIM",
	}
	OperationMode_value = map[string]int32{
		"OPERATION_MODE_UNKNOWN":    0,
		"OPERATION_MODE_STANDALONE": 1,
		"OPERATION_MODE_COUPLED":    2,
		"OPERATION_MODE_SIM":        3,
	}
)

func (x OperationMode) Enum() *OperationMode {
	p := new(OperationMode)
	*p = x
	return p
}

func (x OperationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (OperationMode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x OperationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationMode.Descriptor instead.
func (OperationMode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// Tri-state boolean for the case 'false' is not a default.
type TriState int32

const (
	TriState_TRI_STATE_UNKNOWN TriState = 0
	TriState_TRI_STATE_TRUE    TriState = 1
	TriState_TRI_STATE_FALSE   TriState = 2
)

// Enum value maps for TriState.
var (
	TriState_name = map[int32]string{
		0: "TRI_STATE_UNKNOWN",
		1: "TRI_STATE_TRUE",
		2: "TRI_STATE_FALSE",
	}
	TriState_value = map[string]int32{
		"TRI_STATE_UNKNOWN": 0,
		"TRI_STATE_TRUE":    1,
		"TRI_STATE_FALSE":   2,
	}
)

func (x TriState) Enum() *TriState {
	p := new(TriState)
	*p = x
	return p
}

func (x TriState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (TriState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x TriState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriState.Descriptor instead.
func (TriState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// Target platforms (aka the type of the switch/chassis).
type Platform int32

const (
	Platform_PLT_UNKNOWN                  Platform = 0 // default
	Platform_PLT_GENERIC_TRIDENT_PLUS     Platform = 1
	Platform_PLT_GENERIC_TRIDENT2         Platform = 2
	Platform_PLT_GENERIC_TOMAHAWK         Platform = 3
	Platform_PLT_GENERIC_TOMAHAWK_PLUS    Platform = 4
	Platform_PLT_GENERIC_TOMAHAWK2        Platform = 5
	Platform_PLT_GENERIC_TOMAHAWK3        Platform = 6
	Platform_PLT_MLNX_SN2700              Platform = 9
	Platform_PLT_P4_SOFT_SWITCH           Platform = 10
	Platform_PLT_NP4_INTEL_N3000          Platform = 13
	Platform_PLT_GENERIC_BAREFOOT_TOFINO  Platform = 14
	Platform_PLT_GENERIC_BAREFOOT_TOFINO2 Platform = 15 // TODO(unknown): Add all the BCM and MLNX based platforms.
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:  "PLT_UNKNOWN",
		1:  "PLT_GENERIC_TRIDENT_PLUS",
		2:  "PLT_GENERIC_TRIDENT2",
		3:  "PLT_GENERIC_TOMAHAWK",
		4:  "PLT_GENERIC_TOMAHAWK_PLUS",
		5:  "PLT_GENERIC_TOMAHAWK2",
		6:  "PLT_GENERIC_TOMAHAWK3",
		9:  "PLT_MLNX_SN2700",
		10: "PLT_P4_SOFT_SWITCH",
		13: "PLT_NP4_INTEL_N3000",
		14: "PLT_GENERIC_BAREFOOT_TOFINO",
		15: "PLT_GENERIC_BAREFOOT_TOFINO2",
	}
	Platform_value = map[string]int32{
		"PLT_UNKNOWN":                  0,
		"PLT_GENERIC_TRIDENT_PLUS":     1,
		"PLT_GENERIC_TRIDENT2":         2,
		"PLT_GENERIC_TOMAHAWK":         3,
		"PLT_GENERIC_TOMAHAWK_PLUS":    4,
		"PLT_GENERIC_TOMAHAWK2":        5,
		"PLT_GENERIC_TOMAHAWK3":        6,
		"PLT_MLNX_SN2700":              9,
		"PLT_P4_SOFT_SWITCH":           10,
		"PLT_NP4_INTEL_N3000":          13,
		"PLT_GENERIC_BAREFOOT_TOFINO":  14,
		"PLT_GENERIC_BAREFOOT_TOFINO2": 15,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

// List of traffic classes (aka class of services).
// Note: The names of the enum cases are important and are used to identify
// QoS queues in gNMI YANG model.
type TrafficClass int32

const (
	TrafficClass_UNDEFINED TrafficClass = 0
	TrafficClass_BE1       TrafficClass = 20 // Best effort
	TrafficClass_AF1       TrafficClass = 21 // Assured forwarding priority 1
	TrafficClass_AF2       TrafficClass = 22 // Assured forwarding priority 2
	TrafficClass_AF3       TrafficClass = 23 // Assured forwarding priority 3
	TrafficClass_AF4       TrafficClass = 24 // Assured forwarding priority 4
	TrafficClass_NC1       TrafficClass = 25 // Network control
	TrafficClass_NC0       TrafficClass = 26 // Network control
	TrafficClass_BE0       TrafficClass = 27 // Best effort at high packet loss
	TrafficClass_LLQ1      TrafficClass = 29 // Low-latency congestion-control queue (go/llq)
	TrafficClass_LLQ2      TrafficClass = 30 // Low-latency congestion-control queue (go/llq)
)

// Enum value maps for TrafficClass.
var (
	TrafficClass_name = map[int32]string{
		0:  "UNDEFINED",
		20: "BE1",
		21: "AF1",
		22: "AF2",
		23: "AF3",
		24: "AF4",
		25: "NC1",
		26: "NC0",
		27: "BE0",
		29: "LLQ1",
		30: "LLQ2",
	}
	TrafficClass_value = map[string]int32{
		"UNDEFINED": 0,
		"BE1":       20,
		"AF1":       21,
		"AF2":       22,
		"AF3":       23,
		"AF4":       24,
		"NC1":       25,
		"NC0":       26,
		"BE0":       27,
		"LLQ1":      29,
		"LLQ2":      30,
	}
)

func (x TrafficClass) Enum() *TrafficClass {
	p := new(TrafficClass)
	*p = x
	return p
}

func (x TrafficClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficClass) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (TrafficClass) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x TrafficClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficClass.Descriptor instead.
func (TrafficClass) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

// FEC operational mode for a singleton port.
type FecMode int32

const (
	FecMode_FEC_MODE_UNKNOWN FecMode = 0
	FecMode_FEC_MODE_ON      FecMode = 1
	FecMode_FEC_MODE_OFF     FecMode = 2
	FecMode_FEC_MODE_AUTO    FecMode = 3
)

// Enum value maps for FecMode.
var (
	FecMode_name = map[int32]string{
		0: "FEC_MODE_UNKNOWN",
		1: "FEC_MODE_ON",
		2: "FEC_MODE_OFF",
		3: "FEC_MODE_AUTO",
	}
	FecMode_value = map[string]int32{
		"FEC_MODE_UNKNOWN": 0,
		"FEC_MODE_ON":      1,
		"FEC_MODE_OFF":     2,
		"FEC_MODE_AUTO":    3,
	}
)

func (x FecMode) Enum() *FecMode {
	p := new(FecMode)
	*p = x
	return p
}

func (x FecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (FecMode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x FecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FecMode.Descriptor instead.
func (FecMode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

// A enum for describing the operational state (aka oper state) of a singleton
// port.
type PortState int32

const (
	// Default/invalid oper state.
	PortState_PORT_STATE_UNKNOWN PortState = 0
	// Port is up, which also means the link that the port is part is up as well.
	PortState_PORT_STATE_UP PortState = 1
	// Port is down, which also means the link that the port is part is down as
	// well.
	PortState_PORT_STATE_DOWN PortState = 2
	// Port has indicated some low-level failures. This is a special case of a
	// port down which is associated with a failure.
	PortState_PORT_STATE_FAILED PortState = 3
)

// Enum value maps for PortState.
var (
	PortState_name = map[int32]string{
		0: "PORT_STATE_UNKNOWN",
		1: "PORT_STATE_UP",
		2: "PORT_STATE_DOWN",
		3: "PORT_STATE_FAILED",
	}
	PortState_value = map[string]int32{
		"PORT_STATE_UNKNOWN": 0,
		"PORT_STATE_UP":      1,
		"PORT_STATE_DOWN":    2,
		"PORT_STATE_FAILED":  3,
	}
)

func (x PortState) Enum() *PortState {
	p := new(PortState)
	*p = x
	return p
}

func (x PortState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (PortState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x PortState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortState.Descriptor instead.
func (PortState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

// A enum for describing the operational state (aka oper state) of a trunk port.
type TrunkState int32

const (
	// Default/invalid trunk state.
	TrunkState_TRUNK_STATE_UNKNOWN TrunkState = 0
	// Trunk is not empty and at least one member of the trunk is up and
	// forwarding traffic (i.e. not blocked).
	TrunkState_TRUNK_STATE_UP TrunkState = 1
	// Trunk is empty or all the members of the trunk are either down or blocked.
	TrunkState_TRUNK_STATE_DOWN TrunkState = 2
)

// Enum value maps for TrunkState.
var (
	TrunkState_name = map[int32]string{
		0: "TRUNK_STATE_UNKNOWN",
		1: "TRUNK_STATE_UP",
		2: "TRUNK_STATE_DOWN",
	}
	TrunkState_value = map[string]int32{
		"TRUNK_STATE_UNKNOWN": 0,
		"TRUNK_STATE_UP":      1,
		"TRUNK_STATE_DOWN":    2,
	}
)

func (x TrunkState) Enum() *TrunkState {
	p := new(TrunkState)
	*p = x
	return p
}

func (x TrunkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrunkState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (TrunkState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x TrunkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrunkState.Descriptor instead.
func (TrunkState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

// An enum for describing the traffic block state of a singleton port that is
// part of a trunk.
type TrunkMemberBlockState int32

const (
	// Default/invalid blocking state.
	TrunkMemberBlockState_TRUNK_MEMBER_BLOCK_STATE_UNKNOWN TrunkMemberBlockState = 0
	// The trunk member port may be up and receiving traffic, but egress traffic
	// is blocked. Only control traffic can be egressed from the port (if it is
	// up). A port that is part of a trunk is set to blocked as part of LACP
	// protocol or forcefully by the SDN controller.
	TrunkMemberBlockState_TRUNK_MEMBER_BLOCK_STATE_BLOCKED TrunkMemberBlockState = 1
	// The trunk member port is up and forwarding traffic normally.
	TrunkMemberBlockState_TRUNK_MEMBER_BLOCK_STATE_FORWARDING TrunkMemberBlockState = 2
)

// Enum value maps for TrunkMemberBlockState.
var (
	TrunkMemberBlockState_name = map[int32]string{
		0: "TRUNK_MEMBER_BLOCK_STATE_UNKNOWN",
		1: "TRUNK_MEMBER_BLOCK_STATE_BLOCKED",
		2: "TRUNK_MEMBER_BLOCK_STATE_FORWARDING",
	}
	TrunkMemberBlockState_value = map[string]int32{
		"TRUNK_MEMBER_BLOCK_STATE_UNKNOWN":    0,
		"TRUNK_MEMBER_BLOCK_STATE_BLOCKED":    1,
		"TRUNK_MEMBER_BLOCK_STATE_FORWARDING": 2,
	}
)

func (x TrunkMemberBlockState) Enum() *TrunkMemberBlockState {
	p := new(TrunkMemberBlockState)
	*p = x
	return p
}

func (x TrunkMemberBlockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrunkMemberBlockState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (TrunkMemberBlockState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x TrunkMemberBlockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrunkMemberBlockState.Descriptor instead.
func (TrunkMemberBlockState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

// A generic enum for describing the loopback state of a singleton port.
type LoopbackState int32

const (
	// Default/invalid state.
	LoopbackState_LOOPBACK_STATE_UNKNOWN LoopbackState = 0
	// Normal/non-loopback state.
	LoopbackState_LOOPBACK_STATE_NONE LoopbackState = 1
	// Loopback packets at the MAC layer of the port.
	LoopbackState_LOOPBACK_STATE_MAC LoopbackState = 2
	// Loopback packets at the PHY layer of the port.
	LoopbackState_LOOPBACK_STATE_PHY LoopbackState = 3
)

// Enum value maps for LoopbackState.
var (
	LoopbackState_name = map[int32]string{
		0: "LOOPBACK_STATE_UNKNOWN",
		1: "LOOPBACK_STATE_NONE",
		2: "LOOPBACK_STATE_MAC",
		3: "LOOPBACK_STATE_PHY",
	}
	LoopbackState_value = map[string]int32{
		"LOOPBACK_STATE_UNKNOWN": 0,
		"LOOPBACK_STATE_NONE":    1,
		"LOOPBACK_STATE_MAC":     2,
		"LOOPBACK_STATE_PHY":     3,
	}
)

func (x LoopbackState) Enum() *LoopbackState {
	p := new(LoopbackState)
	*p = x
	return p
}

func (x LoopbackState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoopbackState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (LoopbackState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x LoopbackState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoopbackState.Descriptor instead.
func (LoopbackState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

// A generic enum for describing the administrative state (aka admin state) of
// a HW component. Admin state is typically the "intended oper state". After
// the admin state of a HW component changes, we expect the oper state to change
// eventually, however there is no direct dependency. For example, for a port,
// the SDN controller may request the admin state to be enabled. The stack will
// then set the port to be disabled on HW. The port will eventually change its
// state and the linkscan will report the change, in which case we update the
// operational state of the port to be down. In this case, one can expect the
// admin state to be down, while the oper state is still up. It should be noted
// that admin state can also specifiy some logical state which does not fully
// translate to a new oper state. For example, setting a HW component to diag
// mode, may not trasnlate to a new oper state.
type AdminState int32

const (
	// Default/invalid admin state.
	AdminState_ADMIN_STATE_UNKNOWN AdminState = 0
	// HW component is set to be enabled. Setting a HW component (e.g., a port) to
	// enabled translates to some HW operations, as a result of which the oper
	// state of the HW component may change (e.g., in case of a port oper state of
	// the port will eventually become up).
	AdminState_ADMIN_STATE_ENABLED AdminState = 1
	// HW component is set to be disabled. Setting a HW component (e.g., a port)
	// to disabled translates to some HW operations, as a result of which the oper
	// state of the HW component may change (e.g., in case of a port oper state of
	// the port will eventually become down).
	AdminState_ADMIN_STATE_DISABLED AdminState = 2
	// HW component is set to be in diag mode. This typically indicates that the
	// HW component is being used by a diagnostics SW underneath and should not be
	// used like a normal component. Setting a HW component to diag mode will
	// eventually change the HW state of the component.
	// TODO(unknown): This mode is not supported at the moment.
	AdminState_ADMIN_STATE_DIAG AdminState = 3
)

// Enum value maps for AdminState.
var (
	AdminState_name = map[int32]string{
		0: "ADMIN_STATE_UNKNOWN",
		1: "ADMIN_STATE_ENABLED",
		2: "ADMIN_STATE_DISABLED",
		3: "ADMIN_STATE_DIAG",
	}
	AdminState_value = map[string]int32{
		"ADMIN_STATE_UNKNOWN":  0,
		"ADMIN_STATE_ENABLED":  1,
		"ADMIN_STATE_DISABLED": 2,
		"ADMIN_STATE_DIAG":     3,
	}
)

func (x AdminState) Enum() *AdminState {
	p := new(AdminState)
	*p = x
	return p
}

func (x AdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (AdminState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x AdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminState.Descriptor instead.
func (AdminState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

// A generic enum for describing the state of HW components (e.g. QSFP module).
type HwState int32

const (
	// Hardware is present, but details (type/state) are unknown.
	HwState_HW_STATE_UNKNOWN HwState = 0
	// Hardware is present, configured, and operational.
	HwState_HW_STATE_READY HwState = 1
	// Hardware is present, but not yet operational.
	HwState_HW_STATE_PRESENT HwState = 2
	// No hardware is present.
	HwState_HW_STATE_NOT_PRESENT HwState = 3
	// Hardware is present, but not powered on.
	HwState_HW_STATE_OFF HwState = 4
	// Hardware is operational, but configured off.
	HwState_HW_STATE_CONFIGURED_OFF HwState = 5
	// A hardware failure has been detected.
	HwState_HW_STATE_FAILED HwState = 6
	// Hardware is in a diagnostic mode. This typically indicates that the HW
	// component is being used by a diagnostics SW underneath
	HwState_HW_STATE_DIAGNOSTIC HwState = 7
)

// Enum value maps for HwState.
var (
	HwState_name = map[int32]string{
		0: "HW_STATE_UNKNOWN",
		1: "HW_STATE_READY",
		2: "HW_STATE_PRESENT",
		3: "HW_STATE_NOT_PRESENT",
		4: "HW_STATE_OFF",
		5: "HW_STATE_CONFIGURED_OFF",
		6: "HW_STATE_FAILED",
		7: "HW_STATE_DIAGNOSTIC",
	}
	HwState_value = map[string]int32{
		"HW_STATE_UNKNOWN":        0,
		"HW_STATE_READY":          1,
		"HW_STATE_PRESENT":        2,
		"HW_STATE_NOT_PRESENT":    3,
		"HW_STATE_OFF":            4,
		"HW_STATE_CONFIGURED_OFF": 5,
		"HW_STATE_FAILED":         6,
		"HW_STATE_DIAGNOSTIC":     7,
	}
)

func (x HwState) Enum() *HwState {
	p := new(HwState)
	*p = x
	return p
}

func (x HwState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HwState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (HwState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x HwState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HwState.Descriptor instead.
func (HwState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

// A generic enum for describing the health state of a HW component, as seen
// by a remote telemetry agent or set by an SDN controller. Note that the health
// state of a component "may" be correlated to its HW state and/or operational
// state, but no inherent correlation is required in general. Also, similar to
// admin state, health state of a component can be set by a remote agent, such
// as an SDN controller. In that case, the health state indicates whether the
// the component is healthy from the controller POV or not.
type HealthState int32

const (
	// Default/invalid health state.
	HealthState_HEALTH_STATE_UNKNOWN HealthState = 0
	// The HW component is healthy. The meaning will be case specific. For the
	// case of ports as seen by the SDN controller, a healthy port means a port
	// which is ready for sending traffic, which boils down to be being up with
	// ND/LLDP reporting correct neighbor.
	HealthState_HEALTH_STATE_GOOD HealthState = 1
	// The HW component is unhealthy. The meaning will be case specific. For the
	// case of ports as seen by the SDN controller, an unhealthy port means a port
	// which is not ready for sending traffic, e.g., it is up by ND/LLDP reports
	// wrong neighbor.
	HealthState_HEALTH_STATE_BAD HealthState = 2
)

// Enum value maps for HealthState.
var (
	HealthState_name = map[int32]string{
		0: "HEALTH_STATE_UNKNOWN",
		1: "HEALTH_STATE_GOOD",
		2: "HEALTH_STATE_BAD",
	}
	HealthState_value = map[string]int32{
		"HEALTH_STATE_UNKNOWN": 0,
		"HEALTH_STATE_GOOD":    1,
		"HEALTH_STATE_BAD":     2,
	}
)

func (x HealthState) Enum() *HealthState {
	p := new(HealthState)
	*p = x
	return p
}

func (x HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (HealthState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthState.Descriptor instead.
func (HealthState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

// Possible state for LED lights. Possible LedState for any supported LedType
// should be listed here.
type LedState int32

const (
	LedState_LED_STATE_UNKNOWN LedState = 0 // Used when the state is undetermined
	// e.g. after warm boot
	LedState_LED_STATE_OFF           LedState = 1
	LedState_LED_STATE_SOLID         LedState = 2
	LedState_LED_STATE_BLINKING_SLOW LedState = 3
	LedState_LED_STATE_BLINKING_FAST LedState = 4
)

// Enum value maps for LedState.
var (
	LedState_name = map[int32]string{
		0: "LED_STATE_UNKNOWN",
		1: "LED_STATE_OFF",
		2: "LED_STATE_SOLID",
		3: "LED_STATE_BLINKING_SLOW",
		4: "LED_STATE_BLINKING_FAST",
	}
	LedState_value = map[string]int32{
		"LED_STATE_UNKNOWN":       0,
		"LED_STATE_OFF":           1,
		"LED_STATE_SOLID":         2,
		"LED_STATE_BLINKING_SLOW": 3,
		"LED_STATE_BLINKING_FAST": 4,
	}
)

func (x LedState) Enum() *LedState {
	p := new(LedState)
	*p = x
	return p
}

func (x LedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (LedState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x LedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedState.Descriptor instead.
func (LedState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

// Different type of LED has different possible color & state conbination and
// different number & control value of control path. LedType determin the value
// for each control path for a given color & state combination.
type LedType int32

const (
	// Unknown led type is regard as an config error.
	LedType_LED_TYPE_UNKNOWN LedType = 0
	// Green/Red non-blinking LEDs (Front Panel, PSU, Fan).
	LedType_LED_TYPE_BICOLOR_FPGA LedType = 1
	// Green/Amber solid/blinking LEDs (10G interfaces)
	LedType_LED_TYPE_BICOLOR_LINK LedType = 2
	// Non-blinking Green LED and Red LED. Used by Markab ports.
	LedType_LED_TYPE_BICOLOR_FPGA_G_R LedType = 3
	// Non-blinking Green/Red and Green/Yellow LEDs. Used by Markab ports.
	LedType_LED_TYPE_TRICOLOR_FPGA_GR_GY LedType = 4
	// Solid/blinking Green/Red and solid Yellow LED. Used by Markab ports.
	LedType_LED_TYPE_TRICOLOR_FPGA_GR_Y LedType = 5
	// Non-blinking Green, Red, and Yellow LEDs. Used by Markab ports.
	LedType_LED_TYPE_TRICOLOR_FPGA_G_R_Y LedType = 6
	// Non-blinking Green, Red LEDs controlled by multiple GPIO pins.
	LedType_LED_TYPE_BICOLOR_GPIO_G_R LedType = 7
)

// Enum value maps for LedType.
var (
	LedType_name = map[int32]string{
		0: "LED_TYPE_UNKNOWN",
		1: "LED_TYPE_BICOLOR_FPGA",
		2: "LED_TYPE_BICOLOR_LINK",
		3: "LED_TYPE_BICOLOR_FPGA_G_R",
		4: "LED_TYPE_TRICOLOR_FPGA_GR_GY",
		5: "LED_TYPE_TRICOLOR_FPGA_GR_Y",
		6: "LED_TYPE_TRICOLOR_FPGA_G_R_Y",
		7: "LED_TYPE_BICOLOR_GPIO_G_R",
	}
	LedType_value = map[string]int32{
		"LED_TYPE_UNKNOWN":             0,
		"LED_TYPE_BICOLOR_FPGA":        1,
		"LED_TYPE_BICOLOR_LINK":        2,
		"LED_TYPE_BICOLOR_FPGA_G_R":    3,
		"LED_TYPE_TRICOLOR_FPGA_GR_GY": 4,
		"LED_TYPE_TRICOLOR_FPGA_GR_Y":  5,
		"LED_TYPE_TRICOLOR_FPGA_G_R_Y": 6,
		"LED_TYPE_BICOLOR_GPIO_G_R":    7,
	}
)

func (x LedType) Enum() *LedType {
	p := new(LedType)
	*p = x
	return p
}

func (x LedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (LedType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x LedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedType.Descriptor instead.
func (LedType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

// Possible color for LED lights. Possible LedColor for any supported LedType
// should be listed here.
type LedColor int32

const (
	LedColor_LED_COLOR_UNKNOWN LedColor = 0 // Used when the color is undetermined
	// e.g. after warm boot
	LedColor_LED_COLOR_GREEN LedColor = 1
	LedColor_LED_COLOR_RED   LedColor = 2
	LedColor_LED_COLOR_AMBER LedColor = 3
)

// Enum value maps for LedColor.
var (
	LedColor_name = map[int32]string{
		0: "LED_COLOR_UNKNOWN",
		1: "LED_COLOR_GREEN",
		2: "LED_COLOR_RED",
		3: "LED_COLOR_AMBER",
	}
	LedColor_value = map[string]int32{
		"LED_COLOR_UNKNOWN": 0,
		"LED_COLOR_GREEN":   1,
		"LED_COLOR_RED":     2,
		"LED_COLOR_AMBER":   3,
	}
)

func (x LedColor) Enum() *LedColor {
	p := new(LedColor)
	*p = x
	return p
}

func (x LedColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedColor) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (LedColor) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x LedColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedColor.Descriptor instead.
func (LedColor) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

// Possible physcial types for a frontpanel port.
type PhysicalPortType int32

const (
	PhysicalPortType_PHYSICAL_PORT_TYPE_UNKNOWN     PhysicalPortType = 0
	PhysicalPortType_PHYSICAL_PORT_TYPE_ETHERNET_1G PhysicalPortType = 1
	PhysicalPortType_PHYSICAL_PORT_TYPE_IPASS       PhysicalPortType = 2
	PhysicalPortType_PHYSICAL_PORT_TYPE_SFP_CAGE    PhysicalPortType = 3
	PhysicalPortType_PHYSICAL_PORT_TYPE_QSFP_CAGE   PhysicalPortType = 4
	PhysicalPortType_PHYSICAL_PORT_TYPE_LP_CAGE     PhysicalPortType = 5
	PhysicalPortType_PHYSICAL_PORT_TYPE_CFP_CAGE    PhysicalPortType = 6
	PhysicalPortType_PHYSICAL_PORT_TYPE_BACKPLANE   PhysicalPortType = 7
	PhysicalPortType_PHYSICAL_PORT_TYPE_DWDM        PhysicalPortType = 8
)

// Enum value maps for PhysicalPortType.
var (
	PhysicalPortType_name = map[int32]string{
		0: "PHYSICAL_PORT_TYPE_UNKNOWN",
		1: "PHYSICAL_PORT_TYPE_ETHERNET_1G",
		2: "PHYSICAL_PORT_TYPE_IPASS",
		3: "PHYSICAL_PORT_TYPE_SFP_CAGE",
		4: "PHYSICAL_PORT_TYPE_QSFP_CAGE",
		5: "PHYSICAL_PORT_TYPE_LP_CAGE",
		6: "PHYSICAL_PORT_TYPE_CFP_CAGE",
		7: "PHYSICAL_PORT_TYPE_BACKPLANE",
		8: "PHYSICAL_PORT_TYPE_DWDM",
	}
	PhysicalPortType_value = map[string]int32{
		"PHYSICAL_PORT_TYPE_UNKNOWN":     0,
		"PHYSICAL_PORT_TYPE_ETHERNET_1G": 1,
		"PHYSICAL_PORT_TYPE_IPASS":       2,
		"PHYSICAL_PORT_TYPE_SFP_CAGE":    3,
		"PHYSICAL_PORT_TYPE_QSFP_CAGE":   4,
		"PHYSICAL_PORT_TYPE_LP_CAGE":     5,
		"PHYSICAL_PORT_TYPE_CFP_CAGE":    6,
		"PHYSICAL_PORT_TYPE_BACKPLANE":   7,
		"PHYSICAL_PORT_TYPE_DWDM":        8,
	}
)

func (x PhysicalPortType) Enum() *PhysicalPortType {
	p := new(PhysicalPortType)
	*p = x
	return p
}

func (x PhysicalPortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhysicalPortType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (PhysicalPortType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x PhysicalPortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhysicalPortType.Descriptor instead.
func (PhysicalPortType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

// The media type for a frontpanel port.
type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNKNOWN     MediaType = 0
	MediaType_MEDIA_TYPE_QSFP_SR4    MediaType = 1
	MediaType_MEDIA_TYPE_QSFP_LR4    MediaType = 2
	MediaType_MEDIA_TYPE_QSFP_COPPER MediaType = 3
	MediaType_MEDIA_TYPE_SFP         MediaType = 5
	MediaType_MEDIA_TYPE_QSFP_PSM4   MediaType = 6
	MediaType_MEDIA_TYPE_CFP_LR4     MediaType = 7
	MediaType_MEDIA_TYPE_CFP_COPPER  MediaType = 8
	MediaType_MEDIA_TYPE_BP_COPPER   MediaType = 9
	MediaType_MEDIA_TYPE_QSFP_CSR4   MediaType = 11
	MediaType_MEDIA_TYPE_QSFP_CLR4   MediaType = 12 // IEEE LR4
	MediaType_MEDIA_TYPE_QSFP_CCR4   MediaType = 14 // 100G copper
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0:  "MEDIA_TYPE_UNKNOWN",
		1:  "MEDIA_TYPE_QSFP_SR4",
		2:  "MEDIA_TYPE_QSFP_LR4",
		3:  "MEDIA_TYPE_QSFP_COPPER",
		5:  "MEDIA_TYPE_SFP",
		6:  "MEDIA_TYPE_QSFP_PSM4",
		7:  "MEDIA_TYPE_CFP_LR4",
		8:  "MEDIA_TYPE_CFP_COPPER",
		9:  "MEDIA_TYPE_BP_COPPER",
		11: "MEDIA_TYPE_QSFP_CSR4",
		12: "MEDIA_TYPE_QSFP_CLR4",
		14: "MEDIA_TYPE_QSFP_CCR4",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNKNOWN":     0,
		"MEDIA_TYPE_QSFP_SR4":    1,
		"MEDIA_TYPE_QSFP_LR4":    2,
		"MEDIA_TYPE_QSFP_COPPER": 3,
		"MEDIA_TYPE_SFP":         5,
		"MEDIA_TYPE_QSFP_PSM4":   6,
		"MEDIA_TYPE_CFP_LR4":     7,
		"MEDIA_TYPE_CFP_COPPER":  8,
		"MEDIA_TYPE_BP_COPPER":   9,
		"MEDIA_TYPE_QSFP_CSR4":   11,
		"MEDIA_TYPE_QSFP_CLR4":   12,
		"MEDIA_TYPE_QSFP_CCR4":   14,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

// TODO(unknown): revise these enum as needed per ASIC integration
//       currently maps to sff_sfp_type_t defined in sff.h
type SfpType int32

const (
	SfpType_SFP_TYPE_UNKNOWN   SfpType = 0
	SfpType_SFP_TYPE_SFP       SfpType = 1
	SfpType_SFP_TYPE_QSFP      SfpType = 2
	SfpType_SFP_TYPE_QSFP_PLUS SfpType = 3
	SfpType_SFP_TYPE_QSFP28    SfpType = 4
	SfpType_SFP_TYPE_SFP28     SfpType = 5
)

// Enum value maps for SfpType.
var (
	SfpType_name = map[int32]string{
		0: "SFP_TYPE_UNKNOWN",
		1: "SFP_TYPE_SFP",
		2: "SFP_TYPE_QSFP",
		3: "SFP_TYPE_QSFP_PLUS",
		4: "SFP_TYPE_QSFP28",
		5: "SFP_TYPE_SFP28",
	}
	SfpType_value = map[string]int32{
		"SFP_TYPE_UNKNOWN":   0,
		"SFP_TYPE_SFP":       1,
		"SFP_TYPE_QSFP":      2,
		"SFP_TYPE_QSFP_PLUS": 3,
		"SFP_TYPE_QSFP28":    4,
		"SFP_TYPE_SFP28":     5,
	}
)

func (x SfpType) Enum() *SfpType {
	p := new(SfpType)
	*p = x
	return p
}

func (x SfpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SfpType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (SfpType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x SfpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SfpType.Descriptor instead.
func (SfpType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

// TODO(unknown): revise these enum as needed per ASIC integration
//       currently maps to sff_module_type_t defined in sff.h
type SfpModuleType int32

const (
	SfpModuleType_SFP_MODULE_TYPE_UNKNOWN       SfpModuleType = 0
	SfpModuleType_SFP_MODULE_TYPE_100G_BASE_CR4 SfpModuleType = 1
	SfpModuleType_SFP_MODULE_TYPE_10G_BASE_CR   SfpModuleType = 2
	SfpModuleType_SFP_MODULE_TYPE_1G_BASE_SX    SfpModuleType = 3
)

// Enum value maps for SfpModuleType.
var (
	SfpModuleType_name = map[int32]string{
		0: "SFP_MODULE_TYPE_UNKNOWN",
		1: "SFP_MODULE_TYPE_100G_BASE_CR4",
		2: "SFP_MODULE_TYPE_10G_BASE_CR",
		3: "SFP_MODULE_TYPE_1G_BASE_SX",
	}
	SfpModuleType_value = map[string]int32{
		"SFP_MODULE_TYPE_UNKNOWN":       0,
		"SFP_MODULE_TYPE_100G_BASE_CR4": 1,
		"SFP_MODULE_TYPE_10G_BASE_CR":   2,
		"SFP_MODULE_TYPE_1G_BASE_SX":    3,
	}
)

func (x SfpModuleType) Enum() *SfpModuleType {
	p := new(SfpModuleType)
	*p = x
	return p
}

func (x SfpModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SfpModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[18].Descriptor()
}

func (SfpModuleType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[18]
}

func (x SfpModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SfpModuleType.Descriptor instead.
func (SfpModuleType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

// Possible directions for a fan module.
// currently maps to onlp_fan_info_t defined in fan.h
type FanDir int32

const (
	FanDir_FAN_DIR_UNKNOWN FanDir = 0
	FanDir_FAN_DIR_B2F     FanDir = 1
	FanDir_FAN_DIR_F2B     FanDir = 2
)

// Enum value maps for FanDir.
var (
	FanDir_name = map[int32]string{
		0: "FAN_DIR_UNKNOWN",
		1: "FAN_DIR_B2F",
		2: "FAN_DIR_F2B",
	}
	FanDir_value = map[string]int32{
		"FAN_DIR_UNKNOWN": 0,
		"FAN_DIR_B2F":     1,
		"FAN_DIR_F2B":     2,
	}
)

func (x FanDir) Enum() *FanDir {
	p := new(FanDir)
	*p = x
	return p
}

func (x FanDir) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanDir) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[19].Descriptor()
}

func (FanDir) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[19]
}

func (x FanDir) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanDir.Descriptor instead.
func (FanDir) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

// Possible types for a PSU.
// currently maps to onlp_psu_type_t defined in psu.h
type PsuType int32

const (
	PsuType_PSU_TYPE_UNKNOWN PsuType = 0
	PsuType_PSU_TYPE_AC      PsuType = 1
	PsuType_PSU_TYPE_DC12    PsuType = 2
	PsuType_PSU_TYPE_DC48    PsuType = 3
)

// Enum value maps for PsuType.
var (
	PsuType_name = map[int32]string{
		0: "PSU_TYPE_UNKNOWN",
		1: "PSU_TYPE_AC",
		2: "PSU_TYPE_DC12",
		3: "PSU_TYPE_DC48",
	}
	PsuType_value = map[string]int32{
		"PSU_TYPE_UNKNOWN": 0,
		"PSU_TYPE_AC":      1,
		"PSU_TYPE_DC12":    2,
		"PSU_TYPE_DC48":    3,
	}
)

func (x PsuType) Enum() *PsuType {
	p := new(PsuType)
	*p = x
	return p
}

func (x PsuType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PsuType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[20].Descriptor()
}

func (PsuType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[20]
}

func (x PsuType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PsuType.Descriptor instead.
func (PsuType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

// Possible modes for a LED module.
// currently maps to onlp_led_info_t defined in led.h
type LedMode int32

const (
	LedMode_LED_MODE_UNKNOWN         LedMode = 0
	LedMode_LED_MODE_OFF             LedMode = 1
	LedMode_LED_MODE_AUTO            LedMode = 2
	LedMode_LED_MODE_AUTO_BLINKING   LedMode = 3
	LedMode_LED_MODE_CHAR            LedMode = 4
	LedMode_LED_MODE_RED             LedMode = 5
	LedMode_LED_MODE_RED_BLINKING    LedMode = 6
	LedMode_LED_MODE_ORANGE          LedMode = 7
	LedMode_LED_MODE_ORANGE_BLINKING LedMode = 8
	LedMode_LED_MODE_YELLOW          LedMode = 9
	LedMode_LED_MODE_YELLOW_BLINKING LedMode = 10
	LedMode_LED_MODE_GREEN           LedMode = 11
	LedMode_LED_MODE_GREEN_BLINKING  LedMode = 12
	LedMode_LED_MODE_BLUE            LedMode = 13
	LedMode_LED_MODE_BLUE_BLINKING   LedMode = 14
	LedMode_LED_MODE_PURPLE          LedMode = 15
	LedMode_LED_MODE_PURPLE_BLINKING LedMode = 16
)

// Enum value maps for LedMode.
var (
	LedMode_name = map[int32]string{
		0:  "LED_MODE_UNKNOWN",
		1:  "LED_MODE_OFF",
		2:  "LED_MODE_AUTO",
		3:  "LED_MODE_AUTO_BLINKING",
		4:  "LED_MODE_CHAR",
		5:  "LED_MODE_RED",
		6:  "LED_MODE_RED_BLINKING",
		7:  "LED_MODE_ORANGE",
		8:  "LED_MODE_ORANGE_BLINKING",
		9:  "LED_MODE_YELLOW",
		10: "LED_MODE_YELLOW_BLINKING",
		11: "LED_MODE_GREEN",
		12: "LED_MODE_GREEN_BLINKING",
		13: "LED_MODE_BLUE",
		14: "LED_MODE_BLUE_BLINKING",
		15: "LED_MODE_PURPLE",
		16: "LED_MODE_PURPLE_BLINKING",
	}
	LedMode_value = map[string]int32{
		"LED_MODE_UNKNOWN":         0,
		"LED_MODE_OFF":             1,
		"LED_MODE_AUTO":            2,
		"LED_MODE_AUTO_BLINKING":   3,
		"LED_MODE_CHAR":            4,
		"LED_MODE_RED":             5,
		"LED_MODE_RED_BLINKING":    6,
		"LED_MODE_ORANGE":          7,
		"LED_MODE_ORANGE_BLINKING": 8,
		"LED_MODE_YELLOW":          9,
		"LED_MODE_YELLOW_BLINKING": 10,
		"LED_MODE_GREEN":           11,
		"LED_MODE_GREEN_BLINKING":  12,
		"LED_MODE_BLUE":            13,
		"LED_MODE_BLUE_BLINKING":   14,
		"LED_MODE_PURPLE":          15,
		"LED_MODE_PURPLE_BLINKING": 16,
	}
)

func (x LedMode) Enum() *LedMode {
	p := new(LedMode)
	*p = x
	return p
}

func (x LedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[21].Descriptor()
}

func (LedMode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[21]
}

func (x LedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedMode.Descriptor instead.
func (LedMode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

type ChassisConfigParams_TuntapConfig_Mode int32

const (
	ChassisConfigParams_TuntapConfig_UNKNOWN      ChassisConfigParams_TuntapConfig_Mode = 0
	ChassisConfigParams_TuntapConfig_DISABLED     ChassisConfigParams_TuntapConfig_Mode = 1
	ChassisConfigParams_TuntapConfig_BOOTSTRAP    ChassisConfigParams_TuntapConfig_Mode = 2
	ChassisConfigParams_TuntapConfig_LOAD_BALANCE ChassisConfigParams_TuntapConfig_Mode = 3
)

// Enum value maps for ChassisConfigParams_TuntapConfig_Mode.
var (
	ChassisConfigParams_TuntapConfig_Mode_name = map[int32]string{
		0: "UNKNOWN",
		1: "DISABLED",
		2: "BOOTSTRAP",
		3: "LOAD_BALANCE",
	}
	ChassisConfigParams_TuntapConfig_Mode_value = map[string]int32{
		"UNKNOWN":      0,
		"DISABLED":     1,
		"BOOTSTRAP":    2,
		"LOAD_BALANCE": 3,
	}
)

func (x ChassisConfigParams_TuntapConfig_Mode) Enum() *ChassisConfigParams_TuntapConfig_Mode {
	p := new(ChassisConfigParams_TuntapConfig_Mode)
	*p = x
	return p
}

func (x ChassisConfigParams_TuntapConfig_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisConfigParams_TuntapConfig_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[22].Descriptor()
}

func (ChassisConfigParams_TuntapConfig_Mode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[22]
}

func (x ChassisConfigParams_TuntapConfig_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisConfigParams_TuntapConfig_Mode.Descriptor instead.
func (ChassisConfigParams_TuntapConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Scheduling mode.
type NodeConfigParams_QosConfig_SchedulingMode int32

const (
	NodeConfigParams_QosConfig_QOS_SCHED_UNKNOWN NodeConfigParams_QosConfig_SchedulingMode = 0 // unknown (default)
	NodeConfigParams_QosConfig_QOS_SCHED_SP      NodeConfigParams_QosConfig_SchedulingMode = 1 // strict priority
	NodeConfigParams_QosConfig_QOS_SCHED_RR      NodeConfigParams_QosConfig_SchedulingMode = 2 // round robin
	NodeConfigParams_QosConfig_QOS_SCHED_WRR     NodeConfigParams_QosConfig_SchedulingMode = 3 // weighted round robin
	NodeConfigParams_QosConfig_QOS_SCHED_WDRR    NodeConfigParams_QosConfig_SchedulingMode = 4 // weighted deficit round robin
)

// Enum value maps for NodeConfigParams_QosConfig_SchedulingMode.
var (
	NodeConfigParams_QosConfig_SchedulingMode_name = map[int32]string{
		0: "QOS_SCHED_UNKNOWN",
		1: "QOS_SCHED_SP",
		2: "QOS_SCHED_RR",
		3: "QOS_SCHED_WRR",
		4: "QOS_SCHED_WDRR",
	}
	NodeConfigParams_QosConfig_SchedulingMode_value = map[string]int32{
		"QOS_SCHED_UNKNOWN": 0,
		"QOS_SCHED_SP":      1,
		"QOS_SCHED_RR":      2,
		"QOS_SCHED_WRR":     3,
		"QOS_SCHED_WDRR":    4,
	}
)

func (x NodeConfigParams_QosConfig_SchedulingMode) Enum() *NodeConfigParams_QosConfig_SchedulingMode {
	p := new(NodeConfigParams_QosConfig_SchedulingMode)
	*p = x
	return p
}

func (x NodeConfigParams_QosConfig_SchedulingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeConfigParams_QosConfig_SchedulingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[23].Descriptor()
}

func (NodeConfigParams_QosConfig_SchedulingMode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[23]
}

func (x NodeConfigParams_QosConfig_SchedulingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_SchedulingMode.Descriptor instead.
func (NodeConfigParams_QosConfig_SchedulingMode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 0}
}

// Modulation type for ports.
type PortConfigParams_ModulationType int32

const (
	PortConfigParams_PORT_MODULATION_UNKNOWN PortConfigParams_ModulationType = 0
	PortConfigParams_PORT_MODULATION_NRZ     PortConfigParams_ModulationType = 1
	PortConfigParams_PORT_MODULATION_PAM4    PortConfigParams_ModulationType = 2
)

// Enum value maps for PortConfigParams_ModulationType.
var (
	PortConfigParams_ModulationType_name = map[int32]string{
		0: "PORT_MODULATION_UNKNOWN",
		1: "PORT_MODULATION_NRZ",
		2: "PORT_MODULATION_PAM4",
	}
	PortConfigParams_ModulationType_value = map[string]int32{
		"PORT_MODULATION_UNKNOWN": 0,
		"PORT_MODULATION_NRZ":     1,
		"PORT_MODULATION_PAM4":    2,
	}
)

func (x PortConfigParams_ModulationType) Enum() *PortConfigParams_ModulationType {
	p := new(PortConfigParams_ModulationType)
	*p = x
	return p
}

func (x PortConfigParams_ModulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortConfigParams_ModulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[24].Descriptor()
}

func (PortConfigParams_ModulationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[24]
}

func (x PortConfigParams_ModulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortConfigParams_ModulationType.Descriptor instead.
func (PortConfigParams_ModulationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4, 0}
}

type TrunkPort_TrunkType int32

const (
	TrunkPort_UNKNOWN_TRUNK TrunkPort_TrunkType = 0
	TrunkPort_STATIC_TRUNK  TrunkPort_TrunkType = 1
	TrunkPort_LACP_TRUNK    TrunkPort_TrunkType = 2
)

// Enum value maps for TrunkPort_TrunkType.
var (
	TrunkPort_TrunkType_name = map[int32]string{
		0: "UNKNOWN_TRUNK",
		1: "STATIC_TRUNK",
		2: "LACP_TRUNK",
	}
	TrunkPort_TrunkType_value = map[string]int32{
		"UNKNOWN_TRUNK": 0,
		"STATIC_TRUNK":  1,
		"LACP_TRUNK":    2,
	}
)

func (x TrunkPort_TrunkType) Enum() *TrunkPort_TrunkType {
	p := new(TrunkPort_TrunkType)
	*p = x
	return p
}

func (x TrunkPort_TrunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrunkPort_TrunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[25].Descriptor()
}

func (TrunkPort_TrunkType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[25]
}

func (x TrunkPort_TrunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrunkPort_TrunkType.Descriptor instead.
func (TrunkPort_TrunkType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9, 0}
}

// BcmKnetIntfPurpose defines which application will supposed to use a KNET
// interface defined on a unit and CPU queue.
type GoogleConfig_BcmKnetIntfPurpose int32

const (
	GoogleConfig_BCM_KNET_INTF_PURPOSE_UNKNOWN    GoogleConfig_BcmKnetIntfPurpose = 0 // Default.
	GoogleConfig_BCM_KNET_INTF_PURPOSE_CONTROLLER GoogleConfig_BcmKnetIntfPurpose = 1 // Packets sent to the controller
	GoogleConfig_BCM_KNET_INTF_PURPOSE_SFLOW      GoogleConfig_BcmKnetIntfPurpose = 2 // Packets sent to the sflow agent
)

// Enum value maps for GoogleConfig_BcmKnetIntfPurpose.
var (
	GoogleConfig_BcmKnetIntfPurpose_name = map[int32]string{
		0: "BCM_KNET_INTF_PURPOSE_UNKNOWN",
		1: "BCM_KNET_INTF_PURPOSE_CONTROLLER",
		2: "BCM_KNET_INTF_PURPOSE_SFLOW",
	}
	GoogleConfig_BcmKnetIntfPurpose_value = map[string]int32{
		"BCM_KNET_INTF_PURPOSE_UNKNOWN":    0,
		"BCM_KNET_INTF_PURPOSE_CONTROLLER": 1,
		"BCM_KNET_INTF_PURPOSE_SFLOW":      2,
	}
)

func (x GoogleConfig_BcmKnetIntfPurpose) Enum() *GoogleConfig_BcmKnetIntfPurpose {
	p := new(GoogleConfig_BcmKnetIntfPurpose)
	*p = x
	return p
}

func (x GoogleConfig_BcmKnetIntfPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoogleConfig_BcmKnetIntfPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[26].Descriptor()
}

func (GoogleConfig_BcmKnetIntfPurpose) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[26]
}

func (x GoogleConfig_BcmKnetIntfPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoogleConfig_BcmKnetIntfPurpose.Descriptor instead.
func (GoogleConfig_BcmKnetIntfPurpose) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 0}
}

type GoogleConfig_BcmRtag7HashConfig_HashField int32

const (
	GoogleConfig_BcmRtag7HashConfig_UNKNOWN_FIELD              GoogleConfig_BcmRtag7HashConfig_HashField = 0
	GoogleConfig_BcmRtag7HashConfig_SRC_IP                     GoogleConfig_BcmRtag7HashConfig_HashField = 1
	GoogleConfig_BcmRtag7HashConfig_DST_IP                     GoogleConfig_BcmRtag7HashConfig_HashField = 2
	GoogleConfig_BcmRtag7HashConfig_SRC_PORT                   GoogleConfig_BcmRtag7HashConfig_HashField = 3
	GoogleConfig_BcmRtag7HashConfig_DST_PORT                   GoogleConfig_BcmRtag7HashConfig_HashField = 4
	GoogleConfig_BcmRtag7HashConfig_VLAN_ID                    GoogleConfig_BcmRtag7HashConfig_HashField = 5
	GoogleConfig_BcmRtag7HashConfig_IP_PROTO                   GoogleConfig_BcmRtag7HashConfig_HashField = 6
	GoogleConfig_BcmRtag7HashConfig_MPLS_LABEL                 GoogleConfig_BcmRtag7HashConfig_HashField = 7
	GoogleConfig_BcmRtag7HashConfig_IPV6_LO_FLOW_LABEL_16_BITS GoogleConfig_BcmRtag7HashConfig_HashField = 8
	GoogleConfig_BcmRtag7HashConfig_IPV6_HI_FLOW_LABEL_4_BITS  GoogleConfig_BcmRtag7HashConfig_HashField = 9
)

// Enum value maps for GoogleConfig_BcmRtag7HashConfig_HashField.
var (
	GoogleConfig_BcmRtag7HashConfig_HashField_name = map[int32]string{
		0: "UNKNOWN_FIELD",
		1: "SRC_IP",
		2: "DST_IP",
		3: "SRC_PORT",
		4: "DST_PORT",
		5: "VLAN_ID",
		6: "IP_PROTO",
		7: "MPLS_LABEL",
		8: "IPV6_LO_FLOW_LABEL_16_BITS",
		9: "IPV6_HI_FLOW_LABEL_4_BITS",
	}
	GoogleConfig_BcmRtag7HashConfig_HashField_value = map[string]int32{
		"UNKNOWN_FIELD":              0,
		"SRC_IP":                     1,
		"DST_IP":                     2,
		"SRC_PORT":                   3,
		"DST_PORT":                   4,
		"VLAN_ID":                    5,
		"IP_PROTO":                   6,
		"MPLS_LABEL":                 7,
		"IPV6_LO_FLOW_LABEL_16_BITS": 8,
		"IPV6_HI_FLOW_LABEL_4_BITS":  9,
	}
)

func (x GoogleConfig_BcmRtag7HashConfig_HashField) Enum() *GoogleConfig_BcmRtag7HashConfig_HashField {
	p := new(GoogleConfig_BcmRtag7HashConfig_HashField)
	*p = x
	return p
}

func (x GoogleConfig_BcmRtag7HashConfig_HashField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoogleConfig_BcmRtag7HashConfig_HashField) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[27].Descriptor()
}

func (GoogleConfig_BcmRtag7HashConfig_HashField) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[27]
}

func (x GoogleConfig_BcmRtag7HashConfig_HashField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_HashField.Descriptor instead.
func (GoogleConfig_BcmRtag7HashConfig_HashField) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 0}
}

type GoogleConfig_BcmRtag7HashConfig_HashBlock int32

const (
	GoogleConfig_BcmRtag7HashConfig_UNKNOWN_BLOCK GoogleConfig_BcmRtag7HashConfig_HashBlock = 0
	GoogleConfig_BcmRtag7HashConfig_RTAG7A        GoogleConfig_BcmRtag7HashConfig_HashBlock = 1
	GoogleConfig_BcmRtag7HashConfig_RTAG7B        GoogleConfig_BcmRtag7HashConfig_HashBlock = 2
)

// Enum value maps for GoogleConfig_BcmRtag7HashConfig_HashBlock.
var (
	GoogleConfig_BcmRtag7HashConfig_HashBlock_name = map[int32]string{
		0: "UNKNOWN_BLOCK",
		1: "RTAG7A",
		2: "RTAG7B",
	}
	GoogleConfig_BcmRtag7HashConfig_HashBlock_value = map[string]int32{
		"UNKNOWN_BLOCK": 0,
		"RTAG7A":        1,
		"RTAG7B":        2,
	}
)

func (x GoogleConfig_BcmRtag7HashConfig_HashBlock) Enum() *GoogleConfig_BcmRtag7HashConfig_HashBlock {
	p := new(GoogleConfig_BcmRtag7HashConfig_HashBlock)
	*p = x
	return p
}

func (x GoogleConfig_BcmRtag7HashConfig_HashBlock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoogleConfig_BcmRtag7HashConfig_HashBlock) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[28].Descriptor()
}

func (GoogleConfig_BcmRtag7HashConfig_HashBlock) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[28]
}

func (x GoogleConfig_BcmRtag7HashConfig_HashBlock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_HashBlock.Descriptor instead.
func (GoogleConfig_BcmRtag7HashConfig_HashBlock) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 1}
}

type GoogleConfig_BcmRtag7HashConfig_HashSubBlock int32

const (
	GoogleConfig_BcmRtag7HashConfig_UNKNOWN_SUB_BLOCK GoogleConfig_BcmRtag7HashConfig_HashSubBlock = 0
	GoogleConfig_BcmRtag7HashConfig_RTAG7A0           GoogleConfig_BcmRtag7HashConfig_HashSubBlock = 1
	GoogleConfig_BcmRtag7HashConfig_RTAG7B0           GoogleConfig_BcmRtag7HashConfig_HashSubBlock = 2
	GoogleConfig_BcmRtag7HashConfig_RTAG7A1           GoogleConfig_BcmRtag7HashConfig_HashSubBlock = 3
	GoogleConfig_BcmRtag7HashConfig_RTAG7B1           GoogleConfig_BcmRtag7HashConfig_HashSubBlock = 4
)

// Enum value maps for GoogleConfig_BcmRtag7HashConfig_HashSubBlock.
var (
	GoogleConfig_BcmRtag7HashConfig_HashSubBlock_name = map[int32]string{
		0: "UNKNOWN_SUB_BLOCK",
		1: "RTAG7A0",
		2: "RTAG7B0",
		3: "RTAG7A1",
		4: "RTAG7B1",
	}
	GoogleConfig_BcmRtag7HashConfig_HashSubBlock_value = map[string]int32{
		"UNKNOWN_SUB_BLOCK": 0,
		"RTAG7A0":           1,
		"RTAG7B0":           2,
		"RTAG7A1":           3,
		"RTAG7B1":           4,
	}
)

func (x GoogleConfig_BcmRtag7HashConfig_HashSubBlock) Enum() *GoogleConfig_BcmRtag7HashConfig_HashSubBlock {
	p := new(GoogleConfig_BcmRtag7HashConfig_HashSubBlock)
	*p = x
	return p
}

func (x GoogleConfig_BcmRtag7HashConfig_HashSubBlock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoogleConfig_BcmRtag7HashConfig_HashSubBlock) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[29].Descriptor()
}

func (GoogleConfig_BcmRtag7HashConfig_HashSubBlock) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[29]
}

func (x GoogleConfig_BcmRtag7HashConfig_HashSubBlock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_HashSubBlock.Descriptor instead.
func (GoogleConfig_BcmRtag7HashConfig_HashSubBlock) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 2}
}

type GoogleConfig_BcmRtag7HashConfig_Polynomial int32

const (
	GoogleConfig_BcmRtag7HashConfig_UNKNOWN_POLYNOMIAL GoogleConfig_BcmRtag7HashConfig_Polynomial = 0
	GoogleConfig_BcmRtag7HashConfig_BISYNC             GoogleConfig_BcmRtag7HashConfig_Polynomial = 1
	GoogleConfig_BcmRtag7HashConfig_BISYNC_XOR1        GoogleConfig_BcmRtag7HashConfig_Polynomial = 2
	GoogleConfig_BcmRtag7HashConfig_BISYNC_XOR2        GoogleConfig_BcmRtag7HashConfig_Polynomial = 3
	GoogleConfig_BcmRtag7HashConfig_BISYNC_XOR4        GoogleConfig_BcmRtag7HashConfig_Polynomial = 4
	GoogleConfig_BcmRtag7HashConfig_BISYNC_XOR8        GoogleConfig_BcmRtag7HashConfig_Polynomial = 5
	GoogleConfig_BcmRtag7HashConfig_CCITT              GoogleConfig_BcmRtag7HashConfig_Polynomial = 6
	GoogleConfig_BcmRtag7HashConfig_XOR16              GoogleConfig_BcmRtag7HashConfig_Polynomial = 7
	GoogleConfig_BcmRtag7HashConfig_CRC32_LO           GoogleConfig_BcmRtag7HashConfig_Polynomial = 8  // 16 LSBs of computed CRC32
	GoogleConfig_BcmRtag7HashConfig_CRC32_HI           GoogleConfig_BcmRtag7HashConfig_Polynomial = 9  // 16 MSBs of computed CRC32
	GoogleConfig_BcmRtag7HashConfig_CRC32_ETH_LO       GoogleConfig_BcmRtag7HashConfig_Polynomial = 10 // 16 LSBs of Ethernet CRC32
	GoogleConfig_BcmRtag7HashConfig_CRC32_ETH_HI       GoogleConfig_BcmRtag7HashConfig_Polynomial = 11 // 16 MSBs of Ethernet CRC32
	GoogleConfig_BcmRtag7HashConfig_CRC32_KOOPMAN_LO   GoogleConfig_BcmRtag7HashConfig_Polynomial = 12 // 16 LSBs of Koopman CRC32
	GoogleConfig_BcmRtag7HashConfig_CRC32_KOOPMAN_HI   GoogleConfig_BcmRtag7HashConfig_Polynomial = 13 // 16 MSBs of Koopman CRC32
)

// Enum value maps for GoogleConfig_BcmRtag7HashConfig_Polynomial.
var (
	GoogleConfig_BcmRtag7HashConfig_Polynomial_name = map[int32]string{
		0:  "UNKNOWN_POLYNOMIAL",
		1:  "BISYNC",
		2:  "BISYNC_XOR1",
		3:  "BISYNC_XOR2",
		4:  "BISYNC_XOR4",
		5:  "BISYNC_XOR8",
		6:  "CCITT",
		7:  "XOR16",
		8:  "CRC32_LO",
		9:  "CRC32_HI",
		10: "CRC32_ETH_LO",
		11: "CRC32_ETH_HI",
		12: "CRC32_KOOPMAN_LO",
		13: "CRC32_KOOPMAN_HI",
	}
	GoogleConfig_BcmRtag7HashConfig_Polynomial_value = map[string]int32{
		"UNKNOWN_POLYNOMIAL": 0,
		"BISYNC":             1,
		"BISYNC_XOR1":        2,
		"BISYNC_XOR2":        3,
		"BISYNC_XOR4":        4,
		"BISYNC_XOR8":        5,
		"CCITT":              6,
		"XOR16":              7,
		"CRC32_LO":           8,
		"CRC32_HI":           9,
		"CRC32_ETH_LO":       10,
		"CRC32_ETH_HI":       11,
		"CRC32_KOOPMAN_LO":   12,
		"CRC32_KOOPMAN_HI":   13,
	}
)

func (x GoogleConfig_BcmRtag7HashConfig_Polynomial) Enum() *GoogleConfig_BcmRtag7HashConfig_Polynomial {
	p := new(GoogleConfig_BcmRtag7HashConfig_Polynomial)
	*p = x
	return p
}

func (x GoogleConfig_BcmRtag7HashConfig_Polynomial) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoogleConfig_BcmRtag7HashConfig_Polynomial) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[30].Descriptor()
}

func (GoogleConfig_BcmRtag7HashConfig_Polynomial) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[30]
}

func (x GoogleConfig_BcmRtag7HashConfig_Polynomial) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_Polynomial.Descriptor instead.
func (GoogleConfig_BcmRtag7HashConfig_Polynomial) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 3}
}

type Alarm_Severity int32

const (
	Alarm_UNKNOWN  Alarm_Severity = 0
	Alarm_MINOR    Alarm_Severity = 1
	Alarm_WARNING  Alarm_Severity = 2
	Alarm_MAJOR    Alarm_Severity = 3
	Alarm_CRITICAL Alarm_Severity = 4
)

// Enum value maps for Alarm_Severity.
var (
	Alarm_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "MINOR",
		2: "WARNING",
		3: "MAJOR",
		4: "CRITICAL",
	}
	Alarm_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"MINOR":    1,
		"WARNING":  2,
		"MAJOR":    3,
		"CRITICAL": 4,
	}
)

func (x Alarm_Severity) Enum() *Alarm_Severity {
	p := new(Alarm_Severity)
	*p = x
	return p
}

func (x Alarm_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alarm_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[31].Descriptor()
}

func (Alarm_Severity) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[31]
}

func (x Alarm_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alarm_Severity.Descriptor instead.
func (Alarm_Severity) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30, 0}
}

// Config-related parameters for the entire chassis.
type ChassisConfigParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LacpConfig    *ChassisConfigParams_LacpConfig     `protobuf:"bytes,1,opt,name=lacp_config,json=lacpConfig,proto3" json:"lacp_config,omitempty"`
	NetConfig     *ChassisConfigParams_NtpConfig      `protobuf:"bytes,2,opt,name=net_config,json=netConfig,proto3" json:"net_config,omitempty"`
	PowerConfig   *ChassisConfigParams_PowerConfig    `protobuf:"bytes,3,opt,name=power_config,json=powerConfig,proto3" json:"power_config,omitempty"`
	FanConfigs    []*ChassisConfigParams_FanConfig    `protobuf:"bytes,4,rep,name=fan_configs,json=fanConfigs,proto3" json:"fan_configs,omitempty"`
	TuntapConfigs []*ChassisConfigParams_TuntapConfig `protobuf:"bytes,5,rep,name=tuntap_configs,json=tuntapConfigs,proto3" json:"tuntap_configs,omitempty"`
}

func (x *ChassisConfigParams) Reset() {
	*x = ChassisConfigParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams) ProtoMessage() {}

func (x *ChassisConfigParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *ChassisConfigParams) GetLacpConfig() *ChassisConfigParams_LacpConfig {
	if x != nil {
		return x.LacpConfig
	}
	return nil
}

func (x *ChassisConfigParams) GetNetConfig() *ChassisConfigParams_NtpConfig {
	if x != nil {
		return x.NetConfig
	}
	return nil
}

func (x *ChassisConfigParams) GetPowerConfig() *ChassisConfigParams_PowerConfig {
	if x != nil {
		return x.PowerConfig
	}
	return nil
}

func (x *ChassisConfigParams) GetFanConfigs() []*ChassisConfigParams_FanConfig {
	if x != nil {
		return x.FanConfigs
	}
	return nil
}

func (x *ChassisConfigParams) GetTuntapConfigs() []*ChassisConfigParams_TuntapConfig {
	if x != nil {
		return x.TuntapConfigs
	}
	return nil
}

// Flow-related parameters for for switching nodes (aka chips).
type NodeFlowParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeFlowParams) Reset() {
	*x = NodeFlowParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeFlowParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFlowParams) ProtoMessage() {}

func (x *NodeFlowParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFlowParams.ProtoReflect.Descriptor instead.
func (*NodeFlowParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// Config-related parameters for switching nodes (aka chips).
type NodeConfigParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanConfigs []*NodeConfigParams_VlanConfig `protobuf:"bytes,1,rep,name=vlan_configs,json=vlanConfigs,proto3" json:"vlan_configs,omitempty"`
	L2Config    *NodeConfigParams_L2Config     `protobuf:"bytes,2,opt,name=l2_config,json=l2Config,proto3" json:"l2_config,omitempty"`
	QosConfig   *NodeConfigParams_QosConfig    `protobuf:"bytes,3,opt,name=qos_config,json=qosConfig,proto3" json:"qos_config,omitempty"`
}

func (x *NodeConfigParams) Reset() {
	*x = NodeConfigParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams) ProtoMessage() {}

func (x *NodeConfigParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams.ProtoReflect.Descriptor instead.
func (*NodeConfigParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *NodeConfigParams) GetVlanConfigs() []*NodeConfigParams_VlanConfig {
	if x != nil {
		return x.VlanConfigs
	}
	return nil
}

func (x *NodeConfigParams) GetL2Config() *NodeConfigParams_L2Config {
	if x != nil {
		return x.L2Config
	}
	return nil
}

func (x *NodeConfigParams) GetQosConfig() *NodeConfigParams_QosConfig {
	if x != nil {
		return x.QosConfig
	}
	return nil
}

// Flow-related parameters for the ports (singleton and trunk ports).
type PortFlowParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortFlowParams) Reset() {
	*x = PortFlowParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortFlowParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortFlowParams) ProtoMessage() {}

func (x *PortFlowParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortFlowParams.ProtoReflect.Descriptor instead.
func (*PortFlowParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

// Config-related parameters for the ports (singleton and trunk ports).
type PortConfigParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configured admin state for this port.
	AdminState AdminState `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3,enum=stratum.hal.AdminState" json:"admin_state,omitempty"`
	// The per port MTU (aka max frame size) for this port.
	Mtu int32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Whether autoneg is enabled for this port.
	Autoneg TriState `protobuf:"varint,3,opt,name=autoneg,proto3,enum=stratum.hal.TriState" json:"autoneg,omitempty"`
	// The per port hash config for this port.
	HashConfig *PortConfigParams_HashConfig `protobuf:"bytes,4,opt,name=hash_config,json=hashConfig,proto3" json:"hash_config,omitempty"`
	// The modulation type used for the port. Required for some platforms.
	ModulationType PortConfigParams_ModulationType `protobuf:"varint,5,opt,name=modulation_type,json=modulationType,proto3,enum=stratum.hal.PortConfigParams_ModulationType" json:"modulation_type,omitempty"`
	// FEC operational mode
	FecMode FecMode `protobuf:"varint,6,opt,name=fec_mode,json=fecMode,proto3,enum=stratum.hal.FecMode" json:"fec_mode,omitempty"`
	// The configured mac address for this port.
	MacAddress uint64 `protobuf:"varint,7,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// The configured loopback state for this port.
	LoopbackMode LoopbackState `protobuf:"varint,8,opt,name=loopback_mode,json=loopbackMode,proto3,enum=stratum.hal.LoopbackState" json:"loopback_mode,omitempty"`
}

func (x *PortConfigParams) Reset() {
	*x = PortConfigParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfigParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfigParams) ProtoMessage() {}

func (x *PortConfigParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfigParams.ProtoReflect.Descriptor instead.
func (*PortConfigParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *PortConfigParams) GetAdminState() AdminState {
	if x != nil {
		return x.AdminState
	}
	return AdminState_ADMIN_STATE_UNKNOWN
}

func (x *PortConfigParams) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *PortConfigParams) GetAutoneg() TriState {
	if x != nil {
		return x.Autoneg
	}
	return TriState_TRI_STATE_UNKNOWN
}

func (x *PortConfigParams) GetHashConfig() *PortConfigParams_HashConfig {
	if x != nil {
		return x.HashConfig
	}
	return nil
}

func (x *PortConfigParams) GetModulationType() PortConfigParams_ModulationType {
	if x != nil {
		return x.ModulationType
	}
	return PortConfigParams_PORT_MODULATION_UNKNOWN
}

func (x *PortConfigParams) GetFecMode() FecMode {
	if x != nil {
		return x.FecMode
	}
	return FecMode_FEC_MODE_UNKNOWN
}

func (x *PortConfigParams) GetMacAddress() uint64 {
	if x != nil {
		return x.MacAddress
	}
	return 0
}

func (x *PortConfigParams) GetLoopbackMode() LoopbackState {
	if x != nil {
		return x.LoopbackMode
	}
	return LoopbackState_LOOPBACK_STATE_UNKNOWN
}

// Chassis uniquely identifies a switch with a single management interface,
// one or more slots (aka linecards), and one or more switching nodes (aka
// chips) on each linecard.
// NOTE: There is no need to specifiy a unique ID for chassis. Also, there
// is no flow-related parameters specified for the chassis. Flow-related
// parameters only apply to nodes and ports, as specified in this section.
type Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chassis platforms. Required for any platform-specific code.
	Platform Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=stratum.hal.Platform" json:"platform,omitempty"` // required
	// An optional arbitrary name for the chassis. WILL NOT BE PARSED.
	// Example: ju1u1t1.cbf97.net.google.com.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Parameters configured for the entire chassis when config is pushed to the
	// the switch.
	ConfigParams *ChassisConfigParams `protobuf:"bytes,3,opt,name=config_params,json=configParams,proto3" json:"config_params,omitempty"`
}

func (x *Chassis) Reset() {
	*x = Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chassis) ProtoMessage() {}

func (x *Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chassis.ProtoReflect.Descriptor instead.
func (*Chassis) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Chassis) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLT_UNKNOWN
}

func (x *Chassis) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chassis) GetConfigParams() *ChassisConfigParams {
	if x != nil {
		return x.ConfigParams
	}
	return nil
}

// Node uniquely identifies a single switching node (aka chip) on a chassis
// linecard and all its flow-related and config-related parameters.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the switching node on the chassis as used by the
	// controller.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // required
	// An optional arbitrary name for the switching node. WILL NOT BE PARSED.
	// Example: jka1switch.prod.google.com.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The 1-base index of the slot (aka linecard) which this node belongs.
	Slot int32 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"` // required
	// The optional 1-base index of the node within the chassis. The value
	// must be in {1..N}, where N is the number of chips on the chassis. This
	// index is not necessarily in the model. The stack can use this internally
	// to index the nodes.
	Index int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// Flow-related parameters for the switching nodes.
	FlowParams *NodeFlowParams `protobuf:"bytes,5,opt,name=flow_params,json=flowParams,proto3" json:"flow_params,omitempty"`
	// Parameters configured for switching node when config is pushed to the
	// the switch.
	ConfigParams *NodeConfigParams `protobuf:"bytes,6,opt,name=config_params,json=configParams,proto3" json:"config_params,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Node) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Node) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Node) GetFlowParams() *NodeFlowParams {
	if x != nil {
		return x.FlowParams
	}
	return nil
}

func (x *Node) GetConfigParams() *NodeConfigParams {
	if x != nil {
		return x.ConfigParams
	}
	return nil
}

// SingletonPort uniquely identifies a single physical port on a single chassis
// and all its flow-related and config-related parameters.
// NOTE: Each implementation of SwitchInterface class is assumed to be able to
// translate a SingletonPort to any internal presentation of port used by the
// class. For example:
// SaiSwitch: An implementation of SwitchInterface based on SAI. This class
//            translates SingletonPort to SAI port of type sai_object_id_t
//            and viceversa.
// BcmSwitch: An implementation of SwitchInterface that uses BCM SDK directly.
//            This class translates SingletonPort to a tuple of
//            (int unit, bcm_port_t port) and viceversa.
type SingletonPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the singleton port. Used for operations which need a
	// single unique integer ID for each port (e.g. flow programming). Note that
	// all the singleton and trunk ports use a common range of integer IDs. So,
	// using the same integer ID for a singleton port and a trunk port is not
	// allowed.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // required
	// An optional arbitrary name for the singleton port. WILL NOT BE
	// PARSED. Example: "ju1u1.xyz99.net.google.com:ce-1/32". Used only for
	// logging purposes.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The 1-base index of the slot (aka linecard) of the port.
	Slot int32 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"` // required
	// The 1-base index of the singleton port on the slot.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"` // required
	// The 1-base channel index (only if the port is channelized). Absence or
	// zero means non-channelized.
	Channel int32 `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	// The speed of the ports.
	SpeedBps uint64 `protobuf:"varint,6,opt,name=speed_bps,json=speedBps,proto3" json:"speed_bps,omitempty"` // required
	// The id of the corresponding node that the port belongs to.
	Node uint64 `protobuf:"varint,9,opt,name=node,proto3" json:"node,omitempty"` // required
	// Flow-related parameters used when SingletonPort message is used in flow
	// programming related operations.
	FlowParams *PortFlowParams `protobuf:"bytes,7,opt,name=flow_params,json=flowParams,proto3" json:"flow_params,omitempty"`
	// Parameters configured for each singleton port when config is pushed to the
	// the switch.
	ConfigParams *PortConfigParams `protobuf:"bytes,8,opt,name=config_params,json=configParams,proto3" json:"config_params,omitempty"`
}

func (x *SingletonPort) Reset() {
	*x = SingletonPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingletonPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingletonPort) ProtoMessage() {}

func (x *SingletonPort) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingletonPort.ProtoReflect.Descriptor instead.
func (*SingletonPort) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *SingletonPort) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SingletonPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SingletonPort) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SingletonPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SingletonPort) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *SingletonPort) GetSpeedBps() uint64 {
	if x != nil {
		return x.SpeedBps
	}
	return 0
}

func (x *SingletonPort) GetNode() uint64 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *SingletonPort) GetFlowParams() *PortFlowParams {
	if x != nil {
		return x.FlowParams
	}
	return nil
}

func (x *SingletonPort) GetConfigParams() *PortConfigParams {
	if x != nil {
		return x.ConfigParams
	}
	return nil
}

// OpticalNetworkInterface uniquely identifies a single physical optical
// network interface on a single chassis.
type OpticalNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique optical network interface ID.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// An optional arbitrary name for the optical port. WILL NOT BE PARSED.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The 1-based module index of this port.
	Module int32 `protobuf:"varint,3,opt,name=module,proto3" json:"module,omitempty"`
	// The 1-based network interface index of this port.
	NetworkInterface int32 `protobuf:"varint,4,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	// Optical channel frequency in Hz.
	Frequency uint64 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Target output optical power level of the optical channel, expressed in
	// increments of 0.01 decibel-milliwats.
	TargetOutputPower float64 `protobuf:"fixed64,6,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	// Optical channel operational mode.
	OperationalMode uint64 `protobuf:"varint,7,opt,name=operational_mode,json=operationalMode,proto3" json:"operational_mode,omitempty"`
	// Optical channel line port value.
	LinePort string `protobuf:"bytes,8,opt,name=line_port,json=linePort,proto3" json:"line_port,omitempty"`
}

func (x *OpticalNetworkInterface) Reset() {
	*x = OpticalNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalNetworkInterface) ProtoMessage() {}

func (x *OpticalNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalNetworkInterface.ProtoReflect.Descriptor instead.
func (*OpticalNetworkInterface) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *OpticalNetworkInterface) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpticalNetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpticalNetworkInterface) GetModule() int32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *OpticalNetworkInterface) GetNetworkInterface() int32 {
	if x != nil {
		return x.NetworkInterface
	}
	return 0
}

func (x *OpticalNetworkInterface) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *OpticalNetworkInterface) GetTargetOutputPower() float64 {
	if x != nil {
		return x.TargetOutputPower
	}
	return 0
}

func (x *OpticalNetworkInterface) GetOperationalMode() uint64 {
	if x != nil {
		return x.OperationalMode
	}
	return 0
}

func (x *OpticalNetworkInterface) GetLinePort() string {
	if x != nil {
		return x.LinePort
	}
	return ""
}

// TrunkPort uniquely identifies a single trunk port on a single chassis and
// all its flow-related and config-related parameters. This message is the
// only message we will use to specify trunk ports in the HAL and avoid
// defining any other message to specify trunks of any sort.
type TrunkPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the trunk port. Used for operations which need a
	// single unique integer ID for each port (e.g. flow programming). Note that
	// all the singleton and trunk ports use a common range of integer IDs. So,
	// using the same integer ID for a singleton port and a trunk port is not
	// allowed.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // required
	// An optional arbitrary name for the trunk port. WILL NOT BE PARSED.
	// Example: trk-df101s1i1.cbf96-2.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the corresponding node that the trunk belongs to.
	Node uint64 `protobuf:"varint,3,opt,name=node,proto3" json:"node,omitempty"` // required
	// The type of the trunk.
	Type TrunkPort_TrunkType `protobuf:"varint,4,opt,name=type,proto3,enum=stratum.hal.TrunkPort_TrunkType" json:"type,omitempty"` // required
	// The id of the SingletonPorts or TrunkPorts members. This list can be empty
	// for a LACP trunk but cannot be empty for STATIC trunks.
	Members []uint32 `protobuf:"varint,5,rep,packed,name=members,proto3" json:"members,omitempty"`
	// Flow-related parameters used when TrunkPort message is used in flow
	// programming related operations.
	FlowParams *PortFlowParams `protobuf:"bytes,6,opt,name=flow_params,json=flowParams,proto3" json:"flow_params,omitempty"`
	// Parameters configured for each trunk port when config is pushed to the
	// the switch.
	ConfigParams *PortConfigParams `protobuf:"bytes,7,opt,name=config_params,json=configParams,proto3" json:"config_params,omitempty"`
}

func (x *TrunkPort) Reset() {
	*x = TrunkPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrunkPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrunkPort) ProtoMessage() {}

func (x *TrunkPort) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrunkPort.ProtoReflect.Descriptor instead.
func (*TrunkPort) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *TrunkPort) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrunkPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrunkPort) GetNode() uint64 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *TrunkPort) GetType() TrunkPort_TrunkType {
	if x != nil {
		return x.Type
	}
	return TrunkPort_UNKNOWN_TRUNK
}

func (x *TrunkPort) GetMembers() []uint32 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *TrunkPort) GetFlowParams() *PortFlowParams {
	if x != nil {
		return x.FlowParams
	}
	return nil
}

func (x *TrunkPort) GetConfigParams() *PortConfigParams {
	if x != nil {
		return x.ConfigParams
	}
	return nil
}

// PortGroup uniquely identifies an ECMP/WCMP port group.
type PortGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the port group used for flow programming.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// An optional arbitrary name for the port group. WILL NOT BE PARSED.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The port group members.
	Members []*PortGroup_PortGroupMember `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *PortGroup) Reset() {
	*x = PortGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortGroup) ProtoMessage() {}

func (x *PortGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortGroup.ProtoReflect.Descriptor instead.
func (*PortGroup) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *PortGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PortGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortGroup) GetMembers() []*PortGroup_PortGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

// Config specific to Google-build chassis.
type GoogleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BcmChassisMap id. Only needed if the chassis supports more than one
	// chassis map.
	BcmChassisMapId string `protobuf:"bytes,1,opt,name=bcm_chassis_map_id,json=bcmChassisMapId,proto3" json:"bcm_chassis_map_id,omitempty"`
	// Maps from the index of the nodes (1-based) to all the configs related to
	// that specific node.
	NodeIdToKnetConfig      map[uint64]*GoogleConfig_BcmKnetConfig      `protobuf:"bytes,2,rep,name=node_id_to_knet_config,json=nodeIdToKnetConfig,proto3" json:"node_id_to_knet_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeIdToRxConfig        map[uint64]*GoogleConfig_BcmRxConfig        `protobuf:"bytes,3,rep,name=node_id_to_rx_config,json=nodeIdToRxConfig,proto3" json:"node_id_to_rx_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeIdToTxConfig        map[uint64]*GoogleConfig_BcmTxConfig        `protobuf:"bytes,4,rep,name=node_id_to_tx_config,json=nodeIdToTxConfig,proto3" json:"node_id_to_tx_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeIdToRateLimitConfig map[uint64]*GoogleConfig_BcmRateLimitConfig `protobuf:"bytes,5,rep,name=node_id_to_rate_limit_config,json=nodeIdToRateLimitConfig,proto3" json:"node_id_to_rate_limit_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeIdToBufferConfig    map[uint64]*GoogleConfig_BcmBufferConfig    `protobuf:"bytes,6,rep,name=node_id_to_buffer_config,json=nodeIdToBufferConfig,proto3" json:"node_id_to_buffer_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeIdToRtag7HashConfig map[uint64]*GoogleConfig_BcmRtag7HashConfig `protobuf:"bytes,7,rep,name=node_id_to_rtag7_hash_config,json=nodeIdToRtag7HashConfig,proto3" json:"node_id_to_rtag7_hash_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GoogleConfig) Reset() {
	*x = GoogleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig) ProtoMessage() {}

func (x *GoogleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *GoogleConfig) GetBcmChassisMapId() string {
	if x != nil {
		return x.BcmChassisMapId
	}
	return ""
}

func (x *GoogleConfig) GetNodeIdToKnetConfig() map[uint64]*GoogleConfig_BcmKnetConfig {
	if x != nil {
		return x.NodeIdToKnetConfig
	}
	return nil
}

func (x *GoogleConfig) GetNodeIdToRxConfig() map[uint64]*GoogleConfig_BcmRxConfig {
	if x != nil {
		return x.NodeIdToRxConfig
	}
	return nil
}

func (x *GoogleConfig) GetNodeIdToTxConfig() map[uint64]*GoogleConfig_BcmTxConfig {
	if x != nil {
		return x.NodeIdToTxConfig
	}
	return nil
}

func (x *GoogleConfig) GetNodeIdToRateLimitConfig() map[uint64]*GoogleConfig_BcmRateLimitConfig {
	if x != nil {
		return x.NodeIdToRateLimitConfig
	}
	return nil
}

func (x *GoogleConfig) GetNodeIdToBufferConfig() map[uint64]*GoogleConfig_BcmBufferConfig {
	if x != nil {
		return x.NodeIdToBufferConfig
	}
	return nil
}

func (x *GoogleConfig) GetNodeIdToRtag7HashConfig() map[uint64]*GoogleConfig_BcmRtag7HashConfig {
	if x != nil {
		return x.NodeIdToRtag7HashConfig
	}
	return nil
}

// Config specific to Tofino chassis.
type TofinoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps from the index of the nodes (1-based) to all the configs related to
	// that specific node.
	NodeIdToPortShapingConfig map[uint64]*TofinoConfig_BfPortShapingConfig `protobuf:"bytes,1,rep,name=node_id_to_port_shaping_config,json=nodeIdToPortShapingConfig,proto3" json:"node_id_to_port_shaping_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TofinoConfig) Reset() {
	*x = TofinoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TofinoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofinoConfig) ProtoMessage() {}

func (x *TofinoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofinoConfig.ProtoReflect.Descriptor instead.
func (*TofinoConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *TofinoConfig) GetNodeIdToPortShapingConfig() map[uint64]*TofinoConfig_BfPortShapingConfig {
	if x != nil {
		return x.NodeIdToPortShapingConfig
	}
	return nil
}

type VendorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoogleConfig *GoogleConfig `protobuf:"bytes,1,opt,name=google_config,json=googleConfig,proto3" json:"google_config,omitempty"`
	TofinoConfig *TofinoConfig `protobuf:"bytes,2,opt,name=tofino_config,json=tofinoConfig,proto3" json:"tofino_config,omitempty"`
}

func (x *VendorConfig) Reset() {
	*x = VendorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorConfig) ProtoMessage() {}

func (x *VendorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorConfig.ProtoReflect.Descriptor instead.
func (*VendorConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *VendorConfig) GetGoogleConfig() *GoogleConfig {
	if x != nil {
		return x.GoogleConfig
	}
	return nil
}

func (x *VendorConfig) GetTofinoConfig() *TofinoConfig {
	if x != nil {
		return x.TofinoConfig
	}
	return nil
}

// ChassisConfig is the internal data structure that encapsulates the so called
// "config" pushed to the entire chassis. The term "chassis" refers to the a
// switching box with one or more switching nodes managed by a mgmt interface.
// The proto includes all the not-so-frequent settings that are required before
// the switch can accept flow programming requests from the controller.
// NOTE: In Stratum the external interface for pushing config is gNMI. The
// proto realization of the YANG models for the config is internally converted
// to a ChassisConfig before it is consumed by the internal stack components.
type ChassisConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description              string                     `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Chassis                  *Chassis                   `protobuf:"bytes,2,opt,name=chassis,proto3" json:"chassis,omitempty"`
	Nodes                    []*Node                    `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	SingletonPorts           []*SingletonPort           `protobuf:"bytes,4,rep,name=singleton_ports,json=singletonPorts,proto3" json:"singleton_ports,omitempty"`
	TrunkPorts               []*TrunkPort               `protobuf:"bytes,5,rep,name=trunk_ports,json=trunkPorts,proto3" json:"trunk_ports,omitempty"`
	PortGroups               []*PortGroup               `protobuf:"bytes,6,rep,name=port_groups,json=portGroups,proto3" json:"port_groups,omitempty"`
	VendorConfig             *VendorConfig              `protobuf:"bytes,7,opt,name=vendor_config,json=vendorConfig,proto3" json:"vendor_config,omitempty"`
	OpticalNetworkInterfaces []*OpticalNetworkInterface `protobuf:"bytes,8,rep,name=optical_network_interfaces,json=opticalNetworkInterfaces,proto3" json:"optical_network_interfaces,omitempty"`
}

func (x *ChassisConfig) Reset() {
	*x = ChassisConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfig) ProtoMessage() {}

func (x *ChassisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *ChassisConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChassisConfig) GetChassis() *Chassis {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *ChassisConfig) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ChassisConfig) GetSingletonPorts() []*SingletonPort {
	if x != nil {
		return x.SingletonPorts
	}
	return nil
}

func (x *ChassisConfig) GetTrunkPorts() []*TrunkPort {
	if x != nil {
		return x.TrunkPorts
	}
	return nil
}

func (x *ChassisConfig) GetPortGroups() []*PortGroup {
	if x != nil {
		return x.PortGroups
	}
	return nil
}

func (x *ChassisConfig) GetVendorConfig() *VendorConfig {
	if x != nil {
		return x.VendorConfig
	}
	return nil
}

func (x *ChassisConfig) GetOpticalNetworkInterfaces() []*OpticalNetworkInterface {
	if x != nil {
		return x.OpticalNetworkInterfaces
	}
	return nil
}

// The module speed capability for a frontpanel port.
// note: currently maps to sff_module_caps_t defined in sff.h
type SfpModuleCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	F_100  bool `protobuf:"varint,1,opt,name=f_100,json=f100,proto3" json:"f_100,omitempty"`
	F_1G   bool `protobuf:"varint,2,opt,name=f_1g,json=f1g,proto3" json:"f_1g,omitempty"`
	F_10G  bool `protobuf:"varint,3,opt,name=f_10g,json=f10g,proto3" json:"f_10g,omitempty"`
	F_40G  bool `protobuf:"varint,4,opt,name=f_40g,json=f40g,proto3" json:"f_40g,omitempty"`
	F_100G bool `protobuf:"varint,5,opt,name=f_100g,json=f100g,proto3" json:"f_100g,omitempty"`
}

func (x *SfpModuleCaps) Reset() {
	*x = SfpModuleCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfpModuleCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfpModuleCaps) ProtoMessage() {}

func (x *SfpModuleCaps) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfpModuleCaps.ProtoReflect.Descriptor instead.
func (*SfpModuleCaps) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *SfpModuleCaps) GetF_100() bool {
	if x != nil {
		return x.F_100
	}
	return false
}

func (x *SfpModuleCaps) GetF_1G() bool {
	if x != nil {
		return x.F_1G
	}
	return false
}

func (x *SfpModuleCaps) GetF_10G() bool {
	if x != nil {
		return x.F_10G
	}
	return false
}

func (x *SfpModuleCaps) GetF_40G() bool {
	if x != nil {
		return x.F_40G
	}
	return false
}

func (x *SfpModuleCaps) GetF_100G() bool {
	if x != nil {
		return x.F_100G
	}
	return false
}

// Possible capabilities for a fan module.
// currently maps to onlp_fan_info_t defined in fan.h
type FanCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetDir        bool `protobuf:"varint,1,opt,name=set_dir,json=setDir,proto3" json:"set_dir,omitempty"`
	GetDir        bool `protobuf:"varint,2,opt,name=get_dir,json=getDir,proto3" json:"get_dir,omitempty"`
	SetRpm        bool `protobuf:"varint,3,opt,name=set_rpm,json=setRpm,proto3" json:"set_rpm,omitempty"`
	SetPercentage bool `protobuf:"varint,4,opt,name=set_percentage,json=setPercentage,proto3" json:"set_percentage,omitempty"`
	GetRpm        bool `protobuf:"varint,5,opt,name=get_rpm,json=getRpm,proto3" json:"get_rpm,omitempty"`
	GetPercentage bool `protobuf:"varint,6,opt,name=get_percentage,json=getPercentage,proto3" json:"get_percentage,omitempty"`
}

func (x *FanCaps) Reset() {
	*x = FanCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanCaps) ProtoMessage() {}

func (x *FanCaps) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanCaps.ProtoReflect.Descriptor instead.
func (*FanCaps) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *FanCaps) GetSetDir() bool {
	if x != nil {
		return x.SetDir
	}
	return false
}

func (x *FanCaps) GetGetDir() bool {
	if x != nil {
		return x.GetDir
	}
	return false
}

func (x *FanCaps) GetSetRpm() bool {
	if x != nil {
		return x.SetRpm
	}
	return false
}

func (x *FanCaps) GetSetPercentage() bool {
	if x != nil {
		return x.SetPercentage
	}
	return false
}

func (x *FanCaps) GetGetRpm() bool {
	if x != nil {
		return x.GetRpm
	}
	return false
}

func (x *FanCaps) GetGetPercentage() bool {
	if x != nil {
		return x.GetPercentage
	}
	return false
}

// Possible Capabilities for a PSU.
// currently maps to onlp_psu_caps_t defined in psu.h
type PsuCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetType bool `protobuf:"varint,1,opt,name=get_type,json=getType,proto3" json:"get_type,omitempty"`
	GetVin  bool `protobuf:"varint,2,opt,name=get_vin,json=getVin,proto3" json:"get_vin,omitempty"`
	GetVout bool `protobuf:"varint,3,opt,name=get_vout,json=getVout,proto3" json:"get_vout,omitempty"`
	GetIin  bool `protobuf:"varint,4,opt,name=get_iin,json=getIin,proto3" json:"get_iin,omitempty"`
	GetIout bool `protobuf:"varint,5,opt,name=get_iout,json=getIout,proto3" json:"get_iout,omitempty"`
	GetPin  bool `protobuf:"varint,6,opt,name=get_pin,json=getPin,proto3" json:"get_pin,omitempty"`
	GetPout bool `protobuf:"varint,7,opt,name=get_pout,json=getPout,proto3" json:"get_pout,omitempty"`
}

func (x *PsuCaps) Reset() {
	*x = PsuCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PsuCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsuCaps) ProtoMessage() {}

func (x *PsuCaps) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsuCaps.ProtoReflect.Descriptor instead.
func (*PsuCaps) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *PsuCaps) GetGetType() bool {
	if x != nil {
		return x.GetType
	}
	return false
}

func (x *PsuCaps) GetGetVin() bool {
	if x != nil {
		return x.GetVin
	}
	return false
}

func (x *PsuCaps) GetGetVout() bool {
	if x != nil {
		return x.GetVout
	}
	return false
}

func (x *PsuCaps) GetGetIin() bool {
	if x != nil {
		return x.GetIin
	}
	return false
}

func (x *PsuCaps) GetGetIout() bool {
	if x != nil {
		return x.GetIout
	}
	return false
}

func (x *PsuCaps) GetGetPin() bool {
	if x != nil {
		return x.GetPin
	}
	return false
}

func (x *PsuCaps) GetGetPout() bool {
	if x != nil {
		return x.GetPout
	}
	return false
}

// Possible capabilities for a thermal sensor module.
// currently maps to onlp_thermal_info_t defined in thermal.h
type ThermalCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetTemperature       bool `protobuf:"varint,1,opt,name=get_temperature,json=getTemperature,proto3" json:"get_temperature,omitempty"`
	GetWarningThreshold  bool `protobuf:"varint,2,opt,name=get_warning_threshold,json=getWarningThreshold,proto3" json:"get_warning_threshold,omitempty"`
	GetErrorThreshold    bool `protobuf:"varint,3,opt,name=get_error_threshold,json=getErrorThreshold,proto3" json:"get_error_threshold,omitempty"`
	GetShutdownThreshold bool `protobuf:"varint,4,opt,name=get_shutdown_threshold,json=getShutdownThreshold,proto3" json:"get_shutdown_threshold,omitempty"`
}

func (x *ThermalCaps) Reset() {
	*x = ThermalCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermalCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalCaps) ProtoMessage() {}

func (x *ThermalCaps) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalCaps.ProtoReflect.Descriptor instead.
func (*ThermalCaps) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *ThermalCaps) GetGetTemperature() bool {
	if x != nil {
		return x.GetTemperature
	}
	return false
}

func (x *ThermalCaps) GetGetWarningThreshold() bool {
	if x != nil {
		return x.GetWarningThreshold
	}
	return false
}

func (x *ThermalCaps) GetGetErrorThreshold() bool {
	if x != nil {
		return x.GetErrorThreshold
	}
	return false
}

func (x *ThermalCaps) GetGetShutdownThreshold() bool {
	if x != nil {
		return x.GetShutdownThreshold
	}
	return false
}

// Possible capabilities for a LED module.
// currently maps to onlp_led_info_t defined in led.h
type LedCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Off            bool `protobuf:"varint,1,opt,name=off,proto3" json:"off,omitempty"`
	Auto           bool `protobuf:"varint,2,opt,name=auto,proto3" json:"auto,omitempty"`
	AutoBlinking   bool `protobuf:"varint,3,opt,name=auto_blinking,json=autoBlinking,proto3" json:"auto_blinking,omitempty"`
	Char           bool `protobuf:"varint,4,opt,name=char,proto3" json:"char,omitempty"`
	Red            bool `protobuf:"varint,5,opt,name=red,proto3" json:"red,omitempty"`
	RedBlinking    bool `protobuf:"varint,6,opt,name=red_blinking,json=redBlinking,proto3" json:"red_blinking,omitempty"`
	Orange         bool `protobuf:"varint,7,opt,name=orange,proto3" json:"orange,omitempty"`
	OrangeBlinking bool `protobuf:"varint,8,opt,name=orange_blinking,json=orangeBlinking,proto3" json:"orange_blinking,omitempty"`
	Yellow         bool `protobuf:"varint,9,opt,name=yellow,proto3" json:"yellow,omitempty"`
	YellowBlinking bool `protobuf:"varint,10,opt,name=yellow_blinking,json=yellowBlinking,proto3" json:"yellow_blinking,omitempty"`
	Green          bool `protobuf:"varint,11,opt,name=green,proto3" json:"green,omitempty"`
	GreenBlinking  bool `protobuf:"varint,12,opt,name=green_blinking,json=greenBlinking,proto3" json:"green_blinking,omitempty"`
	Blue           bool `protobuf:"varint,13,opt,name=blue,proto3" json:"blue,omitempty"`
	BlueBlinking   bool `protobuf:"varint,14,opt,name=blue_blinking,json=blueBlinking,proto3" json:"blue_blinking,omitempty"`
	Purple         bool `protobuf:"varint,15,opt,name=purple,proto3" json:"purple,omitempty"`
	PurpleBlinking bool `protobuf:"varint,16,opt,name=purple_blinking,json=purpleBlinking,proto3" json:"purple_blinking,omitempty"`
}

func (x *LedCaps) Reset() {
	*x = LedCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedCaps) ProtoMessage() {}

func (x *LedCaps) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedCaps.ProtoReflect.Descriptor instead.
func (*LedCaps) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *LedCaps) GetOff() bool {
	if x != nil {
		return x.Off
	}
	return false
}

func (x *LedCaps) GetAuto() bool {
	if x != nil {
		return x.Auto
	}
	return false
}

func (x *LedCaps) GetAutoBlinking() bool {
	if x != nil {
		return x.AutoBlinking
	}
	return false
}

func (x *LedCaps) GetChar() bool {
	if x != nil {
		return x.Char
	}
	return false
}

func (x *LedCaps) GetRed() bool {
	if x != nil {
		return x.Red
	}
	return false
}

func (x *LedCaps) GetRedBlinking() bool {
	if x != nil {
		return x.RedBlinking
	}
	return false
}

func (x *LedCaps) GetOrange() bool {
	if x != nil {
		return x.Orange
	}
	return false
}

func (x *LedCaps) GetOrangeBlinking() bool {
	if x != nil {
		return x.OrangeBlinking
	}
	return false
}

func (x *LedCaps) GetYellow() bool {
	if x != nil {
		return x.Yellow
	}
	return false
}

func (x *LedCaps) GetYellowBlinking() bool {
	if x != nil {
		return x.YellowBlinking
	}
	return false
}

func (x *LedCaps) GetGreen() bool {
	if x != nil {
		return x.Green
	}
	return false
}

func (x *LedCaps) GetGreenBlinking() bool {
	if x != nil {
		return x.GreenBlinking
	}
	return false
}

func (x *LedCaps) GetBlue() bool {
	if x != nil {
		return x.Blue
	}
	return false
}

func (x *LedCaps) GetBlueBlinking() bool {
	if x != nil {
		return x.BlueBlinking
	}
	return false
}

func (x *LedCaps) GetPurple() bool {
	if x != nil {
		return x.Purple
	}
	return false
}

func (x *LedCaps) GetPurpleBlinking() bool {
	if x != nil {
		return x.PurpleBlinking
	}
	return false
}

// Frontpanel port info. Refers to properties of the module (e.g. QSFP module)
// used for a frontpanel port.
type FrontPanelPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalPortType PhysicalPortType `protobuf:"varint,1,opt,name=physical_port_type,json=physicalPortType,proto3,enum=stratum.hal.PhysicalPortType" json:"physical_port_type,omitempty"`
	MediaType        MediaType        `protobuf:"varint,2,opt,name=media_type,json=mediaType,proto3,enum=stratum.hal.MediaType" json:"media_type,omitempty"`
	VendorName       string           `protobuf:"bytes,3,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	PartNumber       string           `protobuf:"bytes,4,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	SerialNumber     string           `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HwState          HwState          `protobuf:"varint,6,opt,name=hw_state,json=hwState,proto3,enum=stratum.hal.HwState" json:"hw_state,omitempty"`
}

func (x *FrontPanelPortInfo) Reset() {
	*x = FrontPanelPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrontPanelPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontPanelPortInfo) ProtoMessage() {}

func (x *FrontPanelPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontPanelPortInfo.ProtoReflect.Descriptor instead.
func (*FrontPanelPortInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *FrontPanelPortInfo) GetPhysicalPortType() PhysicalPortType {
	if x != nil {
		return x.PhysicalPortType
	}
	return PhysicalPortType_PHYSICAL_PORT_TYPE_UNKNOWN
}

func (x *FrontPanelPortInfo) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNKNOWN
}

func (x *FrontPanelPortInfo) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *FrontPanelPortInfo) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *FrontPanelPortInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *FrontPanelPortInfo) GetHwState() HwState {
	if x != nil {
		return x.HwState
	}
	return HwState_HW_STATE_UNKNOWN
}

// Optical channel state and configuration.
type OpticalTransceiverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optical channel frequency in Hz.
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// The input/output optical power of this port in units of 0.01 decibel-milliwatt.
	// If the port is an aggregate of multiple physical channels, this attribute
	// is the total power or sum of all channels.
	InputPower  *OpticalTransceiverInfo_Power `protobuf:"bytes,2,opt,name=input_power,json=inputPower,proto3" json:"input_power,omitempty"`
	OutputPower *OpticalTransceiverInfo_Power `protobuf:"bytes,3,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`
	// Target output optical power level of the optical channel, expressed in
	// increments of 0.01 decibel-milliwats.
	TargetOutputPower float64 `protobuf:"fixed64,4,opt,name=target_output_power,json=targetOutputPower,proto3" json:"target_output_power,omitempty"`
	// Vendor-specific optical channel operational mode.
	OperationalMode uint64 `protobuf:"varint,5,opt,name=operational_mode,json=operationalMode,proto3" json:"operational_mode,omitempty"`
}

func (x *OpticalTransceiverInfo) Reset() {
	*x = OpticalTransceiverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalTransceiverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalTransceiverInfo) ProtoMessage() {}

func (x *OpticalTransceiverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalTransceiverInfo.ProtoReflect.Descriptor instead.
func (*OpticalTransceiverInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *OpticalTransceiverInfo) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *OpticalTransceiverInfo) GetInputPower() *OpticalTransceiverInfo_Power {
	if x != nil {
		return x.InputPower
	}
	return nil
}

func (x *OpticalTransceiverInfo) GetOutputPower() *OpticalTransceiverInfo_Power {
	if x != nil {
		return x.OutputPower
	}
	return nil
}

func (x *OpticalTransceiverInfo) GetTargetOutputPower() float64 {
	if x != nil {
		return x.TargetOutputPower
	}
	return 0
}

func (x *OpticalTransceiverInfo) GetOperationalMode() uint64 {
	if x != nil {
		return x.OperationalMode
	}
	return 0
}

// Wrapper around oper state of a port.
type OperStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State PortState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.PortState" json:"state,omitempty"` // required
}

func (x *OperStatus) Reset() {
	*x = OperStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperStatus) ProtoMessage() {}

func (x *OperStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperStatus.ProtoReflect.Descriptor instead.
func (*OperStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *OperStatus) GetState() PortState {
	if x != nil {
		return x.State
	}
	return PortState_PORT_STATE_UNKNOWN
}

// Wrapper around loopback state of a port.
type LoopbackStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State LoopbackState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.LoopbackState" json:"state,omitempty"` // required
}

func (x *LoopbackStatus) Reset() {
	*x = LoopbackStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoopbackStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoopbackStatus) ProtoMessage() {}

func (x *LoopbackStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoopbackStatus.ProtoReflect.Descriptor instead.
func (*LoopbackStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *LoopbackStatus) GetState() LoopbackState {
	if x != nil {
		return x.State
	}
	return LoopbackState_LOOPBACK_STATE_UNKNOWN
}

// Wrapper around admin state of a HW component.
type AdminStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State AdminState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.AdminState" json:"state,omitempty"` // required
}

func (x *AdminStatus) Reset() {
	*x = AdminStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminStatus) ProtoMessage() {}

func (x *AdminStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminStatus.ProtoReflect.Descriptor instead.
func (*AdminStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *AdminStatus) GetState() AdminState {
	if x != nil {
		return x.State
	}
	return AdminState_ADMIN_STATE_UNKNOWN
}

// Wrapper around mac address (for example LACP router MAC).
type MacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A mac address stored on 6 least-siginificant bytes.
	MacAddress uint64 `protobuf:"varint,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"` // required
}

func (x *MacAddress) Reset() {
	*x = MacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddress) ProtoMessage() {}

func (x *MacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddress.ProtoReflect.Descriptor instead.
func (*MacAddress) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *MacAddress) GetMacAddress() uint64 {
	if x != nil {
		return x.MacAddress
	}
	return 0
}

// Wrapper around port speed of the port.
type PortSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeedBps uint64 `protobuf:"varint,1,opt,name=speed_bps,json=speedBps,proto3" json:"speed_bps,omitempty"` // required
}

func (x *PortSpeed) Reset() {
	*x = PortSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpeed) ProtoMessage() {}

func (x *PortSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpeed.ProtoReflect.Descriptor instead.
func (*PortSpeed) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *PortSpeed) GetSpeedBps() uint64 {
	if x != nil {
		return x.SpeedBps
	}
	return 0
}

// Wrapper around LACP system priority.
type SystemPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"` // required
}

func (x *SystemPriority) Reset() {
	*x = SystemPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPriority) ProtoMessage() {}

func (x *SystemPriority) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPriority.ProtoReflect.Descriptor instead.
func (*SystemPriority) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *SystemPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Wrapper around all the per port counters.
type PortCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InOctets         uint64 `protobuf:"varint,1,opt,name=in_octets,json=inOctets,proto3" json:"in_octets,omitempty"`
	InUnicastPkts    uint64 `protobuf:"varint,2,opt,name=in_unicast_pkts,json=inUnicastPkts,proto3" json:"in_unicast_pkts,omitempty"`
	InBroadcastPkts  uint64 `protobuf:"varint,3,opt,name=in_broadcast_pkts,json=inBroadcastPkts,proto3" json:"in_broadcast_pkts,omitempty"`
	InMulticastPkts  uint64 `protobuf:"varint,4,opt,name=in_multicast_pkts,json=inMulticastPkts,proto3" json:"in_multicast_pkts,omitempty"`
	InDiscards       uint64 `protobuf:"varint,5,opt,name=in_discards,json=inDiscards,proto3" json:"in_discards,omitempty"`
	InErrors         uint64 `protobuf:"varint,6,opt,name=in_errors,json=inErrors,proto3" json:"in_errors,omitempty"`
	InUnknownProtos  uint64 `protobuf:"varint,7,opt,name=in_unknown_protos,json=inUnknownProtos,proto3" json:"in_unknown_protos,omitempty"`
	OutOctets        uint64 `protobuf:"varint,8,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutUnicastPkts   uint64 `protobuf:"varint,9,opt,name=out_unicast_pkts,json=outUnicastPkts,proto3" json:"out_unicast_pkts,omitempty"`
	OutBroadcastPkts uint64 `protobuf:"varint,10,opt,name=out_broadcast_pkts,json=outBroadcastPkts,proto3" json:"out_broadcast_pkts,omitempty"`
	OutMulticastPkts uint64 `protobuf:"varint,11,opt,name=out_multicast_pkts,json=outMulticastPkts,proto3" json:"out_multicast_pkts,omitempty"`
	OutDiscards      uint64 `protobuf:"varint,12,opt,name=out_discards,json=outDiscards,proto3" json:"out_discards,omitempty"`
	OutErrors        uint64 `protobuf:"varint,13,opt,name=out_errors,json=outErrors,proto3" json:"out_errors,omitempty"`
	InFcsErrors      uint64 `protobuf:"varint,14,opt,name=in_fcs_errors,json=inFcsErrors,proto3" json:"in_fcs_errors,omitempty"`
}

func (x *PortCounters) Reset() {
	*x = PortCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortCounters) ProtoMessage() {}

func (x *PortCounters) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortCounters.ProtoReflect.Descriptor instead.
func (*PortCounters) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *PortCounters) GetInOctets() uint64 {
	if x != nil {
		return x.InOctets
	}
	return 0
}

func (x *PortCounters) GetInUnicastPkts() uint64 {
	if x != nil {
		return x.InUnicastPkts
	}
	return 0
}

func (x *PortCounters) GetInBroadcastPkts() uint64 {
	if x != nil {
		return x.InBroadcastPkts
	}
	return 0
}

func (x *PortCounters) GetInMulticastPkts() uint64 {
	if x != nil {
		return x.InMulticastPkts
	}
	return 0
}

func (x *PortCounters) GetInDiscards() uint64 {
	if x != nil {
		return x.InDiscards
	}
	return 0
}

func (x *PortCounters) GetInErrors() uint64 {
	if x != nil {
		return x.InErrors
	}
	return 0
}

func (x *PortCounters) GetInUnknownProtos() uint64 {
	if x != nil {
		return x.InUnknownProtos
	}
	return 0
}

func (x *PortCounters) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *PortCounters) GetOutUnicastPkts() uint64 {
	if x != nil {
		return x.OutUnicastPkts
	}
	return 0
}

func (x *PortCounters) GetOutBroadcastPkts() uint64 {
	if x != nil {
		return x.OutBroadcastPkts
	}
	return 0
}

func (x *PortCounters) GetOutMulticastPkts() uint64 {
	if x != nil {
		return x.OutMulticastPkts
	}
	return 0
}

func (x *PortCounters) GetOutDiscards() uint64 {
	if x != nil {
		return x.OutDiscards
	}
	return 0
}

func (x *PortCounters) GetOutErrors() uint64 {
	if x != nil {
		return x.OutErrors
	}
	return 0
}

func (x *PortCounters) GetInFcsErrors() uint64 {
	if x != nil {
		return x.InFcsErrors
	}
	return 0
}

// Wrapper around per port per queue counters.
type PortQosCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId        uint32 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	OutOctets      uint64 `protobuf:"varint,2,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutPkts        uint64 `protobuf:"varint,3,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	OutDroppedPkts uint64 `protobuf:"varint,4,opt,name=out_dropped_pkts,json=outDroppedPkts,proto3" json:"out_dropped_pkts,omitempty"`
}

func (x *PortQosCounters) Reset() {
	*x = PortQosCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortQosCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortQosCounters) ProtoMessage() {}

func (x *PortQosCounters) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortQosCounters.ProtoReflect.Descriptor instead.
func (*PortQosCounters) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *PortQosCounters) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *PortQosCounters) GetOutOctets() uint64 {
	if x != nil {
		return x.OutOctets
	}
	return 0
}

func (x *PortQosCounters) GetOutPkts() uint64 {
	if x != nil {
		return x.OutPkts
	}
	return 0
}

func (x *PortQosCounters) GetOutDroppedPkts() uint64 {
	if x != nil {
		return x.OutDroppedPkts
	}
	return 0
}

// Wrapper around all the alarm related data.
type Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCreated uint64         `protobuf:"varint,1,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`        // required
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                            // optional
	Severity    Alarm_Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=stratum.hal.Alarm_Severity" json:"severity,omitempty"` // required
	Status      bool           `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                     // required.
}

func (x *Alarm) Reset() {
	*x = Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarm) ProtoMessage() {}

func (x *Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarm.ProtoReflect.Descriptor instead.
func (*Alarm) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *Alarm) GetTimeCreated() uint64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Alarm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Alarm) GetSeverity() Alarm_Severity {
	if x != nil {
		return x.Severity
	}
	return Alarm_UNKNOWN
}

func (x *Alarm) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// Wrapper around the optional node info.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName string `protobuf:"bytes,1,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	ChipName   string `protobuf:"bytes,2,opt,name=chip_name,json=chipName,proto3" json:"chip_name,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *NodeInfo) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *NodeInfo) GetChipName() string {
	if x != nil {
		return x.ChipName
	}
	return ""
}

// Wrapper around an optional debug info for a node/chip.
type NodeDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugString string `protobuf:"bytes,1,opt,name=debug_string,json=debugString,proto3" json:"debug_string,omitempty"`
}

func (x *NodeDebugInfo) Reset() {
	*x = NodeDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDebugInfo) ProtoMessage() {}

func (x *NodeDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDebugInfo.ProtoReflect.Descriptor instead.
func (*NodeDebugInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *NodeDebugInfo) GetDebugString() string {
	if x != nil {
		return x.DebugString
	}
	return ""
}

// Wrapper around the forwarding viability of a trunk member. It is used for
// trunk pruning.
type ForwardingViability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State TrunkMemberBlockState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.TrunkMemberBlockState" json:"state,omitempty"`
}

func (x *ForwardingViability) Reset() {
	*x = ForwardingViability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingViability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingViability) ProtoMessage() {}

func (x *ForwardingViability) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingViability.ProtoReflect.Descriptor instead.
func (*ForwardingViability) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *ForwardingViability) GetState() TrunkMemberBlockState {
	if x != nil {
		return x.State
	}
	return TrunkMemberBlockState_TRUNK_MEMBER_BLOCK_STATE_UNKNOWN
}

// Wrapper around the health indicator (usally translated to LED state) of a
// port.
type HealthIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State HealthState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.HealthState" json:"state,omitempty"`
}

func (x *HealthIndicator) Reset() {
	*x = HealthIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthIndicator) ProtoMessage() {}

func (x *HealthIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthIndicator.ProtoReflect.Descriptor instead.
func (*HealthIndicator) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *HealthIndicator) GetState() HealthState {
	if x != nil {
		return x.State
	}
	return HealthState_HEALTH_STATE_UNKNOWN
}

// Wrapper around the autoneg status of a port.
type AutonegotiationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State TriState `protobuf:"varint,1,opt,name=state,proto3,enum=stratum.hal.TriState" json:"state,omitempty"`
}

func (x *AutonegotiationStatus) Reset() {
	*x = AutonegotiationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutonegotiationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutonegotiationStatus) ProtoMessage() {}

func (x *AutonegotiationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutonegotiationStatus.ProtoReflect.Descriptor instead.
func (*AutonegotiationStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *AutonegotiationStatus) GetState() TriState {
	if x != nil {
		return x.State
	}
	return TriState_TRI_STATE_UNKNOWN
}

// Wrapper around the hardware port.
type HardwarePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HardwarePort) Reset() {
	*x = HardwarePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwarePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwarePort) ProtoMessage() {}

func (x *HardwarePort) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwarePort.ProtoReflect.Descriptor instead.
func (*HardwarePort) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *HardwarePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Wrapper around the FEC mode.
type FecStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode FecMode `protobuf:"varint,1,opt,name=mode,proto3,enum=stratum.hal.FecMode" json:"mode,omitempty"`
}

func (x *FecStatus) Reset() {
	*x = FecStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FecStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FecStatus) ProtoMessage() {}

func (x *FecStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FecStatus.ProtoReflect.Descriptor instead.
func (*FecStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *FecStatus) GetMode() FecMode {
	if x != nil {
		return x.Mode
	}
	return FecMode_FEC_MODE_UNKNOWN
}

// Wrapper around the SDN port ID.
// The target is expected to accept requests from the controller
// using the ID assigned by the SDN management system. If the target
// cannot accept requests using the provided ID, it can provide
// an alterate ID that should be used by the controller to address
// the interface.
type SdnPortId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *SdnPortId) Reset() {
	*x = SdnPortId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdnPortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdnPortId) ProtoMessage() {}

func (x *SdnPortId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdnPortId.ProtoReflect.Descriptor instead.
func (*SdnPortId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *SdnPortId) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// DataRequest is a message used internally to request data about a component
// or a set of components through SwitchInterface. It is specifically used in
// ConfigMonitoringService, as part of gNMI Get/Subscribe RPC implementation.
type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*DataRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *DataRequest) GetRequests() []*DataRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// DataResponse is a message used internally to return data about a component
// or a set of components, requested by DataRequest through SwitchInterface, to
// It is specifically used in ConfigMonitoringService. It is used in the gNMI
// Get/Subscribe RPC implementation.
type DataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*DataResponse_OperStatus
	//	*DataResponse_AdminStatus
	//	*DataResponse_MacAddress
	//	*DataResponse_PortSpeed
	//	*DataResponse_NegotiatedPortSpeed
	//	*DataResponse_LacpRouterMac
	//	*DataResponse_LacpSystemPriority
	//	*DataResponse_PortCounters
	//	*DataResponse_MemoryErrorAlarm
	//	*DataResponse_FlowProgrammingExceptionAlarm
	//	*DataResponse_PortQosCounters
	//	*DataResponse_NodePacketioDebugInfo
	//	*DataResponse_ForwardingViability
	//	*DataResponse_HealthIndicator
	//	*DataResponse_AutonegStatus
	//	*DataResponse_FrontPanelPortInfo
	//	*DataResponse_HardwarePort
	//	*DataResponse_FecStatus
	//	*DataResponse_OpticalTransceiverInfo
	//	*DataResponse_LoopbackStatus
	//	*DataResponse_NodeInfo
	//	*DataResponse_SdnPortId
	Response isDataResponse_Response `protobuf_oneof:"response"`
}

func (x *DataResponse) Reset() {
	*x = DataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResponse) ProtoMessage() {}

func (x *DataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResponse.ProtoReflect.Descriptor instead.
func (*DataResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (m *DataResponse) GetResponse() isDataResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DataResponse) GetOperStatus() *OperStatus {
	if x, ok := x.GetResponse().(*DataResponse_OperStatus); ok {
		return x.OperStatus
	}
	return nil
}

func (x *DataResponse) GetAdminStatus() *AdminStatus {
	if x, ok := x.GetResponse().(*DataResponse_AdminStatus); ok {
		return x.AdminStatus
	}
	return nil
}

func (x *DataResponse) GetMacAddress() *MacAddress {
	if x, ok := x.GetResponse().(*DataResponse_MacAddress); ok {
		return x.MacAddress
	}
	return nil
}

func (x *DataResponse) GetPortSpeed() *PortSpeed {
	if x, ok := x.GetResponse().(*DataResponse_PortSpeed); ok {
		return x.PortSpeed
	}
	return nil
}

func (x *DataResponse) GetNegotiatedPortSpeed() *PortSpeed {
	if x, ok := x.GetResponse().(*DataResponse_NegotiatedPortSpeed); ok {
		return x.NegotiatedPortSpeed
	}
	return nil
}

func (x *DataResponse) GetLacpRouterMac() *MacAddress {
	if x, ok := x.GetResponse().(*DataResponse_LacpRouterMac); ok {
		return x.LacpRouterMac
	}
	return nil
}

func (x *DataResponse) GetLacpSystemPriority() *SystemPriority {
	if x, ok := x.GetResponse().(*DataResponse_LacpSystemPriority); ok {
		return x.LacpSystemPriority
	}
	return nil
}

func (x *DataResponse) GetPortCounters() *PortCounters {
	if x, ok := x.GetResponse().(*DataResponse_PortCounters); ok {
		return x.PortCounters
	}
	return nil
}

func (x *DataResponse) GetMemoryErrorAlarm() *Alarm {
	if x, ok := x.GetResponse().(*DataResponse_MemoryErrorAlarm); ok {
		return x.MemoryErrorAlarm
	}
	return nil
}

func (x *DataResponse) GetFlowProgrammingExceptionAlarm() *Alarm {
	if x, ok := x.GetResponse().(*DataResponse_FlowProgrammingExceptionAlarm); ok {
		return x.FlowProgrammingExceptionAlarm
	}
	return nil
}

func (x *DataResponse) GetPortQosCounters() *PortQosCounters {
	if x, ok := x.GetResponse().(*DataResponse_PortQosCounters); ok {
		return x.PortQosCounters
	}
	return nil
}

func (x *DataResponse) GetNodePacketioDebugInfo() *NodeDebugInfo {
	if x, ok := x.GetResponse().(*DataResponse_NodePacketioDebugInfo); ok {
		return x.NodePacketioDebugInfo
	}
	return nil
}

func (x *DataResponse) GetForwardingViability() *ForwardingViability {
	if x, ok := x.GetResponse().(*DataResponse_ForwardingViability); ok {
		return x.ForwardingViability
	}
	return nil
}

func (x *DataResponse) GetHealthIndicator() *HealthIndicator {
	if x, ok := x.GetResponse().(*DataResponse_HealthIndicator); ok {
		return x.HealthIndicator
	}
	return nil
}

func (x *DataResponse) GetAutonegStatus() *AutonegotiationStatus {
	if x, ok := x.GetResponse().(*DataResponse_AutonegStatus); ok {
		return x.AutonegStatus
	}
	return nil
}

func (x *DataResponse) GetFrontPanelPortInfo() *FrontPanelPortInfo {
	if x, ok := x.GetResponse().(*DataResponse_FrontPanelPortInfo); ok {
		return x.FrontPanelPortInfo
	}
	return nil
}

func (x *DataResponse) GetHardwarePort() *HardwarePort {
	if x, ok := x.GetResponse().(*DataResponse_HardwarePort); ok {
		return x.HardwarePort
	}
	return nil
}

func (x *DataResponse) GetFecStatus() *FecStatus {
	if x, ok := x.GetResponse().(*DataResponse_FecStatus); ok {
		return x.FecStatus
	}
	return nil
}

func (x *DataResponse) GetOpticalTransceiverInfo() *OpticalTransceiverInfo {
	if x, ok := x.GetResponse().(*DataResponse_OpticalTransceiverInfo); ok {
		return x.OpticalTransceiverInfo
	}
	return nil
}

func (x *DataResponse) GetLoopbackStatus() *LoopbackStatus {
	if x, ok := x.GetResponse().(*DataResponse_LoopbackStatus); ok {
		return x.LoopbackStatus
	}
	return nil
}

func (x *DataResponse) GetNodeInfo() *NodeInfo {
	if x, ok := x.GetResponse().(*DataResponse_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (x *DataResponse) GetSdnPortId() *SdnPortId {
	if x, ok := x.GetResponse().(*DataResponse_SdnPortId); ok {
		return x.SdnPortId
	}
	return nil
}

type isDataResponse_Response interface {
	isDataResponse_Response()
}

type DataResponse_OperStatus struct {
	OperStatus *OperStatus `protobuf:"bytes,1,opt,name=oper_status,json=operStatus,proto3,oneof"`
}

type DataResponse_AdminStatus struct {
	AdminStatus *AdminStatus `protobuf:"bytes,2,opt,name=admin_status,json=adminStatus,proto3,oneof"`
}

type DataResponse_MacAddress struct {
	MacAddress *MacAddress `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3,oneof"`
}

type DataResponse_PortSpeed struct {
	PortSpeed *PortSpeed `protobuf:"bytes,4,opt,name=port_speed,json=portSpeed,proto3,oneof"`
}

type DataResponse_NegotiatedPortSpeed struct {
	NegotiatedPortSpeed *PortSpeed `protobuf:"bytes,5,opt,name=negotiated_port_speed,json=negotiatedPortSpeed,proto3,oneof"`
}

type DataResponse_LacpRouterMac struct {
	LacpRouterMac *MacAddress `protobuf:"bytes,6,opt,name=lacp_router_mac,json=lacpRouterMac,proto3,oneof"`
}

type DataResponse_LacpSystemPriority struct {
	LacpSystemPriority *SystemPriority `protobuf:"bytes,7,opt,name=lacp_system_priority,json=lacpSystemPriority,proto3,oneof"`
}

type DataResponse_PortCounters struct {
	PortCounters *PortCounters `protobuf:"bytes,8,opt,name=port_counters,json=portCounters,proto3,oneof"`
}

type DataResponse_MemoryErrorAlarm struct {
	MemoryErrorAlarm *Alarm `protobuf:"bytes,9,opt,name=memory_error_alarm,json=memoryErrorAlarm,proto3,oneof"`
}

type DataResponse_FlowProgrammingExceptionAlarm struct {
	FlowProgrammingExceptionAlarm *Alarm `protobuf:"bytes,10,opt,name=flow_programming_exception_alarm,json=flowProgrammingExceptionAlarm,proto3,oneof"`
}

type DataResponse_PortQosCounters struct {
	PortQosCounters *PortQosCounters `protobuf:"bytes,11,opt,name=port_qos_counters,json=portQosCounters,proto3,oneof"`
}

type DataResponse_NodePacketioDebugInfo struct {
	NodePacketioDebugInfo *NodeDebugInfo `protobuf:"bytes,12,opt,name=node_packetio_debug_info,json=nodePacketioDebugInfo,proto3,oneof"`
}

type DataResponse_ForwardingViability struct {
	ForwardingViability *ForwardingViability `protobuf:"bytes,13,opt,name=forwarding_viability,json=forwardingViability,proto3,oneof"`
}

type DataResponse_HealthIndicator struct {
	HealthIndicator *HealthIndicator `protobuf:"bytes,14,opt,name=health_indicator,json=healthIndicator,proto3,oneof"`
}

type DataResponse_AutonegStatus struct {
	AutonegStatus *AutonegotiationStatus `protobuf:"bytes,15,opt,name=autoneg_status,json=autonegStatus,proto3,oneof"`
}

type DataResponse_FrontPanelPortInfo struct {
	FrontPanelPortInfo *FrontPanelPortInfo `protobuf:"bytes,16,opt,name=front_panel_port_info,json=frontPanelPortInfo,proto3,oneof"`
}

type DataResponse_HardwarePort struct {
	HardwarePort *HardwarePort `protobuf:"bytes,17,opt,name=hardware_port,json=hardwarePort,proto3,oneof"`
}

type DataResponse_FecStatus struct {
	FecStatus *FecStatus `protobuf:"bytes,18,opt,name=fec_status,json=fecStatus,proto3,oneof"`
}

type DataResponse_OpticalTransceiverInfo struct {
	OpticalTransceiverInfo *OpticalTransceiverInfo `protobuf:"bytes,19,opt,name=optical_transceiver_info,json=opticalTransceiverInfo,proto3,oneof"`
}

type DataResponse_LoopbackStatus struct {
	LoopbackStatus *LoopbackStatus `protobuf:"bytes,20,opt,name=loopback_status,json=loopbackStatus,proto3,oneof"`
}

type DataResponse_NodeInfo struct {
	NodeInfo *NodeInfo `protobuf:"bytes,21,opt,name=node_info,json=nodeInfo,proto3,oneof"`
}

type DataResponse_SdnPortId struct {
	SdnPortId *SdnPortId `protobuf:"bytes,22,opt,name=sdn_port_id,json=sdnPortId,proto3,oneof"`
}

func (*DataResponse_OperStatus) isDataResponse_Response() {}

func (*DataResponse_AdminStatus) isDataResponse_Response() {}

func (*DataResponse_MacAddress) isDataResponse_Response() {}

func (*DataResponse_PortSpeed) isDataResponse_Response() {}

func (*DataResponse_NegotiatedPortSpeed) isDataResponse_Response() {}

func (*DataResponse_LacpRouterMac) isDataResponse_Response() {}

func (*DataResponse_LacpSystemPriority) isDataResponse_Response() {}

func (*DataResponse_PortCounters) isDataResponse_Response() {}

func (*DataResponse_MemoryErrorAlarm) isDataResponse_Response() {}

func (*DataResponse_FlowProgrammingExceptionAlarm) isDataResponse_Response() {}

func (*DataResponse_PortQosCounters) isDataResponse_Response() {}

func (*DataResponse_NodePacketioDebugInfo) isDataResponse_Response() {}

func (*DataResponse_ForwardingViability) isDataResponse_Response() {}

func (*DataResponse_HealthIndicator) isDataResponse_Response() {}

func (*DataResponse_AutonegStatus) isDataResponse_Response() {}

func (*DataResponse_FrontPanelPortInfo) isDataResponse_Response() {}

func (*DataResponse_HardwarePort) isDataResponse_Response() {}

func (*DataResponse_FecStatus) isDataResponse_Response() {}

func (*DataResponse_OpticalTransceiverInfo) isDataResponse_Response() {}

func (*DataResponse_LoopbackStatus) isDataResponse_Response() {}

func (*DataResponse_NodeInfo) isDataResponse_Response() {}

func (*DataResponse_SdnPortId) isDataResponse_Response() {}

// A message requesting changing configuration parameters inside the HAL.
type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SetRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *SetRequest) GetRequests() []*SetRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ChassisConfigParams_LacpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router MAC portion of LACP system ID. A mac address stored on 6
	// least-siginificant bytes.
	LacpRouterMac uint64 `protobuf:"varint,1,opt,name=lacp_router_mac,json=lacpRouterMac,proto3" json:"lacp_router_mac,omitempty"`
	// System priority portion of LACP system ID.
	LacpSystemPriority uint32 `protobuf:"varint,2,opt,name=lacp_system_priority,json=lacpSystemPriority,proto3" json:"lacp_system_priority,omitempty"`
}

func (x *ChassisConfigParams_LacpConfig) Reset() {
	*x = ChassisConfigParams_LacpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams_LacpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams_LacpConfig) ProtoMessage() {}

func (x *ChassisConfigParams_LacpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams_LacpConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams_LacpConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ChassisConfigParams_LacpConfig) GetLacpRouterMac() uint64 {
	if x != nil {
		return x.LacpRouterMac
	}
	return 0
}

func (x *ChassisConfigParams_LacpConfig) GetLacpSystemPriority() uint32 {
	if x != nil {
		return x.LacpSystemPriority
	}
	return 0
}

type ChassisConfigParams_NtpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChassisConfigParams_NtpConfig) Reset() {
	*x = ChassisConfigParams_NtpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams_NtpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams_NtpConfig) ProtoMessage() {}

func (x *ChassisConfigParams_NtpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams_NtpConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams_NtpConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 1}
}

type ChassisConfigParams_PowerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChassisConfigParams_PowerConfig) Reset() {
	*x = ChassisConfigParams_PowerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams_PowerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams_PowerConfig) ProtoMessage() {}

func (x *ChassisConfigParams_PowerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams_PowerConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams_PowerConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 2}
}

type ChassisConfigParams_FanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the fan within the chassis. Association of an ID to a
	// fan is done internally and can be queried by an external tool.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Speed in percentage (0 means off and 100 means max speed). Used only
	// manual speed change is available. If so and this value is set to zero,
	// the fan will be off, unless the fan has a closed loop temperature
	// controller and a non zero target_temp_celsius is given. If manual speed
	// set is not available, giving a fan config for the fan will result in an
	// error.
	SpeedPercentage uint32 `protobuf:"varint,2,opt,name=speed_percentage,json=speedPercentage,proto3" json:"speed_percentage,omitempty"`
	// Target temperature for the sensor used for fan speed control. Used only
	// when a closed loop temperature controller is available and the value is
	// non-zero. Otherwise, it is ignored.
	TargetTemperatureCelsius uint32 `protobuf:"varint,3,opt,name=target_temperature_celsius,json=targetTemperatureCelsius,proto3" json:"target_temperature_celsius,omitempty"`
}

func (x *ChassisConfigParams_FanConfig) Reset() {
	*x = ChassisConfigParams_FanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams_FanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams_FanConfig) ProtoMessage() {}

func (x *ChassisConfigParams_FanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams_FanConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams_FanConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ChassisConfigParams_FanConfig) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChassisConfigParams_FanConfig) GetSpeedPercentage() uint32 {
	if x != nil {
		return x.SpeedPercentage
	}
	return 0
}

func (x *ChassisConfigParams_FanConfig) GetTargetTemperatureCelsius() uint32 {
	if x != nil {
		return x.TargetTemperatureCelsius
	}
	return 0
}

type ChassisConfigParams_TuntapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the tuntap device (e.g. tap0).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Dataplane mode (typically set to LOAD_BALANCE).
	Mode ChassisConfigParams_TuntapConfig_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=stratum.hal.ChassisConfigParams_TuntapConfig_Mode" json:"mode,omitempty"`
	// v4 and v6 IP addresses and prefixelens.
	Ipv4Address   string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4Prefixlen uint32 `protobuf:"varint,4,opt,name=ipv4_prefixlen,json=ipv4Prefixlen,proto3" json:"ipv4_prefixlen,omitempty"`
	Ipv6Address   string `protobuf:"bytes,5,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6Prefixlen uint32 `protobuf:"varint,6,opt,name=ipv6_prefixlen,json=ipv6Prefixlen,proto3" json:"ipv6_prefixlen,omitempty"`
	// Is this netdev used for default route in Linux.
	DefaultNetdev bool `protobuf:"varint,7,opt,name=default_netdev,json=defaultNetdev,proto3" json:"default_netdev,omitempty"`
}

func (x *ChassisConfigParams_TuntapConfig) Reset() {
	*x = ChassisConfigParams_TuntapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisConfigParams_TuntapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisConfigParams_TuntapConfig) ProtoMessage() {}

func (x *ChassisConfigParams_TuntapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisConfigParams_TuntapConfig.ProtoReflect.Descriptor instead.
func (*ChassisConfigParams_TuntapConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ChassisConfigParams_TuntapConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChassisConfigParams_TuntapConfig) GetMode() ChassisConfigParams_TuntapConfig_Mode {
	if x != nil {
		return x.Mode
	}
	return ChassisConfigParams_TuntapConfig_UNKNOWN
}

func (x *ChassisConfigParams_TuntapConfig) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *ChassisConfigParams_TuntapConfig) GetIpv4Prefixlen() uint32 {
	if x != nil {
		return x.Ipv4Prefixlen
	}
	return 0
}

func (x *ChassisConfigParams_TuntapConfig) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *ChassisConfigParams_TuntapConfig) GetIpv6Prefixlen() uint32 {
	if x != nil {
		return x.Ipv6Prefixlen
	}
	return 0
}

func (x *ChassisConfigParams_TuntapConfig) GetDefaultNetdev() bool {
	if x != nil {
		return x.DefaultNetdev
	}
	return false
}

// Per-VLAN configuration.
type NodeConfigParams_VlanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN id.
	VlanId int32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// Block broadcast packets for this VLAN?
	BlockBroadcast bool `protobuf:"varint,2,opt,name=block_broadcast,json=blockBroadcast,proto3" json:"block_broadcast,omitempty"`
	// Block known multicast packets for this VLAN?
	BlockKnownMulticast bool `protobuf:"varint,3,opt,name=block_known_multicast,json=blockKnownMulticast,proto3" json:"block_known_multicast,omitempty"`
	// Block unknown multicast packets for this VLAN?
	BlockUnknownMulticast bool `protobuf:"varint,4,opt,name=block_unknown_multicast,json=blockUnknownMulticast,proto3" json:"block_unknown_multicast,omitempty"`
	// Block unknown multicast packets for this VLAN?
	BlockUnknownUnicast bool `protobuf:"varint,5,opt,name=block_unknown_unicast,json=blockUnknownUnicast,proto3" json:"block_unknown_unicast,omitempty"`
	// L2 learning needs to be disabled for this VLAN?
	DisableL2Learning bool `protobuf:"varint,6,opt,name=disable_l2_learning,json=disableL2Learning,proto3" json:"disable_l2_learning,omitempty"`
}

func (x *NodeConfigParams_VlanConfig) Reset() {
	*x = NodeConfigParams_VlanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_VlanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_VlanConfig) ProtoMessage() {}

func (x *NodeConfigParams_VlanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_VlanConfig.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_VlanConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *NodeConfigParams_VlanConfig) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *NodeConfigParams_VlanConfig) GetBlockBroadcast() bool {
	if x != nil {
		return x.BlockBroadcast
	}
	return false
}

func (x *NodeConfigParams_VlanConfig) GetBlockKnownMulticast() bool {
	if x != nil {
		return x.BlockKnownMulticast
	}
	return false
}

func (x *NodeConfigParams_VlanConfig) GetBlockUnknownMulticast() bool {
	if x != nil {
		return x.BlockUnknownMulticast
	}
	return false
}

func (x *NodeConfigParams_VlanConfig) GetBlockUnknownUnicast() bool {
	if x != nil {
		return x.BlockUnknownUnicast
	}
	return false
}

func (x *NodeConfigParams_VlanConfig) GetDisableL2Learning() bool {
	if x != nil {
		return x.DisableL2Learning
	}
	return false
}

// Per node L2-related configs.
type NodeConfigParams_L2Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L2 aging for L2 entries. Affects VLANs with L2 learning enabled. 0
	// (default) will disable aging timer.
	L2AgeDurationSec int32 `protobuf:"varint,1,opt,name=l2_age_duration_sec,json=l2AgeDurationSec,proto3" json:"l2_age_duration_sec,omitempty"`
}

func (x *NodeConfigParams_L2Config) Reset() {
	*x = NodeConfigParams_L2Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_L2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_L2Config) ProtoMessage() {}

func (x *NodeConfigParams_L2Config) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_L2Config.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_L2Config) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 1}
}

func (x *NodeConfigParams_L2Config) GetL2AgeDurationSec() int32 {
	if x != nil {
		return x.L2AgeDurationSec
	}
	return 0
}

// Per node QoS configuration. This config is expected to be common among
// all the chips.
type NodeConfigParams_QosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingMode            NodeConfigParams_QosConfig_SchedulingMode               `protobuf:"varint,1,opt,name=scheduling_mode,json=schedulingMode,proto3,enum=stratum.hal.NodeConfigParams_QosConfig_SchedulingMode" json:"scheduling_mode,omitempty"`
	SchedulingConfig          []*NodeConfigParams_QosConfig_SchedulerConfig           `protobuf:"bytes,2,rep,name=scheduling_config,json=schedulingConfig,proto3" json:"scheduling_config,omitempty"`
	Dot1PMapping              []*NodeConfigParams_QosConfig_Dot1PMapping              `protobuf:"bytes,3,rep,name=dot1p_mapping,json=dot1pMapping,proto3" json:"dot1p_mapping,omitempty"`
	DscpMapping               []*NodeConfigParams_QosConfig_DscpMapping               `protobuf:"bytes,4,rep,name=dscp_mapping,json=dscpMapping,proto3" json:"dscp_mapping,omitempty"`
	TrafficClassMapping       []*NodeConfigParams_QosConfig_TrafficClassMapping       `protobuf:"bytes,5,rep,name=traffic_class_mapping,json=trafficClassMapping,proto3" json:"traffic_class_mapping,omitempty"`
	CosqMapping               []*NodeConfigParams_QosConfig_CosqMapping               `protobuf:"bytes,6,rep,name=cosq_mapping,json=cosqMapping,proto3" json:"cosq_mapping,omitempty"`
	PriorityGroupMapping      []*NodeConfigParams_QosConfig_PriorityGroupMapping      `protobuf:"bytes,7,rep,name=priority_group_mapping,json=priorityGroupMapping,proto3" json:"priority_group_mapping,omitempty"`
	IngressServicePoolMapping []*NodeConfigParams_QosConfig_IngressServicePoolMapping `protobuf:"bytes,8,rep,name=ingress_service_pool_mapping,json=ingressServicePoolMapping,proto3" json:"ingress_service_pool_mapping,omitempty"`
	EgressServicePoolMapping  []*NodeConfigParams_QosConfig_EgressServicePoolMapping  `protobuf:"bytes,9,rep,name=egress_service_pool_mapping,json=egressServicePoolMapping,proto3" json:"egress_service_pool_mapping,omitempty"`
}

func (x *NodeConfigParams_QosConfig) Reset() {
	*x = NodeConfigParams_QosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2}
}

func (x *NodeConfigParams_QosConfig) GetSchedulingMode() NodeConfigParams_QosConfig_SchedulingMode {
	if x != nil {
		return x.SchedulingMode
	}
	return NodeConfigParams_QosConfig_QOS_SCHED_UNKNOWN
}

func (x *NodeConfigParams_QosConfig) GetSchedulingConfig() []*NodeConfigParams_QosConfig_SchedulerConfig {
	if x != nil {
		return x.SchedulingConfig
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetDot1PMapping() []*NodeConfigParams_QosConfig_Dot1PMapping {
	if x != nil {
		return x.Dot1PMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetDscpMapping() []*NodeConfigParams_QosConfig_DscpMapping {
	if x != nil {
		return x.DscpMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetTrafficClassMapping() []*NodeConfigParams_QosConfig_TrafficClassMapping {
	if x != nil {
		return x.TrafficClassMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetCosqMapping() []*NodeConfigParams_QosConfig_CosqMapping {
	if x != nil {
		return x.CosqMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetPriorityGroupMapping() []*NodeConfigParams_QosConfig_PriorityGroupMapping {
	if x != nil {
		return x.PriorityGroupMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetIngressServicePoolMapping() []*NodeConfigParams_QosConfig_IngressServicePoolMapping {
	if x != nil {
		return x.IngressServicePoolMapping
	}
	return nil
}

func (x *NodeConfigParams_QosConfig) GetEgressServicePoolMapping() []*NodeConfigParams_QosConfig_EgressServicePoolMapping {
	if x != nil {
		return x.EgressServicePoolMapping
	}
	return nil
}

// Per internal priority scheduling config.
type NodeConfigParams_QosConfig_SchedulerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal priority.
	InternalPriority uint32 `protobuf:"varint,1,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
	// Weights used for WRR and WDRR. Ignored for other modes.
	SchedulerWeight uint32 `protobuf:"varint,2,opt,name=scheduler_weight,json=schedulerWeight,proto3" json:"scheduler_weight,omitempty"`
	// Max and min bandwidth for each internal priority.
	MinBandwidthPercent uint32 `protobuf:"varint,3,opt,name=min_bandwidth_percent,json=minBandwidthPercent,proto3" json:"min_bandwidth_percent,omitempty"` // 1-100
	MaxBandwidthPercent uint32 `protobuf:"varint,4,opt,name=max_bandwidth_percent,json=maxBandwidthPercent,proto3" json:"max_bandwidth_percent,omitempty"` // 1-100
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) Reset() {
	*x = NodeConfigParams_QosConfig_SchedulerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_SchedulerConfig) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_SchedulerConfig.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_SchedulerConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) GetSchedulerWeight() uint32 {
	if x != nil {
		return x.SchedulerWeight
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) GetMinBandwidthPercent() uint32 {
	if x != nil {
		return x.MinBandwidthPercent
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_SchedulerConfig) GetMaxBandwidthPercent() uint32 {
	if x != nil {
		return x.MaxBandwidthPercent
	}
	return 0
}

// 802.1p priority to internal priority map entry.
type NodeConfigParams_QosConfig_Dot1PMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot1PPriority    uint32 `protobuf:"varint,1,opt,name=dot1p_priority,json=dot1pPriority,proto3" json:"dot1p_priority,omitempty"` // 0-7
	InternalPriority uint32 `protobuf:"varint,2,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
}

func (x *NodeConfigParams_QosConfig_Dot1PMapping) Reset() {
	*x = NodeConfigParams_QosConfig_Dot1PMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_Dot1PMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_Dot1PMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_Dot1PMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_Dot1PMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_Dot1PMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (x *NodeConfigParams_QosConfig_Dot1PMapping) GetDot1PPriority() uint32 {
	if x != nil {
		return x.Dot1PPriority
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_Dot1PMapping) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

// DSCP range to internal priority map entry.
type NodeConfigParams_QosConfig_DscpMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DscpStart        uint32 `protobuf:"varint,1,opt,name=dscp_start,json=dscpStart,proto3" json:"dscp_start,omitempty"`
	DscpEnd          uint32 `protobuf:"varint,2,opt,name=dscp_end,json=dscpEnd,proto3" json:"dscp_end,omitempty"`
	InternalPriority uint32 `protobuf:"varint,3,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
}

func (x *NodeConfigParams_QosConfig_DscpMapping) Reset() {
	*x = NodeConfigParams_QosConfig_DscpMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_DscpMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_DscpMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_DscpMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_DscpMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_DscpMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 2}
}

func (x *NodeConfigParams_QosConfig_DscpMapping) GetDscpStart() uint32 {
	if x != nil {
		return x.DscpStart
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_DscpMapping) GetDscpEnd() uint32 {
	if x != nil {
		return x.DscpEnd
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_DscpMapping) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

// Internal priority to the traffic class map entry.
// The map is expected to be 1-to-1.
type NodeConfigParams_QosConfig_TrafficClassMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalPriority uint32       `protobuf:"varint,1,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
	TrafficClass     TrafficClass `protobuf:"varint,2,opt,name=traffic_class,json=trafficClass,proto3,enum=stratum.hal.TrafficClass" json:"traffic_class,omitempty"`
}

func (x *NodeConfigParams_QosConfig_TrafficClassMapping) Reset() {
	*x = NodeConfigParams_QosConfig_TrafficClassMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_TrafficClassMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_TrafficClassMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_TrafficClassMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_TrafficClassMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_TrafficClassMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 3}
}

func (x *NodeConfigParams_QosConfig_TrafficClassMapping) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_TrafficClassMapping) GetTrafficClass() TrafficClass {
	if x != nil {
		return x.TrafficClass
	}
	return TrafficClass_UNDEFINED
}

// Internal priority to the ingress priority group number map entry.
// The map is expected to be 1-to-1.
type NodeConfigParams_QosConfig_PriorityGroupMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalPriority uint32 `protobuf:"varint,1,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
	PgNum            uint32 `protobuf:"varint,2,opt,name=pg_num,json=pgNum,proto3" json:"pg_num,omitempty"`
}

func (x *NodeConfigParams_QosConfig_PriorityGroupMapping) Reset() {
	*x = NodeConfigParams_QosConfig_PriorityGroupMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_PriorityGroupMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_PriorityGroupMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_PriorityGroupMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_PriorityGroupMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_PriorityGroupMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 4}
}

func (x *NodeConfigParams_QosConfig_PriorityGroupMapping) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_PriorityGroupMapping) GetPgNum() uint32 {
	if x != nil {
		return x.PgNum
	}
	return 0
}

// Internal priority to the egress CoS queue number map entry.
// The map is expected to be 1-to-1.
type NodeConfigParams_QosConfig_CosqMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalPriority uint32 `protobuf:"varint,1,opt,name=internal_priority,json=internalPriority,proto3" json:"internal_priority,omitempty"`
	QNum             uint32 `protobuf:"varint,2,opt,name=q_num,json=qNum,proto3" json:"q_num,omitempty"`
}

func (x *NodeConfigParams_QosConfig_CosqMapping) Reset() {
	*x = NodeConfigParams_QosConfig_CosqMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_CosqMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_CosqMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_CosqMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_CosqMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_CosqMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 5}
}

func (x *NodeConfigParams_QosConfig_CosqMapping) GetInternalPriority() uint32 {
	if x != nil {
		return x.InternalPriority
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_CosqMapping) GetQNum() uint32 {
	if x != nil {
		return x.QNum
	}
	return 0
}

// Ingress priority group number to the ingress service pool map entry.
type NodeConfigParams_QosConfig_IngressServicePoolMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgNum uint32 `protobuf:"varint,1,opt,name=pg_num,json=pgNum,proto3" json:"pg_num,omitempty"`
	SpNum uint32 `protobuf:"varint,2,opt,name=sp_num,json=spNum,proto3" json:"sp_num,omitempty"`
}

func (x *NodeConfigParams_QosConfig_IngressServicePoolMapping) Reset() {
	*x = NodeConfigParams_QosConfig_IngressServicePoolMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_IngressServicePoolMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_IngressServicePoolMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_IngressServicePoolMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_IngressServicePoolMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_IngressServicePoolMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 6}
}

func (x *NodeConfigParams_QosConfig_IngressServicePoolMapping) GetPgNum() uint32 {
	if x != nil {
		return x.PgNum
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_IngressServicePoolMapping) GetSpNum() uint32 {
	if x != nil {
		return x.SpNum
	}
	return 0
}

// Egress CoS queue number to egress service pool map entry.
type NodeConfigParams_QosConfig_EgressServicePoolMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QNum  uint32 `protobuf:"varint,1,opt,name=q_num,json=qNum,proto3" json:"q_num,omitempty"`
	SpNum uint32 `protobuf:"varint,2,opt,name=sp_num,json=spNum,proto3" json:"sp_num,omitempty"`
}

func (x *NodeConfigParams_QosConfig_EgressServicePoolMapping) Reset() {
	*x = NodeConfigParams_QosConfig_EgressServicePoolMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfigParams_QosConfig_EgressServicePoolMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfigParams_QosConfig_EgressServicePoolMapping) ProtoMessage() {}

func (x *NodeConfigParams_QosConfig_EgressServicePoolMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfigParams_QosConfig_EgressServicePoolMapping.ProtoReflect.Descriptor instead.
func (*NodeConfigParams_QosConfig_EgressServicePoolMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 2, 7}
}

func (x *NodeConfigParams_QosConfig_EgressServicePoolMapping) GetQNum() uint32 {
	if x != nil {
		return x.QNum
	}
	return 0
}

func (x *NodeConfigParams_QosConfig_EgressServicePoolMapping) GetSpNum() uint32 {
	if x != nil {
		return x.SpNum
	}
	return 0
}

// Per port hash config. Most of the hash configuration is given per node.
// These are the only hash config we need to provide per node, for ports that
// are part of a trunk/lag or ECMP group.
type PortConfigParams_HashConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(unknown): Instead of hash_select, we need a better way. this is
	// RTAG7 specific. Maybe based on the port type?
	Rtag7EcmpHashSelect int32 `protobuf:"varint,1,opt,name=rtag7_ecmp_hash_select,json=rtag7EcmpHashSelect,proto3" json:"rtag7_ecmp_hash_select,omitempty"`
	Rtag7LagHashSelect  int32 `protobuf:"varint,2,opt,name=rtag7_lag_hash_select,json=rtag7LagHashSelect,proto3" json:"rtag7_lag_hash_select,omitempty"`
}

func (x *PortConfigParams_HashConfig) Reset() {
	*x = PortConfigParams_HashConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfigParams_HashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfigParams_HashConfig) ProtoMessage() {}

func (x *PortConfigParams_HashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfigParams_HashConfig.ProtoReflect.Descriptor instead.
func (*PortConfigParams_HashConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PortConfigParams_HashConfig) GetRtag7EcmpHashSelect() int32 {
	if x != nil {
		return x.Rtag7EcmpHashSelect
	}
	return 0
}

func (x *PortConfigParams_HashConfig) GetRtag7LagHashSelect() int32 {
	if x != nil {
		return x.Rtag7LagHashSelect
	}
	return 0
}

type PortGroup_PortGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the singleton port member.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The weight (in WCMP mode).
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *PortGroup_PortGroupMember) Reset() {
	*x = PortGroup_PortGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortGroup_PortGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortGroup_PortGroupMember) ProtoMessage() {}

func (x *PortGroup_PortGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortGroup_PortGroupMember.ProtoReflect.Descriptor instead.
func (*PortGroup_PortGroupMember) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PortGroup_PortGroupMember) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PortGroup_PortGroupMember) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// This message encapsulates all the info required to setup KNET interfaces
// on a specific node.
type GoogleConfig_BcmKnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnetIntfConfigs []*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig `protobuf:"bytes,1,rep,name=knet_intf_configs,json=knetIntfConfigs,proto3" json:"knet_intf_configs,omitempty"`
}

func (x *GoogleConfig_BcmKnetConfig) Reset() {
	*x = GoogleConfig_BcmKnetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmKnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmKnetConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmKnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmKnetConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmKnetConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GoogleConfig_BcmKnetConfig) GetKnetIntfConfigs() []*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig {
	if x != nil {
		return x.KnetIntfConfigs
	}
	return nil
}

// BcmRxConfig encapsulates all the data required to fully configure RX on a
// unit. This is just a proto wrapper around BcmSdkInterface::RxConfig.
type GoogleConfig_BcmRxConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RX pool size in packets. If non-positive, default will be used.
	RxPoolPktCount int32 `protobuf:"varint,1,opt,name=rx_pool_pkt_count,json=rxPoolPktCount,proto3" json:"rx_pool_pkt_count,omitempty"`
	// Bytes per packet in RX pool. If non-positive, default will be used.
	RxPoolBytesPerPkt int32 `protobuf:"varint,2,opt,name=rx_pool_bytes_per_pkt,json=rxPoolBytesPerPkt,proto3" json:"rx_pool_bytes_per_pkt,omitempty"`
	// Max packet size in bytes. If non-positive, default will be used.
	MaxPktSizeBytes int32 `protobuf:"varint,3,opt,name=max_pkt_size_bytes,json=maxPktSizeBytes,proto3" json:"max_pkt_size_bytes,omitempty"`
	// Packets per chain. If non-positive, default will be used.
	PktsPerChain int32 `protobuf:"varint,4,opt,name=pkts_per_chain,json=pktsPerChain,proto3" json:"pkts_per_chain,omitempty"`
	// Global rate limit in pps. If not given , we set no limit. Note that this
	// limit can be overwritten by the value given in BcmRateLimitConfig.
	MaxRatePps int32 `protobuf:"varint,5,opt,name=max_rate_pps,json=maxRatePps,proto3" json:"max_rate_pps,omitempty"`
	// Max # of pakcet received in single burst. If not given, we set no limit.
	// Note that this limit can be overwritten by the value given in
	// BcmRateLimitConfig.
	MaxBurstPkts int32 `protobuf:"varint,6,opt,name=max_burst_pkts,json=maxBurstPkts,proto3" json:"max_burst_pkts,omitempty"`
	// Are we using interrupts to generate RX callback?
	UseInterrupt bool `protobuf:"varint,7,opt,name=use_interrupt,json=useInterrupt,proto3" json:"use_interrupt,omitempty"`
	// Map from DMA channel (0-based) to DMA channel config given by
	// BcmDmaChannelConfig.
	DmaChannelConfigs map[int32]*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig `protobuf:"bytes,8,rep,name=dma_channel_configs,json=dmaChannelConfigs,proto3" json:"dma_channel_configs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GoogleConfig_BcmRxConfig) Reset() {
	*x = GoogleConfig_BcmRxConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRxConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRxConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRxConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 1}
}

func (x *GoogleConfig_BcmRxConfig) GetRxPoolPktCount() int32 {
	if x != nil {
		return x.RxPoolPktCount
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetRxPoolBytesPerPkt() int32 {
	if x != nil {
		return x.RxPoolBytesPerPkt
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetMaxPktSizeBytes() int32 {
	if x != nil {
		return x.MaxPktSizeBytes
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetPktsPerChain() int32 {
	if x != nil {
		return x.PktsPerChain
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetMaxRatePps() int32 {
	if x != nil {
		return x.MaxRatePps
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetMaxBurstPkts() int32 {
	if x != nil {
		return x.MaxBurstPkts
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig) GetUseInterrupt() bool {
	if x != nil {
		return x.UseInterrupt
	}
	return false
}

func (x *GoogleConfig_BcmRxConfig) GetDmaChannelConfigs() map[int32]*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig {
	if x != nil {
		return x.DmaChannelConfigs
	}
	return nil
}

type GoogleConfig_BcmTxConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleConfig_BcmTxConfig) Reset() {
	*x = GoogleConfig_BcmTxConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmTxConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmTxConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmTxConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmTxConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmTxConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 2}
}

// BcmRateLimitConfig specifies rate limit settings for a unit. This is just
// a proto wrapper around BcmSdkInterface::RateLimitConfig;
type GoogleConfig_BcmRateLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global rate limit in pps. If not given , we set no limit.
	MaxRatePps int32 `protobuf:"varint,1,opt,name=max_rate_pps,json=maxRatePps,proto3" json:"max_rate_pps,omitempty"`
	// Max # of pakcet received in single burst. If not given, we set no limit.
	MaxBurstPkts int32 `protobuf:"varint,2,opt,name=max_burst_pkts,json=maxBurstPkts,proto3" json:"max_burst_pkts,omitempty"`
	// Map from cos (0-based) to its rate limit config given by
	// BcmPerCosRateLimitConfig.
	PerCosRateLimitConfigs map[int32]*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig `protobuf:"bytes,3,rep,name=per_cos_rate_limit_configs,json=perCosRateLimitConfigs,proto3" json:"per_cos_rate_limit_configs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GoogleConfig_BcmRateLimitConfig) Reset() {
	*x = GoogleConfig_BcmRateLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRateLimitConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRateLimitConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRateLimitConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 3}
}

func (x *GoogleConfig_BcmRateLimitConfig) GetMaxRatePps() int32 {
	if x != nil {
		return x.MaxRatePps
	}
	return 0
}

func (x *GoogleConfig_BcmRateLimitConfig) GetMaxBurstPkts() int32 {
	if x != nil {
		return x.MaxBurstPkts
	}
	return 0
}

func (x *GoogleConfig_BcmRateLimitConfig) GetPerCosRateLimitConfigs() map[int32]*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig {
	if x != nil {
		return x.PerCosRateLimitConfigs
	}
	return nil
}

// BcmBufferConfig defines the buffer carving config for a BCM unit.
// TODO(unknown): This still needs modification. Not ready yet.
// TODO(unknown): Add documentation.
type GoogleConfig_BcmBufferConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalHdrmLimit uint32 `protobuf:"varint,1,opt,name=global_hdrm_limit,json=globalHdrmLimit,proto3" json:"global_hdrm_limit,omitempty"`
	PortMin         uint32 `protobuf:"varint,2,opt,name=port_min,json=portMin,proto3" json:"port_min,omitempty"`
}

func (x *GoogleConfig_BcmBufferConfig) Reset() {
	*x = GoogleConfig_BcmBufferConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmBufferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmBufferConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmBufferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmBufferConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmBufferConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 4}
}

func (x *GoogleConfig_BcmBufferConfig) GetGlobalHdrmLimit() uint32 {
	if x != nil {
		return x.GlobalHdrmLimit
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig) GetPortMin() uint32 {
	if x != nil {
		return x.PortMin
	}
	return 0
}

// BcmRtag7HashConfig defines RTAG7 hash config for a unit.
// TODO(unknown): Add documentation.
type GoogleConfig_BcmRtag7HashConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description         string                                                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"` // optional, just for debugging.
	HashFunctionConfigs []*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig `protobuf:"bytes,2,rep,name=hash_function_configs,json=hashFunctionConfigs,proto3" json:"hash_function_configs,omitempty"`
	MacroFlowHashConfig *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig  `protobuf:"bytes,3,opt,name=macro_flow_hash_config,json=macroFlowHashConfig,proto3" json:"macro_flow_hash_config,omitempty"`
	EcmpHashConfig      *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig    `protobuf:"bytes,4,opt,name=ecmp_hash_config,json=ecmpHashConfig,proto3" json:"ecmp_hash_config,omitempty"`
	LagHashConfig       *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig    `protobuf:"bytes,5,opt,name=lag_hash_config,json=lagHashConfig,proto3" json:"lag_hash_config,omitempty"`
}

func (x *GoogleConfig_BcmRtag7HashConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5}
}

func (x *GoogleConfig_BcmRtag7HashConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleConfig_BcmRtag7HashConfig) GetHashFunctionConfigs() []*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig {
	if x != nil {
		return x.HashFunctionConfigs
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig) GetMacroFlowHashConfig() *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig {
	if x != nil {
		return x.MacroFlowHashConfig
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig) GetEcmpHashConfig() *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig {
	if x != nil {
		return x.EcmpHashConfig
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig) GetLagHashConfig() *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig {
	if x != nil {
		return x.LagHashConfig
	}
	return nil
}

// KNET config for a single KNET interface on a node.
type GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu      int32                           `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	CpuQueue int32                           `protobuf:"varint,2,opt,name=cpu_queue,json=cpuQueue,proto3" json:"cpu_queue,omitempty"`
	Vlan     int32                           `protobuf:"varint,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Purpose  GoogleConfig_BcmKnetIntfPurpose `protobuf:"varint,4,opt,name=purpose,proto3,enum=stratum.hal.GoogleConfig_BcmKnetIntfPurpose" json:"purpose,omitempty"` // TODO(unknown): Anything else?
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) Reset() {
	*x = GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) GetCpuQueue() int32 {
	if x != nil {
		return x.CpuQueue
	}
	return 0
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig) GetPurpose() GoogleConfig_BcmKnetIntfPurpose {
	if x != nil {
		return x.Purpose
	}
	return GoogleConfig_BCM_KNET_INTF_PURPOSE_UNKNOWN
}

// BcmDmaChannelConfig encapsulates all the data required to configure an
// RX DMA channel.
type GoogleConfig_BcmRxConfig_BcmDmaChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of chains (DVs).
	Chains int32 `protobuf:"varint,1,opt,name=chains,proto3" json:"chains,omitempty"`
	// Strip CRC from packets?
	StripCrc bool `protobuf:"varint,2,opt,name=strip_crc,json=stripCrc,proto3" json:"strip_crc,omitempty"`
	// Strip VLAN tag from packets?
	StripVlan bool `protobuf:"varint,3,opt,name=strip_vlan,json=stripVlan,proto3" json:"strip_vlan,omitempty"`
	// Accept packets larger than bufsize?
	OversizedPacketsOk bool `protobuf:"varint,4,opt,name=oversized_packets_ok,json=oversizedPacketsOk,proto3" json:"oversized_packets_ok,omitempty"`
	// Do not parse received packets?
	NoPktParsing bool `protobuf:"varint,5,opt,name=no_pkt_parsing,json=noPktParsing,proto3" json:"no_pkt_parsing,omitempty"`
	// The set of COS (classes of service) supported.
	CosSet []int32 `protobuf:"varint,6,rep,packed,name=cos_set,json=cosSet,proto3" json:"cos_set,omitempty"`
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) Reset() {
	*x = GoogleConfig_BcmRxConfig_BcmDmaChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRxConfig_BcmDmaChannelConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 1, 0}
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetChains() int32 {
	if x != nil {
		return x.Chains
	}
	return 0
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetStripCrc() bool {
	if x != nil {
		return x.StripCrc
	}
	return false
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetStripVlan() bool {
	if x != nil {
		return x.StripVlan
	}
	return false
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetOversizedPacketsOk() bool {
	if x != nil {
		return x.OversizedPacketsOk
	}
	return false
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetNoPktParsing() bool {
	if x != nil {
		return x.NoPktParsing
	}
	return false
}

func (x *GoogleConfig_BcmRxConfig_BcmDmaChannelConfig) GetCosSet() []int32 {
	if x != nil {
		return x.CosSet
	}
	return nil
}

// Specifies rate limit settings for a COS.
type GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rate limit for this cos in ppc. If not given, we set no limit.
	MaxRatePps int32 `protobuf:"varint,1,opt,name=max_rate_pps,json=maxRatePps,proto3" json:"max_rate_pps,omitempty"`
	// Max # of pakcet received in single burst for this cos. If not given,
	// we set no limit.
	MaxBurstPkts int32 `protobuf:"varint,2,opt,name=max_burst_pkts,json=maxBurstPkts,proto3" json:"max_burst_pkts,omitempty"`
}

func (x *GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) Reset() {
	*x = GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 3, 0}
}

func (x *GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) GetMaxRatePps() int32 {
	if x != nil {
		return x.MaxRatePps
	}
	return 0
}

func (x *GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig) GetMaxBurstPkts() int32 {
	if x != nil {
		return x.MaxBurstPkts
	}
	return 0
}

type GoogleConfig_BcmBufferConfig_ServicePoolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpNum              uint32 `protobuf:"varint,1,opt,name=sp_num,json=spNum,proto3" json:"sp_num,omitempty"`
	MaxIngressBufBytes uint32 `protobuf:"varint,2,opt,name=max_ingress_buf_bytes,json=maxIngressBufBytes,proto3" json:"max_ingress_buf_bytes,omitempty"`
	MaxEgressBufBytes  uint32 `protobuf:"varint,3,opt,name=max_egress_buf_bytes,json=maxEgressBufBytes,proto3" json:"max_egress_buf_bytes,omitempty"`
}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) Reset() {
	*x = GoogleConfig_BcmBufferConfig_ServicePoolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmBufferConfig_ServicePoolConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmBufferConfig_ServicePoolConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmBufferConfig_ServicePoolConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 4, 0}
}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) GetSpNum() uint32 {
	if x != nil {
		return x.SpNum
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) GetMaxIngressBufBytes() uint32 {
	if x != nil {
		return x.MaxIngressBufBytes
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_ServicePoolConfig) GetMaxEgressBufBytes() uint32 {
	if x != nil {
		return x.MaxEgressBufBytes
	}
	return 0
}

type GoogleConfig_BcmBufferConfig_PriorityGroupConig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PgNum              uint32 `protobuf:"varint,1,opt,name=pg_num,json=pgNum,proto3" json:"pg_num,omitempty"`
	PgMin              uint32 `protobuf:"varint,2,opt,name=pg_min,json=pgMin,proto3" json:"pg_min,omitempty"`
	PgHdrmGlobalEnable uint32 `protobuf:"varint,3,opt,name=pg_hdrm_global_enable,json=pgHdrmGlobalEnable,proto3" json:"pg_hdrm_global_enable,omitempty"`
	PgSharedLimitCell  uint32 `protobuf:"varint,4,opt,name=pg_shared_limit_cell,json=pgSharedLimitCell,proto3" json:"pg_shared_limit_cell,omitempty"`
	PgSharedDynamic    uint32 `protobuf:"varint,5,opt,name=pg_shared_dynamic,json=pgSharedDynamic,proto3" json:"pg_shared_dynamic,omitempty"`
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) Reset() {
	*x = GoogleConfig_BcmBufferConfig_PriorityGroupConig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmBufferConfig_PriorityGroupConig) ProtoMessage() {}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmBufferConfig_PriorityGroupConig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmBufferConfig_PriorityGroupConig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 4, 1}
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) GetPgNum() uint32 {
	if x != nil {
		return x.PgNum
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) GetPgMin() uint32 {
	if x != nil {
		return x.PgMin
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) GetPgHdrmGlobalEnable() uint32 {
	if x != nil {
		return x.PgHdrmGlobalEnable
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) GetPgSharedLimitCell() uint32 {
	if x != nil {
		return x.PgSharedLimitCell
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_PriorityGroupConig) GetPgSharedDynamic() uint32 {
	if x != nil {
		return x.PgSharedDynamic
	}
	return 0
}

type GoogleConfig_BcmBufferConfig_CosqConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QNum                   uint32 `protobuf:"varint,1,opt,name=q_num,json=qNum,proto3" json:"q_num,omitempty"`
	QMin                   uint32 `protobuf:"varint,2,opt,name=q_min,json=qMin,proto3" json:"q_min,omitempty"`
	QLimitEnable           uint32 `protobuf:"varint,3,opt,name=q_limit_enable,json=qLimitEnable,proto3" json:"q_limit_enable,omitempty"`
	QLimitDynamic          uint32 `protobuf:"varint,4,opt,name=q_limit_dynamic,json=qLimitDynamic,proto3" json:"q_limit_dynamic,omitempty"`
	QSharedLimitCell       uint32 `protobuf:"varint,5,opt,name=q_shared_limit_cell,json=qSharedLimitCell,proto3" json:"q_shared_limit_cell,omitempty"`
	QSharedAlphaCell       uint32 `protobuf:"varint,6,opt,name=q_shared_alpha_cell,json=qSharedAlphaCell,proto3" json:"q_shared_alpha_cell,omitempty"`
	QColorLimitDynamicCell uint32 `protobuf:"varint,7,opt,name=q_color_limit_dynamic_cell,json=qColorLimitDynamicCell,proto3" json:"q_color_limit_dynamic_cell,omitempty"`
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) Reset() {
	*x = GoogleConfig_BcmBufferConfig_CosqConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmBufferConfig_CosqConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmBufferConfig_CosqConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmBufferConfig_CosqConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 4, 2}
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQNum() uint32 {
	if x != nil {
		return x.QNum
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQMin() uint32 {
	if x != nil {
		return x.QMin
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQLimitEnable() uint32 {
	if x != nil {
		return x.QLimitEnable
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQLimitDynamic() uint32 {
	if x != nil {
		return x.QLimitDynamic
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQSharedLimitCell() uint32 {
	if x != nil {
		return x.QSharedLimitCell
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQSharedAlphaCell() uint32 {
	if x != nil {
		return x.QSharedAlphaCell
	}
	return 0
}

func (x *GoogleConfig_BcmBufferConfig_CosqConfig) GetQColorLimitDynamicCell() uint32 {
	if x != nil {
		return x.QColorLimitDynamicCell
	}
	return 0
}

type GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block        GoogleConfig_BcmRtag7HashConfig_HashBlock   `protobuf:"varint,1,opt,name=block,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_HashBlock" json:"block,omitempty"`
	Seed         int32                                       `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"` // Random seed.
	Fields       []GoogleConfig_BcmRtag7HashConfig_HashField `protobuf:"varint,3,rep,packed,name=fields,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_HashField" json:"fields,omitempty"`
	Polynomial_0 GoogleConfig_BcmRtag7HashConfig_Polynomial  `protobuf:"varint,4,opt,name=polynomial_0,json=polynomial0,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_Polynomial" json:"polynomial_0,omitempty"` // for 0 (or only) sub block
	Polynomial_1 GoogleConfig_BcmRtag7HashConfig_Polynomial  `protobuf:"varint,5,opt,name=polynomial_1,json=polynomial1,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_Polynomial" json:"polynomial_1,omitempty"` // for 1 (if exists) sub block
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 0}
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) GetBlock() GoogleConfig_BcmRtag7HashConfig_HashBlock {
	if x != nil {
		return x.Block
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_BLOCK
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) GetFields() []GoogleConfig_BcmRtag7HashConfig_HashField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) GetPolynomial_0() GoogleConfig_BcmRtag7HashConfig_Polynomial {
	if x != nil {
		return x.Polynomial_0
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_POLYNOMIAL
}

func (x *GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig) GetPolynomial_1() GoogleConfig_BcmRtag7HashConfig_Polynomial {
	if x != nil {
		return x.Polynomial_1
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_POLYNOMIAL
}

type GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Polynomial       GoogleConfig_BcmRtag7HashConfig_Polynomial                         `protobuf:"varint,1,opt,name=polynomial,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_Polynomial" json:"polynomial,omitempty"`
	TableConfigs     []*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig `protobuf:"bytes,2,rep,name=table_configs,json=tableConfigs,proto3" json:"table_configs,omitempty"`
	UseMsb_16Bits    bool                                                               `protobuf:"varint,3,opt,name=use_msb_16bits,json=useMsb16bits,proto3" json:"use_msb_16bits,omitempty"`
	RandomizeTable   bool                                                               `protobuf:"varint,4,opt,name=randomize_table,json=randomizeTable,proto3" json:"randomize_table,omitempty"`
	RandomIterations int32                                                              `protobuf:"varint,5,opt,name=random_iterations,json=randomIterations,proto3" json:"random_iterations,omitempty"`
	Seed             int32                                                              `protobuf:"varint,6,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 1}
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetPolynomial() GoogleConfig_BcmRtag7HashConfig_Polynomial {
	if x != nil {
		return x.Polynomial
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_POLYNOMIAL
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetTableConfigs() []*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig {
	if x != nil {
		return x.TableConfigs
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetUseMsb_16Bits() bool {
	if x != nil {
		return x.UseMsb_16Bits
	}
	return false
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetRandomizeTable() bool {
	if x != nil {
		return x.RandomizeTable
	}
	return false
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetRandomIterations() int32 {
	if x != nil {
		return x.RandomIterations
	}
	return 0
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

type GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block         GoogleConfig_BcmRtag7HashConfig_HashBlock                      `protobuf:"varint,1,opt,name=block,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_HashBlock" json:"block,omitempty"`
	TableConfig_0 *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig `protobuf:"bytes,2,opt,name=table_config_0,json=tableConfig0,proto3" json:"table_config_0,omitempty"`
	TableConfig_1 *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig `protobuf:"bytes,3,opt,name=table_config_1,json=tableConfig1,proto3" json:"table_config_1,omitempty"`
	// RTAG7A and RTAG7B has per port per HashType hash bits selection.
	// Each port can select one of two sets of hash config defined by
	// table_config_0 and table_config_1.
	// Here defines the default value, and it could be overridden by the per
	// port config given in the PortConfigParams.
	PortHashSelect int32 `protobuf:"varint,4,opt,name=port_hash_select,json=portHashSelect,proto3" json:"port_hash_select,omitempty"`
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 2}
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) GetBlock() GoogleConfig_BcmRtag7HashConfig_HashBlock {
	if x != nil {
		return x.Block
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_BLOCK
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) GetTableConfig_0() *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig {
	if x != nil {
		return x.TableConfig_0
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) GetTableConfig_1() *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig {
	if x != nil {
		return x.TableConfig_1
	}
	return nil
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig) GetPortHashSelect() int32 {
	if x != nil {
		return x.PortHashSelect
	}
	return 0
}

type GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubBlock   GoogleConfig_BcmRtag7HashConfig_HashSubBlock `protobuf:"varint,1,opt,name=sub_block,json=subBlock,proto3,enum=stratum.hal.GoogleConfig_BcmRtag7HashConfig_HashSubBlock" json:"sub_block,omitempty"`
	IndexStart int32                                        `protobuf:"varint,2,opt,name=index_start,json=indexStart,proto3" json:"index_start,omitempty"`
	IndexEnd   int32                                        `protobuf:"varint,3,opt,name=index_end,json=indexEnd,proto3" json:"index_end,omitempty"`
	Offset     uint32                                       `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 1, 0}
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) GetSubBlock() GoogleConfig_BcmRtag7HashConfig_HashSubBlock {
	if x != nil {
		return x.SubBlock
	}
	return GoogleConfig_BcmRtag7HashConfig_UNKNOWN_SUB_BLOCK
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) GetIndexStart() int32 {
	if x != nil {
		return x.IndexStart
	}
	return 0
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) GetIndexEnd() int32 {
	if x != nil {
		return x.IndexEnd
	}
	return 0
}

func (x *GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Use macro flow hash. Only applicable to ECMP. If set, offset will be
	// ignored.
	UseMacroFlowHash bool `protobuf:"varint,2,opt,name=use_macro_flow_hash,json=useMacroFlowHash,proto3" json:"use_macro_flow_hash,omitempty"`
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) Reset() {
	*x = GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) ProtoMessage() {}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11, 5, 2, 0}
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig) GetUseMacroFlowHash() bool {
	if x != nil {
		return x.UseMacroFlowHash
	}
	return false
}

type TofinoConfig_BfPortShapingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map from port id to its shaping config given by BfPerPortShapingConfig.
	PerPortShapingConfigs map[uint32]*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig `protobuf:"bytes,1,rep,name=per_port_shaping_configs,json=perPortShapingConfigs,proto3" json:"per_port_shaping_configs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TofinoConfig_BfPortShapingConfig) Reset() {
	*x = TofinoConfig_BfPortShapingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TofinoConfig_BfPortShapingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofinoConfig_BfPortShapingConfig) ProtoMessage() {}

func (x *TofinoConfig_BfPortShapingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofinoConfig_BfPortShapingConfig.ProtoReflect.Descriptor instead.
func (*TofinoConfig_BfPortShapingConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TofinoConfig_BfPortShapingConfig) GetPerPortShapingConfigs() map[uint32]*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig {
	if x != nil {
		return x.PerPortShapingConfigs
	}
	return nil
}

type TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Shaping:
	//	*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShaping
	//	*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShaping
	Shaping isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping `protobuf_oneof:"shaping"`
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) Reset() {
	*x = TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) ProtoMessage() {}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig.ProtoReflect.Descriptor instead.
func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (m *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) GetShaping() isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping {
	if m != nil {
		return m.Shaping
	}
	return nil
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) GetPacketShaping() *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape {
	if x, ok := x.GetShaping().(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShaping); ok {
		return x.PacketShaping
	}
	return nil
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig) GetByteShaping() *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape {
	if x, ok := x.GetShaping().(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShaping); ok {
		return x.ByteShaping
	}
	return nil
}

type isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping interface {
	isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping()
}

type TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShaping struct {
	PacketShaping *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape `protobuf:"bytes,1,opt,name=packet_shaping,json=packetShaping,proto3,oneof"`
}

type TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShaping struct {
	ByteShaping *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape `protobuf:"bytes,2,opt,name=byte_shaping,json=byteShaping,proto3,oneof"`
}

func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShaping) isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping() {
}

func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShaping) isTofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_Shaping() {
}

type TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRatePps      uint64 `protobuf:"varint,1,opt,name=max_rate_pps,json=maxRatePps,proto3" json:"max_rate_pps,omitempty"`
	MaxBurstPackets uint32 `protobuf:"varint,2,opt,name=max_burst_packets,json=maxBurstPackets,proto3" json:"max_burst_packets,omitempty"`
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) Reset() {
	*x = TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) ProtoMessage() {}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape.ProtoReflect.Descriptor instead.
func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) GetMaxRatePps() uint64 {
	if x != nil {
		return x.MaxRatePps
	}
	return 0
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape) GetMaxBurstPackets() uint32 {
	if x != nil {
		return x.MaxBurstPackets
	}
	return 0
}

type TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRateBps    uint64 `protobuf:"varint,1,opt,name=max_rate_bps,json=maxRateBps,proto3" json:"max_rate_bps,omitempty"`
	MaxBurstBytes uint32 `protobuf:"varint,2,opt,name=max_burst_bytes,json=maxBurstBytes,proto3" json:"max_burst_bytes,omitempty"`
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) Reset() {
	*x = TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) ProtoMessage() {}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape.ProtoReflect.Descriptor instead.
func (*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12, 0, 0, 1}
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) GetMaxRateBps() uint64 {
	if x != nil {
		return x.MaxRateBps
	}
	return 0
}

func (x *TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape) GetMaxBurstBytes() uint32 {
	if x != nil {
		return x.MaxBurstBytes
	}
	return 0
}

type OpticalTransceiverInfo_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instantaneous value of the statistic.
	Instant float64 `protobuf:"fixed64,1,opt,name=instant,proto3" json:"instant,omitempty"`
	// The arithmetic mean value of the statistic over the time interval.
	Avg float64 `protobuf:"fixed64,2,opt,name=avg,proto3" json:"avg,omitempty"`
	// The time interval over which the statistics are computed.
	Interval uint64 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// The maximum value of the statistic over the time interval.
	Max float64 `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	// The absolute time at which the maximum value occurred.
	MaxTime uint64 `protobuf:"varint,5,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	// The minimum value of the statistic over the time interval.
	Min float64 `protobuf:"fixed64,6,opt,name=min,proto3" json:"min,omitempty"`
	// The absolute time at which the minimum value occurred.
	MinTime uint64 `protobuf:"varint,7,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
}

func (x *OpticalTransceiverInfo_Power) Reset() {
	*x = OpticalTransceiverInfo_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticalTransceiverInfo_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticalTransceiverInfo_Power) ProtoMessage() {}

func (x *OpticalTransceiverInfo_Power) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticalTransceiverInfo_Power.ProtoReflect.Descriptor instead.
func (*OpticalTransceiverInfo_Power) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21, 0}
}

func (x *OpticalTransceiverInfo_Power) GetInstant() float64 {
	if x != nil {
		return x.Instant
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetAvg() float64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetMaxTime() uint64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *OpticalTransceiverInfo_Power) GetMinTime() uint64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

type DataRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*DataRequest_Request_OperStatus
	//	*DataRequest_Request_AdminStatus
	//	*DataRequest_Request_MacAddress
	//	*DataRequest_Request_PortSpeed
	//	*DataRequest_Request_NegotiatedPortSpeed
	//	*DataRequest_Request_LacpRouterMac
	//	*DataRequest_Request_LacpSystemPriority
	//	*DataRequest_Request_PortCounters
	//	*DataRequest_Request_MemoryErrorAlarm
	//	*DataRequest_Request_FlowProgrammingExceptionAlarm
	//	*DataRequest_Request_PortQosCounters
	//	*DataRequest_Request_NodePacketioDebugInfo
	//	*DataRequest_Request_ForwardingViability
	//	*DataRequest_Request_HealthIndicator
	//	*DataRequest_Request_AutonegStatus
	//	*DataRequest_Request_FrontPanelPortInfo
	//	*DataRequest_Request_HardwarePort
	//	*DataRequest_Request_FecStatus
	//	*DataRequest_Request_OpticalTransceiverInfo
	//	*DataRequest_Request_LoopbackStatus
	//	*DataRequest_Request_NodeInfo
	//	*DataRequest_Request_SdnPortId
	Request isDataRequest_Request_Request `protobuf_oneof:"request"`
}

func (x *DataRequest_Request) Reset() {
	*x = DataRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request) ProtoMessage() {}

func (x *DataRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request.ProtoReflect.Descriptor instead.
func (*DataRequest_Request) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0}
}

func (m *DataRequest_Request) GetRequest() isDataRequest_Request_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DataRequest_Request) GetOperStatus() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_OperStatus); ok {
		return x.OperStatus
	}
	return nil
}

func (x *DataRequest_Request) GetAdminStatus() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_AdminStatus); ok {
		return x.AdminStatus
	}
	return nil
}

func (x *DataRequest_Request) GetMacAddress() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_MacAddress); ok {
		return x.MacAddress
	}
	return nil
}

func (x *DataRequest_Request) GetPortSpeed() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_PortSpeed); ok {
		return x.PortSpeed
	}
	return nil
}

func (x *DataRequest_Request) GetNegotiatedPortSpeed() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_NegotiatedPortSpeed); ok {
		return x.NegotiatedPortSpeed
	}
	return nil
}

func (x *DataRequest_Request) GetLacpRouterMac() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_LacpRouterMac); ok {
		return x.LacpRouterMac
	}
	return nil
}

func (x *DataRequest_Request) GetLacpSystemPriority() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_LacpSystemPriority); ok {
		return x.LacpSystemPriority
	}
	return nil
}

func (x *DataRequest_Request) GetPortCounters() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_PortCounters); ok {
		return x.PortCounters
	}
	return nil
}

func (x *DataRequest_Request) GetMemoryErrorAlarm() *DataRequest_Request_Chassis {
	if x, ok := x.GetRequest().(*DataRequest_Request_MemoryErrorAlarm); ok {
		return x.MemoryErrorAlarm
	}
	return nil
}

func (x *DataRequest_Request) GetFlowProgrammingExceptionAlarm() *DataRequest_Request_Chassis {
	if x, ok := x.GetRequest().(*DataRequest_Request_FlowProgrammingExceptionAlarm); ok {
		return x.FlowProgrammingExceptionAlarm
	}
	return nil
}

func (x *DataRequest_Request) GetPortQosCounters() *DataRequest_Request_PortQueue {
	if x, ok := x.GetRequest().(*DataRequest_Request_PortQosCounters); ok {
		return x.PortQosCounters
	}
	return nil
}

func (x *DataRequest_Request) GetNodePacketioDebugInfo() *DataRequest_Request_Node {
	if x, ok := x.GetRequest().(*DataRequest_Request_NodePacketioDebugInfo); ok {
		return x.NodePacketioDebugInfo
	}
	return nil
}

func (x *DataRequest_Request) GetForwardingViability() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_ForwardingViability); ok {
		return x.ForwardingViability
	}
	return nil
}

func (x *DataRequest_Request) GetHealthIndicator() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_HealthIndicator); ok {
		return x.HealthIndicator
	}
	return nil
}

func (x *DataRequest_Request) GetAutonegStatus() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_AutonegStatus); ok {
		return x.AutonegStatus
	}
	return nil
}

func (x *DataRequest_Request) GetFrontPanelPortInfo() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_FrontPanelPortInfo); ok {
		return x.FrontPanelPortInfo
	}
	return nil
}

func (x *DataRequest_Request) GetHardwarePort() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_HardwarePort); ok {
		return x.HardwarePort
	}
	return nil
}

func (x *DataRequest_Request) GetFecStatus() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_FecStatus); ok {
		return x.FecStatus
	}
	return nil
}

func (x *DataRequest_Request) GetOpticalTransceiverInfo() *DataRequest_Request_OpticalNetworkInterface {
	if x, ok := x.GetRequest().(*DataRequest_Request_OpticalTransceiverInfo); ok {
		return x.OpticalTransceiverInfo
	}
	return nil
}

func (x *DataRequest_Request) GetLoopbackStatus() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_LoopbackStatus); ok {
		return x.LoopbackStatus
	}
	return nil
}

func (x *DataRequest_Request) GetNodeInfo() *DataRequest_Request_Node {
	if x, ok := x.GetRequest().(*DataRequest_Request_NodeInfo); ok {
		return x.NodeInfo
	}
	return nil
}

func (x *DataRequest_Request) GetSdnPortId() *DataRequest_Request_Port {
	if x, ok := x.GetRequest().(*DataRequest_Request_SdnPortId); ok {
		return x.SdnPortId
	}
	return nil
}

type isDataRequest_Request_Request interface {
	isDataRequest_Request_Request()
}

type DataRequest_Request_OperStatus struct {
	OperStatus *DataRequest_Request_Port `protobuf:"bytes,1,opt,name=oper_status,json=operStatus,proto3,oneof"`
}

type DataRequest_Request_AdminStatus struct {
	AdminStatus *DataRequest_Request_Port `protobuf:"bytes,2,opt,name=admin_status,json=adminStatus,proto3,oneof"`
}

type DataRequest_Request_MacAddress struct {
	MacAddress *DataRequest_Request_Port `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3,oneof"`
}

type DataRequest_Request_PortSpeed struct {
	PortSpeed *DataRequest_Request_Port `protobuf:"bytes,4,opt,name=port_speed,json=portSpeed,proto3,oneof"`
}

type DataRequest_Request_NegotiatedPortSpeed struct {
	NegotiatedPortSpeed *DataRequest_Request_Port `protobuf:"bytes,5,opt,name=negotiated_port_speed,json=negotiatedPortSpeed,proto3,oneof"`
}

type DataRequest_Request_LacpRouterMac struct {
	LacpRouterMac *DataRequest_Request_Port `protobuf:"bytes,6,opt,name=lacp_router_mac,json=lacpRouterMac,proto3,oneof"`
}

type DataRequest_Request_LacpSystemPriority struct {
	LacpSystemPriority *DataRequest_Request_Port `protobuf:"bytes,7,opt,name=lacp_system_priority,json=lacpSystemPriority,proto3,oneof"`
}

type DataRequest_Request_PortCounters struct {
	PortCounters *DataRequest_Request_Port `protobuf:"bytes,8,opt,name=port_counters,json=portCounters,proto3,oneof"`
}

type DataRequest_Request_MemoryErrorAlarm struct {
	MemoryErrorAlarm *DataRequest_Request_Chassis `protobuf:"bytes,9,opt,name=memory_error_alarm,json=memoryErrorAlarm,proto3,oneof"`
}

type DataRequest_Request_FlowProgrammingExceptionAlarm struct {
	FlowProgrammingExceptionAlarm *DataRequest_Request_Chassis `protobuf:"bytes,10,opt,name=flow_programming_exception_alarm,json=flowProgrammingExceptionAlarm,proto3,oneof"`
}

type DataRequest_Request_PortQosCounters struct {
	PortQosCounters *DataRequest_Request_PortQueue `protobuf:"bytes,11,opt,name=port_qos_counters,json=portQosCounters,proto3,oneof"`
}

type DataRequest_Request_NodePacketioDebugInfo struct {
	NodePacketioDebugInfo *DataRequest_Request_Node `protobuf:"bytes,12,opt,name=node_packetio_debug_info,json=nodePacketioDebugInfo,proto3,oneof"`
}

type DataRequest_Request_ForwardingViability struct {
	ForwardingViability *DataRequest_Request_Port `protobuf:"bytes,13,opt,name=forwarding_viability,json=forwardingViability,proto3,oneof"`
}

type DataRequest_Request_HealthIndicator struct {
	HealthIndicator *DataRequest_Request_Port `protobuf:"bytes,14,opt,name=health_indicator,json=healthIndicator,proto3,oneof"`
}

type DataRequest_Request_AutonegStatus struct {
	AutonegStatus *DataRequest_Request_Port `protobuf:"bytes,15,opt,name=autoneg_status,json=autonegStatus,proto3,oneof"`
}

type DataRequest_Request_FrontPanelPortInfo struct {
	FrontPanelPortInfo *DataRequest_Request_Port `protobuf:"bytes,16,opt,name=front_panel_port_info,json=frontPanelPortInfo,proto3,oneof"`
}

type DataRequest_Request_HardwarePort struct {
	HardwarePort *DataRequest_Request_Port `protobuf:"bytes,17,opt,name=hardware_port,json=hardwarePort,proto3,oneof"`
}

type DataRequest_Request_FecStatus struct {
	FecStatus *DataRequest_Request_Port `protobuf:"bytes,18,opt,name=fec_status,json=fecStatus,proto3,oneof"`
}

type DataRequest_Request_OpticalTransceiverInfo struct {
	OpticalTransceiverInfo *DataRequest_Request_OpticalNetworkInterface `protobuf:"bytes,19,opt,name=optical_transceiver_info,json=opticalTransceiverInfo,proto3,oneof"`
}

type DataRequest_Request_LoopbackStatus struct {
	LoopbackStatus *DataRequest_Request_Port `protobuf:"bytes,20,opt,name=loopback_status,json=loopbackStatus,proto3,oneof"`
}

type DataRequest_Request_NodeInfo struct {
	NodeInfo *DataRequest_Request_Node `protobuf:"bytes,21,opt,name=node_info,json=nodeInfo,proto3,oneof"`
}

type DataRequest_Request_SdnPortId struct {
	SdnPortId *DataRequest_Request_Port `protobuf:"bytes,22,opt,name=sdn_port_id,json=sdnPortId,proto3,oneof"`
}

func (*DataRequest_Request_OperStatus) isDataRequest_Request_Request() {}

func (*DataRequest_Request_AdminStatus) isDataRequest_Request_Request() {}

func (*DataRequest_Request_MacAddress) isDataRequest_Request_Request() {}

func (*DataRequest_Request_PortSpeed) isDataRequest_Request_Request() {}

func (*DataRequest_Request_NegotiatedPortSpeed) isDataRequest_Request_Request() {}

func (*DataRequest_Request_LacpRouterMac) isDataRequest_Request_Request() {}

func (*DataRequest_Request_LacpSystemPriority) isDataRequest_Request_Request() {}

func (*DataRequest_Request_PortCounters) isDataRequest_Request_Request() {}

func (*DataRequest_Request_MemoryErrorAlarm) isDataRequest_Request_Request() {}

func (*DataRequest_Request_FlowProgrammingExceptionAlarm) isDataRequest_Request_Request() {}

func (*DataRequest_Request_PortQosCounters) isDataRequest_Request_Request() {}

func (*DataRequest_Request_NodePacketioDebugInfo) isDataRequest_Request_Request() {}

func (*DataRequest_Request_ForwardingViability) isDataRequest_Request_Request() {}

func (*DataRequest_Request_HealthIndicator) isDataRequest_Request_Request() {}

func (*DataRequest_Request_AutonegStatus) isDataRequest_Request_Request() {}

func (*DataRequest_Request_FrontPanelPortInfo) isDataRequest_Request_Request() {}

func (*DataRequest_Request_HardwarePort) isDataRequest_Request_Request() {}

func (*DataRequest_Request_FecStatus) isDataRequest_Request_Request() {}

func (*DataRequest_Request_OpticalTransceiverInfo) isDataRequest_Request_Request() {}

func (*DataRequest_Request_LoopbackStatus) isDataRequest_Request_Request() {}

func (*DataRequest_Request_NodeInfo) isDataRequest_Request_Request() {}

func (*DataRequest_Request_SdnPortId) isDataRequest_Request_Request() {}

// Defines the data required to get a data for a port.
type DataRequest_Request_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	PortId uint32 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *DataRequest_Request_Port) Reset() {
	*x = DataRequest_Request_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request_Port) ProtoMessage() {}

func (x *DataRequest_Request_Port) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request_Port.ProtoReflect.Descriptor instead.
func (*DataRequest_Request_Port) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0, 0}
}

func (x *DataRequest_Request_Port) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *DataRequest_Request_Port) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// Defines the data required to get a data for a node.
type DataRequest_Request_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *DataRequest_Request_Node) Reset() {
	*x = DataRequest_Request_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request_Node) ProtoMessage() {}

func (x *DataRequest_Request_Node) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request_Node.ProtoReflect.Descriptor instead.
func (*DataRequest_Request_Node) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0, 1}
}

func (x *DataRequest_Request_Node) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// Defined the data required to get a data for a chassis.
type DataRequest_Request_Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataRequest_Request_Chassis) Reset() {
	*x = DataRequest_Request_Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request_Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request_Chassis) ProtoMessage() {}

func (x *DataRequest_Request_Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request_Chassis.ProtoReflect.Descriptor instead.
func (*DataRequest_Request_Chassis) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0, 2}
}

// Defined the data required to get a data for a queue of a port.
type DataRequest_Request_PortQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	PortId  uint32 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	QueueId uint32 `protobuf:"varint,3,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *DataRequest_Request_PortQueue) Reset() {
	*x = DataRequest_Request_PortQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request_PortQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request_PortQueue) ProtoMessage() {}

func (x *DataRequest_Request_PortQueue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request_PortQueue.ProtoReflect.Descriptor instead.
func (*DataRequest_Request_PortQueue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0, 3}
}

func (x *DataRequest_Request_PortQueue) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *DataRequest_Request_PortQueue) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *DataRequest_Request_PortQueue) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

// Data required to set info for a specific optical network interface.
type DataRequest_Request_OpticalNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module           int32 `protobuf:"varint,1,opt,name=module,proto3" json:"module,omitempty"`
	NetworkInterface int32 `protobuf:"varint,2,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (x *DataRequest_Request_OpticalNetworkInterface) Reset() {
	*x = DataRequest_Request_OpticalNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest_Request_OpticalNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest_Request_OpticalNetworkInterface) ProtoMessage() {}

func (x *DataRequest_Request_OpticalNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest_Request_OpticalNetworkInterface.ProtoReflect.Descriptor instead.
func (*DataRequest_Request_OpticalNetworkInterface) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39, 0, 4}
}

func (x *DataRequest_Request_OpticalNetworkInterface) GetModule() int32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *DataRequest_Request_OpticalNetworkInterface) GetNetworkInterface() int32 {
	if x != nil {
		return x.NetworkInterface
	}
	return 0
}

type SetRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*SetRequest_Request_Port_
	//	*SetRequest_Request_Node_
	//	*SetRequest_Request_Chassis_
	//	*SetRequest_Request_OpticalNetworkInterface_
	Request isSetRequest_Request_Request `protobuf_oneof:"request"`
}

func (x *SetRequest_Request) Reset() {
	*x = SetRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest_Request) ProtoMessage() {}

func (x *SetRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest_Request.ProtoReflect.Descriptor instead.
func (*SetRequest_Request) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41, 0}
}

func (m *SetRequest_Request) GetRequest() isSetRequest_Request_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SetRequest_Request) GetPort() *SetRequest_Request_Port {
	if x, ok := x.GetRequest().(*SetRequest_Request_Port_); ok {
		return x.Port
	}
	return nil
}

func (x *SetRequest_Request) GetNode() *SetRequest_Request_Node {
	if x, ok := x.GetRequest().(*SetRequest_Request_Node_); ok {
		return x.Node
	}
	return nil
}

func (x *SetRequest_Request) GetChassis() *SetRequest_Request_Chassis {
	if x, ok := x.GetRequest().(*SetRequest_Request_Chassis_); ok {
		return x.Chassis
	}
	return nil
}

func (x *SetRequest_Request) GetOpticalNetworkInterface() *SetRequest_Request_OpticalNetworkInterface {
	if x, ok := x.GetRequest().(*SetRequest_Request_OpticalNetworkInterface_); ok {
		return x.OpticalNetworkInterface
	}
	return nil
}

type isSetRequest_Request_Request interface {
	isSetRequest_Request_Request()
}

type SetRequest_Request_Port_ struct {
	Port *SetRequest_Request_Port `protobuf:"bytes,1,opt,name=port,proto3,oneof"`
}

type SetRequest_Request_Node_ struct {
	Node *SetRequest_Request_Node `protobuf:"bytes,2,opt,name=node,proto3,oneof"`
}

type SetRequest_Request_Chassis_ struct {
	Chassis *SetRequest_Request_Chassis `protobuf:"bytes,3,opt,name=chassis,proto3,oneof"`
}

type SetRequest_Request_OpticalNetworkInterface_ struct {
	OpticalNetworkInterface *SetRequest_Request_OpticalNetworkInterface `protobuf:"bytes,4,opt,name=optical_network_interface,json=opticalNetworkInterface,proto3,oneof"`
}

func (*SetRequest_Request_Port_) isSetRequest_Request_Request() {}

func (*SetRequest_Request_Node_) isSetRequest_Request_Request() {}

func (*SetRequest_Request_Chassis_) isSetRequest_Request_Request() {}

func (*SetRequest_Request_OpticalNetworkInterface_) isSetRequest_Request_Request() {}

// Data required to set info for a specific port.
type SetRequest_Request_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // Node ID of the node the port is located on.
	PortId uint32 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"` // Port ID of the port the request points to.
	// Types that are assignable to Value:
	//	*SetRequest_Request_Port_AdminStatus
	//	*SetRequest_Request_Port_MacAddress
	//	*SetRequest_Request_Port_PortSpeed
	//	*SetRequest_Request_Port_LacpRouterMac
	//	*SetRequest_Request_Port_LacpSystemPriority
	//	*SetRequest_Request_Port_HealthIndicator
	//	*SetRequest_Request_Port_AutonegStatus
	//	*SetRequest_Request_Port_ForwardingViability
	//	*SetRequest_Request_Port_LoopbackStatus
	Value isSetRequest_Request_Port_Value `protobuf_oneof:"value"`
}

func (x *SetRequest_Request_Port) Reset() {
	*x = SetRequest_Request_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest_Request_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest_Request_Port) ProtoMessage() {}

func (x *SetRequest_Request_Port) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest_Request_Port.ProtoReflect.Descriptor instead.
func (*SetRequest_Request_Port) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41, 0, 0}
}

func (x *SetRequest_Request_Port) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SetRequest_Request_Port) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (m *SetRequest_Request_Port) GetValue() isSetRequest_Request_Port_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SetRequest_Request_Port) GetAdminStatus() *AdminStatus {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_AdminStatus); ok {
		return x.AdminStatus
	}
	return nil
}

func (x *SetRequest_Request_Port) GetMacAddress() *MacAddress {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_MacAddress); ok {
		return x.MacAddress
	}
	return nil
}

func (x *SetRequest_Request_Port) GetPortSpeed() *PortSpeed {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_PortSpeed); ok {
		return x.PortSpeed
	}
	return nil
}

func (x *SetRequest_Request_Port) GetLacpRouterMac() *MacAddress {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_LacpRouterMac); ok {
		return x.LacpRouterMac
	}
	return nil
}

func (x *SetRequest_Request_Port) GetLacpSystemPriority() *SystemPriority {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_LacpSystemPriority); ok {
		return x.LacpSystemPriority
	}
	return nil
}

func (x *SetRequest_Request_Port) GetHealthIndicator() *HealthIndicator {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_HealthIndicator); ok {
		return x.HealthIndicator
	}
	return nil
}

func (x *SetRequest_Request_Port) GetAutonegStatus() *AutonegotiationStatus {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_AutonegStatus); ok {
		return x.AutonegStatus
	}
	return nil
}

func (x *SetRequest_Request_Port) GetForwardingViability() *ForwardingViability {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_ForwardingViability); ok {
		return x.ForwardingViability
	}
	return nil
}

func (x *SetRequest_Request_Port) GetLoopbackStatus() *LoopbackStatus {
	if x, ok := x.GetValue().(*SetRequest_Request_Port_LoopbackStatus); ok {
		return x.LoopbackStatus
	}
	return nil
}

type isSetRequest_Request_Port_Value interface {
	isSetRequest_Request_Port_Value()
}

type SetRequest_Request_Port_AdminStatus struct {
	// The intended admin state of the port.
	AdminStatus *AdminStatus `protobuf:"bytes,3,opt,name=admin_status,json=adminStatus,proto3,oneof"`
}

type SetRequest_Request_Port_MacAddress struct {
	// The intended MAC address of the port.
	MacAddress *MacAddress `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3,oneof"`
}

type SetRequest_Request_Port_PortSpeed struct {
	// The intended speed of the port.
	PortSpeed *PortSpeed `protobuf:"bytes,5,opt,name=port_speed,json=portSpeed,proto3,oneof"`
}

type SetRequest_Request_Port_LacpRouterMac struct {
	// The new router MAC portion of LACP system ID.
	LacpRouterMac *MacAddress `protobuf:"bytes,6,opt,name=lacp_router_mac,json=lacpRouterMac,proto3,oneof"`
}

type SetRequest_Request_Port_LacpSystemPriority struct {
	// The new system priority of LACP system ID.
	LacpSystemPriority *SystemPriority `protobuf:"bytes,7,opt,name=lacp_system_priority,json=lacpSystemPriority,proto3,oneof"`
}

type SetRequest_Request_Port_HealthIndicator struct {
	// The new health state of the port.
	HealthIndicator *HealthIndicator `protobuf:"bytes,8,opt,name=health_indicator,json=healthIndicator,proto3,oneof"`
}

type SetRequest_Request_Port_AutonegStatus struct {
	// The new autoneg status of the port.
	AutonegStatus *AutonegotiationStatus `protobuf:"bytes,9,opt,name=autoneg_status,json=autonegStatus,proto3,oneof"`
}

type SetRequest_Request_Port_ForwardingViability struct {
	// The new forwarding viability of the port.
	ForwardingViability *ForwardingViability `protobuf:"bytes,10,opt,name=forwarding_viability,json=forwardingViability,proto3,oneof"`
}

type SetRequest_Request_Port_LoopbackStatus struct {
	// The intended loopback state of the port.
	LoopbackStatus *LoopbackStatus `protobuf:"bytes,11,opt,name=loopback_status,json=loopbackStatus,proto3,oneof"`
}

func (*SetRequest_Request_Port_AdminStatus) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_MacAddress) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_PortSpeed) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_LacpRouterMac) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_LacpSystemPriority) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_HealthIndicator) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_AutonegStatus) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_ForwardingViability) isSetRequest_Request_Port_Value() {}

func (*SetRequest_Request_Port_LoopbackStatus) isSetRequest_Request_Port_Value() {}

// Data required to set info for a specific node.
type SetRequest_Request_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRequest_Request_Node) Reset() {
	*x = SetRequest_Request_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest_Request_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest_Request_Node) ProtoMessage() {}

func (x *SetRequest_Request_Node) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest_Request_Node.ProtoReflect.Descriptor instead.
func (*SetRequest_Request_Node) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41, 0, 1}
}

// Data required to set info for a specific chassis.
type SetRequest_Request_Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRequest_Request_Chassis) Reset() {
	*x = SetRequest_Request_Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest_Request_Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest_Request_Chassis) ProtoMessage() {}

func (x *SetRequest_Request_Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest_Request_Chassis.ProtoReflect.Descriptor instead.
func (*SetRequest_Request_Chassis) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41, 0, 2}
}

// Data required to set info for a specific optical network interface.
type SetRequest_Request_OpticalNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module           int32 `protobuf:"varint,1,opt,name=module,proto3" json:"module,omitempty"`
	NetworkInterface int32 `protobuf:"varint,2,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	// Types that are assignable to Value:
	//	*SetRequest_Request_OpticalNetworkInterface_OpticalTransceiverInfo
	Value isSetRequest_Request_OpticalNetworkInterface_Value `protobuf_oneof:"value"`
}

func (x *SetRequest_Request_OpticalNetworkInterface) Reset() {
	*x = SetRequest_Request_OpticalNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest_Request_OpticalNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest_Request_OpticalNetworkInterface) ProtoMessage() {}

func (x *SetRequest_Request_OpticalNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest_Request_OpticalNetworkInterface.ProtoReflect.Descriptor instead.
func (*SetRequest_Request_OpticalNetworkInterface) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41, 0, 3}
}

func (x *SetRequest_Request_OpticalNetworkInterface) GetModule() int32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *SetRequest_Request_OpticalNetworkInterface) GetNetworkInterface() int32 {
	if x != nil {
		return x.NetworkInterface
	}
	return 0
}

func (m *SetRequest_Request_OpticalNetworkInterface) GetValue() isSetRequest_Request_OpticalNetworkInterface_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SetRequest_Request_OpticalNetworkInterface) GetOpticalTransceiverInfo() *OpticalTransceiverInfo {
	if x, ok := x.GetValue().(*SetRequest_Request_OpticalNetworkInterface_OpticalTransceiverInfo); ok {
		return x.OpticalTransceiverInfo
	}
	return nil
}

type isSetRequest_Request_OpticalNetworkInterface_Value interface {
	isSetRequest_Request_OpticalNetworkInterface_Value()
}

type SetRequest_Request_OpticalNetworkInterface_OpticalTransceiverInfo struct {
	// The new optical channel configurable values.
	OpticalTransceiverInfo *OpticalTransceiverInfo `protobuf:"bytes,3,opt,name=optical_transceiver_info,json=opticalTransceiverInfo,proto3,oneof"`
}

func (*SetRequest_Request_OpticalNetworkInterface_OpticalTransceiverInfo) isSetRequest_Request_OpticalNetworkInterface_Value() {
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x22, 0x99, 0x08, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c, 0x61, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x49, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4e, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0c,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a,
	0x0b, 0x66, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x66, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x75,
	0x6e, 0x74, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x74, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x74, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0x66, 0x0a, 0x0a, 0x4c, 0x61, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x63, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x0b, 0x0a, 0x09, 0x4e, 0x74, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0d, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x84, 0x01, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x1a, 0xe9, 0x02, 0x0a, 0x0c,
	0x54, 0x75, 0x6e, 0x74, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x54, 0x75, 0x6e, 0x74, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69,
	0x70, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74,
	0x64, 0x65, 0x76, 0x22, 0x42, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54,
	0x52, 0x41, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfa, 0x13, 0x0a, 0x10, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b,
	0x0a, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x76, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6c,
	0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x32,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x6c, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x46, 0x0a, 0x0a, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x71,
	0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x9e, 0x02, 0x0a, 0x0a, 0x56, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x32, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x32, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x39, 0x0a, 0x08, 0x4c, 0x32, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x32, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x32, 0x41, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x1a, 0xaf, 0x0f, 0x0a, 0x09, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x5f, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0d, 0x64, 0x6f, 0x74,
	0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x0c, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x15,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a,
	0x0c, 0x63, 0x6f, 0x73, 0x71, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x73,
	0x71, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x71, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x7f,
	0x0a, 0x1b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0xd1, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x1a, 0x62, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x74,
	0x31, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x74, 0x0a, 0x0b, 0x44, 0x73, 0x63, 0x70, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x63, 0x70, 0x45, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x82, 0x01,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x1a, 0x5a, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x67, 0x4e, 0x75, 0x6d, 0x1a, 0x4f,
	0x0a, 0x0b, 0x43, 0x6f, 0x73, 0x71, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x71, 0x4e, 0x75, 0x6d, 0x1a,
	0x49, 0x0a, 0x19, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x67,
	0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x4e, 0x75, 0x6d, 0x1a, 0x46, 0x0a, 0x18, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x4e,
	0x75, 0x6d, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x4f, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x51,
	0x4f, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x51, 0x4f, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x52, 0x52, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x51, 0x4f, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x52,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x4f, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x5f,
	0x57, 0x44, 0x52, 0x52, 0x10, 0x04, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9c, 0x05, 0x0a, 0x10, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x46, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f,
	0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x74, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x74, 0x61, 0x67, 0x37, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72,
	0x74, 0x61, 0x67, 0x37, 0x45, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x74, 0x61, 0x67, 0x37, 0x5f, 0x6c, 0x61, 0x67, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x72, 0x74, 0x61, 0x67, 0x37, 0x4c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x52, 0x5a, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x41, 0x4d, 0x34, 0x10, 0x02, 0x22, 0x97, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xd6, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0xd7, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41,
	0x43, 0x50, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x50,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x39,
	0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8d, 0x31, 0x0a, 0x0c, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x63,
	0x6d, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x63, 0x6d, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x4b, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x54, 0x6f, 0x4b, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f,
	0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f,
	0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5f, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54,
	0x6f, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x75, 0x0a, 0x1c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x18, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x1c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x74, 0x61, 0x67, 0x37, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x74,
	0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x17, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x74, 0x61, 0x67,
	0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x97, 0x02, 0x0a, 0x0d,
	0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a,
	0x11, 0x6b, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x6b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x11, 0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x70, 0x75, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x46, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x1a, 0xf6, 0x05, 0x0a, 0x0b, 0x42, 0x63, 0x6d, 0x52, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x6b, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x15, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x72, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x6b, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x50, 0x6b, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6b, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x50, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x64, 0x6d, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64,
	0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0xda, 0x01, 0x0a, 0x13, 0x42, 0x63, 0x6d, 0x44, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x70, 0x43, 0x72, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x6b, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x50, 0x6b, 0x74, 0x50, 0x61, 0x72,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x1a, 0x7f, 0x0a,
	0x16, 0x44, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x63, 0x6d, 0x44, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x0d,
	0x0a, 0x0b, 0x42, 0x63, 0x6d, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xda, 0x03,
	0x0a, 0x12, 0x42, 0x63, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x1a, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0x62, 0x0a, 0x18, 0x42, 0x63, 0x6d, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x50, 0x70,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x43,
	0x6f, 0x73, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xdf, 0x05, 0x0a, 0x0f, 0x42,
	0x63, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x68, 0x64, 0x72, 0x6d, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x48, 0x64, 0x72, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x69, 0x6e, 0x1a, 0x8e, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x4e,
	0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x69, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x67, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x70,
	0x67, 0x5f, 0x68, 0x64, 0x72, 0x6d, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x67, 0x48, 0x64,
	0x72, 0x6d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x70, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x67,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x1a, 0x9e, 0x02, 0x0a, 0x0a,
	0x43, 0x6f, 0x73, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x71, 0x4e, 0x75, 0x6d, 0x12,
	0x13, 0x0a, 0x05, 0x71, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x71, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x71, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x3a, 0x0a, 0x1a, 0x71, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x71, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x65, 0x6c, 0x6c, 0x1a, 0xba, 0x13, 0x0a,
	0x12, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x75, 0x0a, 0x16, 0x6d, 0x61,
	0x63, 0x72, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x6d, 0x61,
	0x63, 0x72, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x68, 0x0a, 0x10, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x65, 0x63, 0x6d,
	0x70, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x0f, 0x6c,
	0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0xfe, 0x02, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37,
	0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x0c,
	0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63,
	0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x30, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x79,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61,
	0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6c,
	0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d,
	0x69, 0x61, 0x6c, 0x31, 0x1a, 0xaf, 0x04, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0a,
	0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52,
	0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x79, 0x6e,
	0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12, 0x71, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37,
	0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x72, 0x6f,
	0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x73, 0x62, 0x5f, 0x31, 0x36, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x4d, 0x73, 0x62, 0x31, 0x36, 0x62, 0x69, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x1a, 0xbb, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75,
	0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x73, 0x75, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xc5, 0x03, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x30, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63,
	0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x30, 0x12, 0x70, 0x0a, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x63, 0x6d, 0x52, 0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x1a, 0x54, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x22, 0xbc,
	0x01, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x52, 0x43, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x31, 0x36, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x10, 0x08, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x48, 0x49, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x34, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x10, 0x09, 0x22, 0x36, 0x0a,
	0x09, 0x48, 0x61, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x54, 0x41, 0x47, 0x37, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x54, 0x41,
	0x47, 0x37, 0x42, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x53, 0x75, 0x62,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x54, 0x41, 0x47, 0x37, 0x41, 0x30, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x41,
	0x47, 0x37, 0x42, 0x30, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x41, 0x47, 0x37, 0x41,
	0x31, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x41, 0x47, 0x37, 0x42, 0x31, 0x10, 0x04,
	0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x4e,
	0x4f, 0x4d, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x58, 0x4f,
	0x52, 0x31, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x58,
	0x4f, 0x52, 0x32, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x58, 0x4f, 0x52, 0x34, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x58, 0x4f, 0x52, 0x38, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x43, 0x49, 0x54, 0x54,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x4f, 0x52, 0x31, 0x36, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x4c, 0x4f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x48, 0x49, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x48, 0x49, 0x10, 0x0b, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x4b, 0x4f, 0x4f, 0x50, 0x4d, 0x41, 0x4e, 0x5f, 0x4c,
	0x4f, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x4b, 0x4f, 0x4f,
	0x50, 0x4d, 0x41, 0x4e, 0x5f, 0x48, 0x49, 0x10, 0x0d, 0x1a, 0x6e, 0x0a, 0x17, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x54, 0x6f, 0x4b, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x63, 0x6d, 0x4b, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x15, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x63, 0x6d, 0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54,
	0x6f, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x54, 0x78,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x78, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63,
	0x6d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x19, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x78, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x74, 0x61, 0x67, 0x37,
	0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x63, 0x6d, 0x52,
	0x74, 0x61, 0x67, 0x37, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x12, 0x42, 0x63, 0x6d,
	0x4b, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x42, 0x43, 0x4d, 0x5f, 0x4b, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x46,
	0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x43, 0x4d, 0x5f, 0x4b, 0x4e, 0x45, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x46, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x43, 0x4d, 0x5f,
	0x4b, 0x4e, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x22, 0xff, 0x07, 0x0a, 0x0c, 0x54, 0x6f,
	0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x1e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x54, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf4, 0x05, 0x0a, 0x13, 0x42, 0x66, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x81, 0x01, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x54, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0xc7, 0x03, 0x0a, 0x16, 0x42, 0x66, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79,
	0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x73, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x6f,
	0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x66, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x5b,
	0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x50, 0x70, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x09, 0x42,
	0x79, 0x74, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x42, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x8e, 0x01,
	0x0a, 0x1a, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x6f, 0x66, 0x69,
	0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x50,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7b,
	0x0a, 0x1e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x54, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x66, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x61, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0c,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x54, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x74, 0x6f, 0x66, 0x69, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe5, 0x03, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x12, 0x27, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x0b, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x62, 0x0a, 0x1a, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x18, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0d, 0x53, 0x66, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x70, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x31, 0x30, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x31, 0x30, 0x30, 0x12, 0x11, 0x0a, 0x04, 0x66, 0x5f,
	0x31, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x66, 0x31, 0x67, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x5f, 0x31, 0x30, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x31,
	0x30, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x34, 0x30, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x34, 0x30, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x31, 0x30, 0x30,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x31, 0x30, 0x30, 0x67, 0x22, 0xbb,
	0x01, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x43, 0x61, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x65, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67,
	0x65, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x07, 0x50, 0x73, 0x75, 0x43, 0x61, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x74, 0x56, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x67, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x74, 0x49, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x49, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x75, 0x74, 0x22,
	0xd0, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x65, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x65,
	0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x07, 0x4c, 0x65, 0x64, 0x43, 0x61, 0x70, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x66, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x61, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x6c, 0x69, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6c,
	0x75, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x72, 0x70, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x75, 0x72,
	0x70, 0x6c, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xb0, 0x02, 0x0a, 0x12,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x08, 0x68, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x48, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x68, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd7,
	0x03, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xa9, 0x01, 0x0a,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x22,
	0x2c, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x04,
	0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x46, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x48, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x4f, 0x0a, 0x13, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x0f,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x44, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x46, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x24, 0x0a, 0x09, 0x53, 0x64, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x11, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x1a, 0x87, 0x11, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x59, 0x0a, 0x14, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6c,
	0x61, 0x63, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x58, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x73, 0x0a, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52,
	0x1d, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x58,
	0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x6f, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x18, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69,
	0x6f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x6e, 0x65, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x66, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x18,
	0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x64,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x64, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x1a, 0x1f, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x09,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x1a, 0x58, 0x0a, 0x09, 0x50, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x1a, 0x5e, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcd,
	0x0c, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x12, 0x4f, 0x0a, 0x14, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x6c,
	0x61, 0x63, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x5d, 0x0a, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6f,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x14, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x49, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6e,
	0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40,
	0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x66, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x46, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x64, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x64, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x64, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x0a, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xe9, 0x09, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x43,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x12, 0x75, 0x0a, 0x19, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xc0, 0x05, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68,
	0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x61, 0x63,
	0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c,
	0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c,
	0x61, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x4f, 0x0a, 0x14,
	0x6c, 0x61, 0x63, 0x70, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61, 0x63, 0x70, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a,
	0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x65, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61, 0x6c, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x56, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x68, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x06, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x09, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x1a, 0xc8, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x68, 0x61,
	0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x7e, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x49, 0x4d, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x49,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x52, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45,
	0x10, 0x02, 0x2a, 0xcb, 0x02, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x54, 0x52, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x52,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x32, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x54, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x4d, 0x41, 0x48, 0x41, 0x57, 0x4b,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x4f, 0x4d, 0x41, 0x48, 0x41, 0x57, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x54, 0x4f, 0x4d, 0x41, 0x48, 0x41, 0x57, 0x4b, 0x32, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x4d, 0x41,
	0x48, 0x41, 0x57, 0x4b, 0x33, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x54, 0x5f, 0x4d,
	0x4c, 0x4e, 0x58, 0x5f, 0x53, 0x4e, 0x32, 0x37, 0x30, 0x30, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4c, 0x54, 0x5f, 0x50, 0x34, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x54, 0x5f, 0x4e, 0x50, 0x34, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x4c, 0x5f, 0x4e, 0x33, 0x30, 0x30, 0x30, 0x10, 0x0d, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x41, 0x52,
	0x45, 0x46, 0x4f, 0x4f, 0x54, 0x5f, 0x54, 0x4f, 0x46, 0x49, 0x4e, 0x4f, 0x10, 0x0e, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x4c, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x41,
	0x52, 0x45, 0x46, 0x4f, 0x4f, 0x54, 0x5f, 0x54, 0x4f, 0x46, 0x49, 0x4e, 0x4f, 0x32, 0x10, 0x0f,
	0x2a, 0x79, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x45, 0x31, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x31, 0x10,
	0x15, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x32, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46,
	0x33, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x34, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x43, 0x31, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x43, 0x30, 0x10, 0x1a, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x45, 0x30, 0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4c, 0x51, 0x31, 0x10,
	0x1d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4c, 0x51, 0x32, 0x10, 0x1e, 0x2a, 0x55, 0x0a, 0x07, 0x46,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x03, 0x2a, 0x62, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x0a, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x8c, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x55, 0x4e, 0x4b,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x10, 0x03, 0x2a, 0xc0, 0x01, 0x0a,
	0x07, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x57, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x57, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x10, 0x07, 0x2a,
	0x54, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x42, 0x41, 0x44, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x49, 0x4e,
	0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x04, 0x2a, 0xf8, 0x01, 0x0a, 0x07,
	0x4c, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x46, 0x50, 0x47, 0x41, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x45, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x50, 0x47, 0x41, 0x5f, 0x47, 0x5f, 0x52,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x50, 0x47, 0x41, 0x5f, 0x47, 0x52, 0x5f,
	0x47, 0x59, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x50, 0x47, 0x41, 0x5f, 0x47,
	0x52, 0x5f, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x50, 0x47, 0x41, 0x5f,
	0x47, 0x5f, 0x52, 0x5f, 0x59, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x50, 0x49, 0x4f,
	0x5f, 0x47, 0x5f, 0x52, 0x10, 0x07, 0x2a, 0x5e, 0x0a, 0x08, 0x4c, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x41,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xb7, 0x02, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x31, 0x47, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x43, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x43, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x50, 0x5f, 0x43, 0x41, 0x47, 0x45, 0x10, 0x05,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x46, 0x50, 0x5f, 0x43, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x57, 0x44, 0x4d, 0x10, 0x08,
	0x2a, 0xba, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53,
	0x46, 0x50, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x43, 0x4f, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x46, 0x50, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x53, 0x4d, 0x34,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x46, 0x50, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x46, 0x50, 0x5f, 0x43, 0x4f, 0x50,
	0x50, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x50, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53,
	0x46, 0x50, 0x5f, 0x43, 0x53, 0x52, 0x34, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x43, 0x4c, 0x52,
	0x34, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x43, 0x43, 0x52, 0x34, 0x10, 0x0e, 0x2a, 0x85, 0x01,
	0x0a, 0x07, 0x53, 0x66, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x46, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x46, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x50, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x46, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53,
	0x46, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x46, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x46, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x32, 0x38, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x46, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46,
	0x50, 0x32, 0x38, 0x10, 0x05, 0x2a, 0x90, 0x01, 0x0a, 0x0d, 0x53, 0x66, 0x70, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x46, 0x50, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x46, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x52, 0x34, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x46, 0x50, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x47, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x46, 0x50, 0x5f,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x47, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x53, 0x58, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x06, 0x46, 0x61, 0x6e, 0x44,
	0x69, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x44,
	0x49, 0x52, 0x5f, 0x42, 0x32, 0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f,
	0x44, 0x49, 0x52, 0x5f, 0x46, 0x32, 0x42, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x07, 0x50, 0x73, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x53, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x53,
	0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x53, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x43, 0x31, 0x32, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x53, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x43, 0x34, 0x38, 0x10,
	0x03, 0x2a, 0x99, 0x03, 0x0a, 0x07, 0x4c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x45, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x45, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4c, 0x49,
	0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x45,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x0b, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0d, 0x12, 0x1a,
	0x0a, 0x16, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x5f,
	0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x0f, 0x12,
	0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x50,
	0x4c, 0x45, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x42, 0x0a, 0x5a,
	0x05, 0x67, 0x6f, 0x2f, 0x70, 0x34, 0x80, 0x01, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 32)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_common_proto_goTypes = []interface{}{
	(OperationMode)(0),         // 0: stratum.hal.OperationMode
	(TriState)(0),              // 1: stratum.hal.TriState
	(Platform)(0),              // 2: stratum.hal.Platform
	(TrafficClass)(0),          // 3: stratum.hal.TrafficClass
	(FecMode)(0),               // 4: stratum.hal.FecMode
	(PortState)(0),             // 5: stratum.hal.PortState
	(TrunkState)(0),            // 6: stratum.hal.TrunkState
	(TrunkMemberBlockState)(0), // 7: stratum.hal.TrunkMemberBlockState
	(LoopbackState)(0),         // 8: stratum.hal.LoopbackState
	(AdminState)(0),            // 9: stratum.hal.AdminState
	(HwState)(0),               // 10: stratum.hal.HwState
	(HealthState)(0),           // 11: stratum.hal.HealthState
	(LedState)(0),              // 12: stratum.hal.LedState
	(LedType)(0),               // 13: stratum.hal.LedType
	(LedColor)(0),              // 14: stratum.hal.LedColor
	(PhysicalPortType)(0),      // 15: stratum.hal.PhysicalPortType
	(MediaType)(0),             // 16: stratum.hal.MediaType
	(SfpType)(0),               // 17: stratum.hal.SfpType
	(SfpModuleType)(0),         // 18: stratum.hal.SfpModuleType
	(FanDir)(0),                // 19: stratum.hal.FanDir
	(PsuType)(0),               // 20: stratum.hal.PsuType
	(LedMode)(0),               // 21: stratum.hal.LedMode
	(ChassisConfigParams_TuntapConfig_Mode)(0),                   // 22: stratum.hal.ChassisConfigParams.TuntapConfig.Mode
	(NodeConfigParams_QosConfig_SchedulingMode)(0),               // 23: stratum.hal.NodeConfigParams.QosConfig.SchedulingMode
	(PortConfigParams_ModulationType)(0),                         // 24: stratum.hal.PortConfigParams.ModulationType
	(TrunkPort_TrunkType)(0),                                     // 25: stratum.hal.TrunkPort.TrunkType
	(GoogleConfig_BcmKnetIntfPurpose)(0),                         // 26: stratum.hal.GoogleConfig.BcmKnetIntfPurpose
	(GoogleConfig_BcmRtag7HashConfig_HashField)(0),               // 27: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashField
	(GoogleConfig_BcmRtag7HashConfig_HashBlock)(0),               // 28: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashBlock
	(GoogleConfig_BcmRtag7HashConfig_HashSubBlock)(0),            // 29: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashSubBlock
	(GoogleConfig_BcmRtag7HashConfig_Polynomial)(0),              // 30: stratum.hal.GoogleConfig.BcmRtag7HashConfig.Polynomial
	(Alarm_Severity)(0),                                          // 31: stratum.hal.Alarm.Severity
	(*ChassisConfigParams)(nil),                                  // 32: stratum.hal.ChassisConfigParams
	(*NodeFlowParams)(nil),                                       // 33: stratum.hal.NodeFlowParams
	(*NodeConfigParams)(nil),                                     // 34: stratum.hal.NodeConfigParams
	(*PortFlowParams)(nil),                                       // 35: stratum.hal.PortFlowParams
	(*PortConfigParams)(nil),                                     // 36: stratum.hal.PortConfigParams
	(*Chassis)(nil),                                              // 37: stratum.hal.Chassis
	(*Node)(nil),                                                 // 38: stratum.hal.Node
	(*SingletonPort)(nil),                                        // 39: stratum.hal.SingletonPort
	(*OpticalNetworkInterface)(nil),                              // 40: stratum.hal.OpticalNetworkInterface
	(*TrunkPort)(nil),                                            // 41: stratum.hal.TrunkPort
	(*PortGroup)(nil),                                            // 42: stratum.hal.PortGroup
	(*GoogleConfig)(nil),                                         // 43: stratum.hal.GoogleConfig
	(*TofinoConfig)(nil),                                         // 44: stratum.hal.TofinoConfig
	(*VendorConfig)(nil),                                         // 45: stratum.hal.VendorConfig
	(*ChassisConfig)(nil),                                        // 46: stratum.hal.ChassisConfig
	(*SfpModuleCaps)(nil),                                        // 47: stratum.hal.SfpModuleCaps
	(*FanCaps)(nil),                                              // 48: stratum.hal.FanCaps
	(*PsuCaps)(nil),                                              // 49: stratum.hal.PsuCaps
	(*ThermalCaps)(nil),                                          // 50: stratum.hal.ThermalCaps
	(*LedCaps)(nil),                                              // 51: stratum.hal.LedCaps
	(*FrontPanelPortInfo)(nil),                                   // 52: stratum.hal.FrontPanelPortInfo
	(*OpticalTransceiverInfo)(nil),                               // 53: stratum.hal.OpticalTransceiverInfo
	(*OperStatus)(nil),                                           // 54: stratum.hal.OperStatus
	(*LoopbackStatus)(nil),                                       // 55: stratum.hal.LoopbackStatus
	(*AdminStatus)(nil),                                          // 56: stratum.hal.AdminStatus
	(*MacAddress)(nil),                                           // 57: stratum.hal.MacAddress
	(*PortSpeed)(nil),                                            // 58: stratum.hal.PortSpeed
	(*SystemPriority)(nil),                                       // 59: stratum.hal.SystemPriority
	(*PortCounters)(nil),                                         // 60: stratum.hal.PortCounters
	(*PortQosCounters)(nil),                                      // 61: stratum.hal.PortQosCounters
	(*Alarm)(nil),                                                // 62: stratum.hal.Alarm
	(*NodeInfo)(nil),                                             // 63: stratum.hal.NodeInfo
	(*NodeDebugInfo)(nil),                                        // 64: stratum.hal.NodeDebugInfo
	(*ForwardingViability)(nil),                                  // 65: stratum.hal.ForwardingViability
	(*HealthIndicator)(nil),                                      // 66: stratum.hal.HealthIndicator
	(*AutonegotiationStatus)(nil),                                // 67: stratum.hal.AutonegotiationStatus
	(*HardwarePort)(nil),                                         // 68: stratum.hal.HardwarePort
	(*FecStatus)(nil),                                            // 69: stratum.hal.FecStatus
	(*SdnPortId)(nil),                                            // 70: stratum.hal.SdnPortId
	(*DataRequest)(nil),                                          // 71: stratum.hal.DataRequest
	(*DataResponse)(nil),                                         // 72: stratum.hal.DataResponse
	(*SetRequest)(nil),                                           // 73: stratum.hal.SetRequest
	(*ChassisConfigParams_LacpConfig)(nil),                       // 74: stratum.hal.ChassisConfigParams.LacpConfig
	(*ChassisConfigParams_NtpConfig)(nil),                        // 75: stratum.hal.ChassisConfigParams.NtpConfig
	(*ChassisConfigParams_PowerConfig)(nil),                      // 76: stratum.hal.ChassisConfigParams.PowerConfig
	(*ChassisConfigParams_FanConfig)(nil),                        // 77: stratum.hal.ChassisConfigParams.FanConfig
	(*ChassisConfigParams_TuntapConfig)(nil),                     // 78: stratum.hal.ChassisConfigParams.TuntapConfig
	(*NodeConfigParams_VlanConfig)(nil),                          // 79: stratum.hal.NodeConfigParams.VlanConfig
	(*NodeConfigParams_L2Config)(nil),                            // 80: stratum.hal.NodeConfigParams.L2Config
	(*NodeConfigParams_QosConfig)(nil),                           // 81: stratum.hal.NodeConfigParams.QosConfig
	(*NodeConfigParams_QosConfig_SchedulerConfig)(nil),           // 82: stratum.hal.NodeConfigParams.QosConfig.SchedulerConfig
	(*NodeConfigParams_QosConfig_Dot1PMapping)(nil),              // 83: stratum.hal.NodeConfigParams.QosConfig.Dot1pMapping
	(*NodeConfigParams_QosConfig_DscpMapping)(nil),               // 84: stratum.hal.NodeConfigParams.QosConfig.DscpMapping
	(*NodeConfigParams_QosConfig_TrafficClassMapping)(nil),       // 85: stratum.hal.NodeConfigParams.QosConfig.TrafficClassMapping
	(*NodeConfigParams_QosConfig_PriorityGroupMapping)(nil),      // 86: stratum.hal.NodeConfigParams.QosConfig.PriorityGroupMapping
	(*NodeConfigParams_QosConfig_CosqMapping)(nil),               // 87: stratum.hal.NodeConfigParams.QosConfig.CosqMapping
	(*NodeConfigParams_QosConfig_IngressServicePoolMapping)(nil), // 88: stratum.hal.NodeConfigParams.QosConfig.IngressServicePoolMapping
	(*NodeConfigParams_QosConfig_EgressServicePoolMapping)(nil),  // 89: stratum.hal.NodeConfigParams.QosConfig.EgressServicePoolMapping
	(*PortConfigParams_HashConfig)(nil),                          // 90: stratum.hal.PortConfigParams.HashConfig
	(*PortGroup_PortGroupMember)(nil),                            // 91: stratum.hal.PortGroup.PortGroupMember
	(*GoogleConfig_BcmKnetConfig)(nil),                           // 92: stratum.hal.GoogleConfig.BcmKnetConfig
	(*GoogleConfig_BcmRxConfig)(nil),                             // 93: stratum.hal.GoogleConfig.BcmRxConfig
	(*GoogleConfig_BcmTxConfig)(nil),                             // 94: stratum.hal.GoogleConfig.BcmTxConfig
	(*GoogleConfig_BcmRateLimitConfig)(nil),                      // 95: stratum.hal.GoogleConfig.BcmRateLimitConfig
	(*GoogleConfig_BcmBufferConfig)(nil),                         // 96: stratum.hal.GoogleConfig.BcmBufferConfig
	(*GoogleConfig_BcmRtag7HashConfig)(nil),                      // 97: stratum.hal.GoogleConfig.BcmRtag7HashConfig
	nil,                                                          // 98: stratum.hal.GoogleConfig.NodeIdToKnetConfigEntry
	nil,                                                          // 99: stratum.hal.GoogleConfig.NodeIdToRxConfigEntry
	nil,                                                          // 100: stratum.hal.GoogleConfig.NodeIdToTxConfigEntry
	nil,                                                          // 101: stratum.hal.GoogleConfig.NodeIdToRateLimitConfigEntry
	nil,                                                          // 102: stratum.hal.GoogleConfig.NodeIdToBufferConfigEntry
	nil,                                                          // 103: stratum.hal.GoogleConfig.NodeIdToRtag7HashConfigEntry
	(*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig)(nil),         // 104: stratum.hal.GoogleConfig.BcmKnetConfig.BcmKnetIntfConfig
	(*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig)(nil),         // 105: stratum.hal.GoogleConfig.BcmRxConfig.BcmDmaChannelConfig
	nil, // 106: stratum.hal.GoogleConfig.BcmRxConfig.DmaChannelConfigsEntry
	(*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig)(nil), // 107: stratum.hal.GoogleConfig.BcmRateLimitConfig.BcmPerCosRateLimitConfig
	nil, // 108: stratum.hal.GoogleConfig.BcmRateLimitConfig.PerCosRateLimitConfigsEntry
	(*GoogleConfig_BcmBufferConfig_ServicePoolConfig)(nil),                  // 109: stratum.hal.GoogleConfig.BcmBufferConfig.ServicePoolConfig
	(*GoogleConfig_BcmBufferConfig_PriorityGroupConig)(nil),                 // 110: stratum.hal.GoogleConfig.BcmBufferConfig.PriorityGroupConig
	(*GoogleConfig_BcmBufferConfig_CosqConfig)(nil),                         // 111: stratum.hal.GoogleConfig.BcmBufferConfig.CosqConfig
	(*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig)(nil),              // 112: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig
	(*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig)(nil),             // 113: stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig
	(*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig)(nil),               // 114: stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig
	(*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig)(nil), // 115: stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig.TableConfig
	(*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig)(nil),   // 116: stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.TableConfig
	(*TofinoConfig_BfPortShapingConfig)(nil),                                // 117: stratum.hal.TofinoConfig.BfPortShapingConfig
	nil,                                                                     // 118: stratum.hal.TofinoConfig.NodeIdToPortShapingConfigEntry
	(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig)(nil),         // 119: stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig
	nil, // 120: stratum.hal.TofinoConfig.BfPortShapingConfig.PerPortShapingConfigsEntry
	(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape)(nil), // 121: stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.PacketShape
	(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape)(nil),   // 122: stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.ByteShape
	(*OpticalTransceiverInfo_Power)(nil),                                        // 123: stratum.hal.OpticalTransceiverInfo.Power
	(*DataRequest_Request)(nil),                                                 // 124: stratum.hal.DataRequest.Request
	(*DataRequest_Request_Port)(nil),                                            // 125: stratum.hal.DataRequest.Request.Port
	(*DataRequest_Request_Node)(nil),                                            // 126: stratum.hal.DataRequest.Request.Node
	(*DataRequest_Request_Chassis)(nil),                                         // 127: stratum.hal.DataRequest.Request.Chassis
	(*DataRequest_Request_PortQueue)(nil),                                       // 128: stratum.hal.DataRequest.Request.PortQueue
	(*DataRequest_Request_OpticalNetworkInterface)(nil),                         // 129: stratum.hal.DataRequest.Request.OpticalNetworkInterface
	(*SetRequest_Request)(nil),                                                  // 130: stratum.hal.SetRequest.Request
	(*SetRequest_Request_Port)(nil),                                             // 131: stratum.hal.SetRequest.Request.Port
	(*SetRequest_Request_Node)(nil),                                             // 132: stratum.hal.SetRequest.Request.Node
	(*SetRequest_Request_Chassis)(nil),                                          // 133: stratum.hal.SetRequest.Request.Chassis
	(*SetRequest_Request_OpticalNetworkInterface)(nil),                          // 134: stratum.hal.SetRequest.Request.OpticalNetworkInterface
}
var file_common_proto_depIdxs = []int32{
	74,  // 0: stratum.hal.ChassisConfigParams.lacp_config:type_name -> stratum.hal.ChassisConfigParams.LacpConfig
	75,  // 1: stratum.hal.ChassisConfigParams.net_config:type_name -> stratum.hal.ChassisConfigParams.NtpConfig
	76,  // 2: stratum.hal.ChassisConfigParams.power_config:type_name -> stratum.hal.ChassisConfigParams.PowerConfig
	77,  // 3: stratum.hal.ChassisConfigParams.fan_configs:type_name -> stratum.hal.ChassisConfigParams.FanConfig
	78,  // 4: stratum.hal.ChassisConfigParams.tuntap_configs:type_name -> stratum.hal.ChassisConfigParams.TuntapConfig
	79,  // 5: stratum.hal.NodeConfigParams.vlan_configs:type_name -> stratum.hal.NodeConfigParams.VlanConfig
	80,  // 6: stratum.hal.NodeConfigParams.l2_config:type_name -> stratum.hal.NodeConfigParams.L2Config
	81,  // 7: stratum.hal.NodeConfigParams.qos_config:type_name -> stratum.hal.NodeConfigParams.QosConfig
	9,   // 8: stratum.hal.PortConfigParams.admin_state:type_name -> stratum.hal.AdminState
	1,   // 9: stratum.hal.PortConfigParams.autoneg:type_name -> stratum.hal.TriState
	90,  // 10: stratum.hal.PortConfigParams.hash_config:type_name -> stratum.hal.PortConfigParams.HashConfig
	24,  // 11: stratum.hal.PortConfigParams.modulation_type:type_name -> stratum.hal.PortConfigParams.ModulationType
	4,   // 12: stratum.hal.PortConfigParams.fec_mode:type_name -> stratum.hal.FecMode
	8,   // 13: stratum.hal.PortConfigParams.loopback_mode:type_name -> stratum.hal.LoopbackState
	2,   // 14: stratum.hal.Chassis.platform:type_name -> stratum.hal.Platform
	32,  // 15: stratum.hal.Chassis.config_params:type_name -> stratum.hal.ChassisConfigParams
	33,  // 16: stratum.hal.Node.flow_params:type_name -> stratum.hal.NodeFlowParams
	34,  // 17: stratum.hal.Node.config_params:type_name -> stratum.hal.NodeConfigParams
	35,  // 18: stratum.hal.SingletonPort.flow_params:type_name -> stratum.hal.PortFlowParams
	36,  // 19: stratum.hal.SingletonPort.config_params:type_name -> stratum.hal.PortConfigParams
	25,  // 20: stratum.hal.TrunkPort.type:type_name -> stratum.hal.TrunkPort.TrunkType
	35,  // 21: stratum.hal.TrunkPort.flow_params:type_name -> stratum.hal.PortFlowParams
	36,  // 22: stratum.hal.TrunkPort.config_params:type_name -> stratum.hal.PortConfigParams
	91,  // 23: stratum.hal.PortGroup.members:type_name -> stratum.hal.PortGroup.PortGroupMember
	98,  // 24: stratum.hal.GoogleConfig.node_id_to_knet_config:type_name -> stratum.hal.GoogleConfig.NodeIdToKnetConfigEntry
	99,  // 25: stratum.hal.GoogleConfig.node_id_to_rx_config:type_name -> stratum.hal.GoogleConfig.NodeIdToRxConfigEntry
	100, // 26: stratum.hal.GoogleConfig.node_id_to_tx_config:type_name -> stratum.hal.GoogleConfig.NodeIdToTxConfigEntry
	101, // 27: stratum.hal.GoogleConfig.node_id_to_rate_limit_config:type_name -> stratum.hal.GoogleConfig.NodeIdToRateLimitConfigEntry
	102, // 28: stratum.hal.GoogleConfig.node_id_to_buffer_config:type_name -> stratum.hal.GoogleConfig.NodeIdToBufferConfigEntry
	103, // 29: stratum.hal.GoogleConfig.node_id_to_rtag7_hash_config:type_name -> stratum.hal.GoogleConfig.NodeIdToRtag7HashConfigEntry
	118, // 30: stratum.hal.TofinoConfig.node_id_to_port_shaping_config:type_name -> stratum.hal.TofinoConfig.NodeIdToPortShapingConfigEntry
	43,  // 31: stratum.hal.VendorConfig.google_config:type_name -> stratum.hal.GoogleConfig
	44,  // 32: stratum.hal.VendorConfig.tofino_config:type_name -> stratum.hal.TofinoConfig
	37,  // 33: stratum.hal.ChassisConfig.chassis:type_name -> stratum.hal.Chassis
	38,  // 34: stratum.hal.ChassisConfig.nodes:type_name -> stratum.hal.Node
	39,  // 35: stratum.hal.ChassisConfig.singleton_ports:type_name -> stratum.hal.SingletonPort
	41,  // 36: stratum.hal.ChassisConfig.trunk_ports:type_name -> stratum.hal.TrunkPort
	42,  // 37: stratum.hal.ChassisConfig.port_groups:type_name -> stratum.hal.PortGroup
	45,  // 38: stratum.hal.ChassisConfig.vendor_config:type_name -> stratum.hal.VendorConfig
	40,  // 39: stratum.hal.ChassisConfig.optical_network_interfaces:type_name -> stratum.hal.OpticalNetworkInterface
	15,  // 40: stratum.hal.FrontPanelPortInfo.physical_port_type:type_name -> stratum.hal.PhysicalPortType
	16,  // 41: stratum.hal.FrontPanelPortInfo.media_type:type_name -> stratum.hal.MediaType
	10,  // 42: stratum.hal.FrontPanelPortInfo.hw_state:type_name -> stratum.hal.HwState
	123, // 43: stratum.hal.OpticalTransceiverInfo.input_power:type_name -> stratum.hal.OpticalTransceiverInfo.Power
	123, // 44: stratum.hal.OpticalTransceiverInfo.output_power:type_name -> stratum.hal.OpticalTransceiverInfo.Power
	5,   // 45: stratum.hal.OperStatus.state:type_name -> stratum.hal.PortState
	8,   // 46: stratum.hal.LoopbackStatus.state:type_name -> stratum.hal.LoopbackState
	9,   // 47: stratum.hal.AdminStatus.state:type_name -> stratum.hal.AdminState
	31,  // 48: stratum.hal.Alarm.severity:type_name -> stratum.hal.Alarm.Severity
	7,   // 49: stratum.hal.ForwardingViability.state:type_name -> stratum.hal.TrunkMemberBlockState
	11,  // 50: stratum.hal.HealthIndicator.state:type_name -> stratum.hal.HealthState
	1,   // 51: stratum.hal.AutonegotiationStatus.state:type_name -> stratum.hal.TriState
	4,   // 52: stratum.hal.FecStatus.mode:type_name -> stratum.hal.FecMode
	124, // 53: stratum.hal.DataRequest.requests:type_name -> stratum.hal.DataRequest.Request
	54,  // 54: stratum.hal.DataResponse.oper_status:type_name -> stratum.hal.OperStatus
	56,  // 55: stratum.hal.DataResponse.admin_status:type_name -> stratum.hal.AdminStatus
	57,  // 56: stratum.hal.DataResponse.mac_address:type_name -> stratum.hal.MacAddress
	58,  // 57: stratum.hal.DataResponse.port_speed:type_name -> stratum.hal.PortSpeed
	58,  // 58: stratum.hal.DataResponse.negotiated_port_speed:type_name -> stratum.hal.PortSpeed
	57,  // 59: stratum.hal.DataResponse.lacp_router_mac:type_name -> stratum.hal.MacAddress
	59,  // 60: stratum.hal.DataResponse.lacp_system_priority:type_name -> stratum.hal.SystemPriority
	60,  // 61: stratum.hal.DataResponse.port_counters:type_name -> stratum.hal.PortCounters
	62,  // 62: stratum.hal.DataResponse.memory_error_alarm:type_name -> stratum.hal.Alarm
	62,  // 63: stratum.hal.DataResponse.flow_programming_exception_alarm:type_name -> stratum.hal.Alarm
	61,  // 64: stratum.hal.DataResponse.port_qos_counters:type_name -> stratum.hal.PortQosCounters
	64,  // 65: stratum.hal.DataResponse.node_packetio_debug_info:type_name -> stratum.hal.NodeDebugInfo
	65,  // 66: stratum.hal.DataResponse.forwarding_viability:type_name -> stratum.hal.ForwardingViability
	66,  // 67: stratum.hal.DataResponse.health_indicator:type_name -> stratum.hal.HealthIndicator
	67,  // 68: stratum.hal.DataResponse.autoneg_status:type_name -> stratum.hal.AutonegotiationStatus
	52,  // 69: stratum.hal.DataResponse.front_panel_port_info:type_name -> stratum.hal.FrontPanelPortInfo
	68,  // 70: stratum.hal.DataResponse.hardware_port:type_name -> stratum.hal.HardwarePort
	69,  // 71: stratum.hal.DataResponse.fec_status:type_name -> stratum.hal.FecStatus
	53,  // 72: stratum.hal.DataResponse.optical_transceiver_info:type_name -> stratum.hal.OpticalTransceiverInfo
	55,  // 73: stratum.hal.DataResponse.loopback_status:type_name -> stratum.hal.LoopbackStatus
	63,  // 74: stratum.hal.DataResponse.node_info:type_name -> stratum.hal.NodeInfo
	70,  // 75: stratum.hal.DataResponse.sdn_port_id:type_name -> stratum.hal.SdnPortId
	130, // 76: stratum.hal.SetRequest.requests:type_name -> stratum.hal.SetRequest.Request
	22,  // 77: stratum.hal.ChassisConfigParams.TuntapConfig.mode:type_name -> stratum.hal.ChassisConfigParams.TuntapConfig.Mode
	23,  // 78: stratum.hal.NodeConfigParams.QosConfig.scheduling_mode:type_name -> stratum.hal.NodeConfigParams.QosConfig.SchedulingMode
	82,  // 79: stratum.hal.NodeConfigParams.QosConfig.scheduling_config:type_name -> stratum.hal.NodeConfigParams.QosConfig.SchedulerConfig
	83,  // 80: stratum.hal.NodeConfigParams.QosConfig.dot1p_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.Dot1pMapping
	84,  // 81: stratum.hal.NodeConfigParams.QosConfig.dscp_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.DscpMapping
	85,  // 82: stratum.hal.NodeConfigParams.QosConfig.traffic_class_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.TrafficClassMapping
	87,  // 83: stratum.hal.NodeConfigParams.QosConfig.cosq_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.CosqMapping
	86,  // 84: stratum.hal.NodeConfigParams.QosConfig.priority_group_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.PriorityGroupMapping
	88,  // 85: stratum.hal.NodeConfigParams.QosConfig.ingress_service_pool_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.IngressServicePoolMapping
	89,  // 86: stratum.hal.NodeConfigParams.QosConfig.egress_service_pool_mapping:type_name -> stratum.hal.NodeConfigParams.QosConfig.EgressServicePoolMapping
	3,   // 87: stratum.hal.NodeConfigParams.QosConfig.TrafficClassMapping.traffic_class:type_name -> stratum.hal.TrafficClass
	104, // 88: stratum.hal.GoogleConfig.BcmKnetConfig.knet_intf_configs:type_name -> stratum.hal.GoogleConfig.BcmKnetConfig.BcmKnetIntfConfig
	106, // 89: stratum.hal.GoogleConfig.BcmRxConfig.dma_channel_configs:type_name -> stratum.hal.GoogleConfig.BcmRxConfig.DmaChannelConfigsEntry
	108, // 90: stratum.hal.GoogleConfig.BcmRateLimitConfig.per_cos_rate_limit_configs:type_name -> stratum.hal.GoogleConfig.BcmRateLimitConfig.PerCosRateLimitConfigsEntry
	112, // 91: stratum.hal.GoogleConfig.BcmRtag7HashConfig.hash_function_configs:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig
	113, // 92: stratum.hal.GoogleConfig.BcmRtag7HashConfig.macro_flow_hash_config:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig
	114, // 93: stratum.hal.GoogleConfig.BcmRtag7HashConfig.ecmp_hash_config:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig
	114, // 94: stratum.hal.GoogleConfig.BcmRtag7HashConfig.lag_hash_config:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig
	92,  // 95: stratum.hal.GoogleConfig.NodeIdToKnetConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmKnetConfig
	93,  // 96: stratum.hal.GoogleConfig.NodeIdToRxConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmRxConfig
	94,  // 97: stratum.hal.GoogleConfig.NodeIdToTxConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmTxConfig
	95,  // 98: stratum.hal.GoogleConfig.NodeIdToRateLimitConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmRateLimitConfig
	96,  // 99: stratum.hal.GoogleConfig.NodeIdToBufferConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmBufferConfig
	97,  // 100: stratum.hal.GoogleConfig.NodeIdToRtag7HashConfigEntry.value:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig
	26,  // 101: stratum.hal.GoogleConfig.BcmKnetConfig.BcmKnetIntfConfig.purpose:type_name -> stratum.hal.GoogleConfig.BcmKnetIntfPurpose
	105, // 102: stratum.hal.GoogleConfig.BcmRxConfig.DmaChannelConfigsEntry.value:type_name -> stratum.hal.GoogleConfig.BcmRxConfig.BcmDmaChannelConfig
	107, // 103: stratum.hal.GoogleConfig.BcmRateLimitConfig.PerCosRateLimitConfigsEntry.value:type_name -> stratum.hal.GoogleConfig.BcmRateLimitConfig.BcmPerCosRateLimitConfig
	28,  // 104: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig.block:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashBlock
	27,  // 105: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig.fields:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashField
	30,  // 106: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig.polynomial_0:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.Polynomial
	30,  // 107: stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashFunctionConfig.polynomial_1:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.Polynomial
	30,  // 108: stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig.polynomial:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.Polynomial
	115, // 109: stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig.table_configs:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig.TableConfig
	28,  // 110: stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.block:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashBlock
	116, // 111: stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.table_config_0:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.TableConfig
	116, // 112: stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.table_config_1:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.PerTypeHashConfig.TableConfig
	29,  // 113: stratum.hal.GoogleConfig.BcmRtag7HashConfig.MacroFlowHashConfig.TableConfig.sub_block:type_name -> stratum.hal.GoogleConfig.BcmRtag7HashConfig.HashSubBlock
	120, // 114: stratum.hal.TofinoConfig.BfPortShapingConfig.per_port_shaping_configs:type_name -> stratum.hal.TofinoConfig.BfPortShapingConfig.PerPortShapingConfigsEntry
	117, // 115: stratum.hal.TofinoConfig.NodeIdToPortShapingConfigEntry.value:type_name -> stratum.hal.TofinoConfig.BfPortShapingConfig
	121, // 116: stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.packet_shaping:type_name -> stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.PacketShape
	122, // 117: stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.byte_shaping:type_name -> stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig.ByteShape
	119, // 118: stratum.hal.TofinoConfig.BfPortShapingConfig.PerPortShapingConfigsEntry.value:type_name -> stratum.hal.TofinoConfig.BfPortShapingConfig.BfPerPortShapingConfig
	125, // 119: stratum.hal.DataRequest.Request.oper_status:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 120: stratum.hal.DataRequest.Request.admin_status:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 121: stratum.hal.DataRequest.Request.mac_address:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 122: stratum.hal.DataRequest.Request.port_speed:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 123: stratum.hal.DataRequest.Request.negotiated_port_speed:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 124: stratum.hal.DataRequest.Request.lacp_router_mac:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 125: stratum.hal.DataRequest.Request.lacp_system_priority:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 126: stratum.hal.DataRequest.Request.port_counters:type_name -> stratum.hal.DataRequest.Request.Port
	127, // 127: stratum.hal.DataRequest.Request.memory_error_alarm:type_name -> stratum.hal.DataRequest.Request.Chassis
	127, // 128: stratum.hal.DataRequest.Request.flow_programming_exception_alarm:type_name -> stratum.hal.DataRequest.Request.Chassis
	128, // 129: stratum.hal.DataRequest.Request.port_qos_counters:type_name -> stratum.hal.DataRequest.Request.PortQueue
	126, // 130: stratum.hal.DataRequest.Request.node_packetio_debug_info:type_name -> stratum.hal.DataRequest.Request.Node
	125, // 131: stratum.hal.DataRequest.Request.forwarding_viability:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 132: stratum.hal.DataRequest.Request.health_indicator:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 133: stratum.hal.DataRequest.Request.autoneg_status:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 134: stratum.hal.DataRequest.Request.front_panel_port_info:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 135: stratum.hal.DataRequest.Request.hardware_port:type_name -> stratum.hal.DataRequest.Request.Port
	125, // 136: stratum.hal.DataRequest.Request.fec_status:type_name -> stratum.hal.DataRequest.Request.Port
	129, // 137: stratum.hal.DataRequest.Request.optical_transceiver_info:type_name -> stratum.hal.DataRequest.Request.OpticalNetworkInterface
	125, // 138: stratum.hal.DataRequest.Request.loopback_status:type_name -> stratum.hal.DataRequest.Request.Port
	126, // 139: stratum.hal.DataRequest.Request.node_info:type_name -> stratum.hal.DataRequest.Request.Node
	125, // 140: stratum.hal.DataRequest.Request.sdn_port_id:type_name -> stratum.hal.DataRequest.Request.Port
	131, // 141: stratum.hal.SetRequest.Request.port:type_name -> stratum.hal.SetRequest.Request.Port
	132, // 142: stratum.hal.SetRequest.Request.node:type_name -> stratum.hal.SetRequest.Request.Node
	133, // 143: stratum.hal.SetRequest.Request.chassis:type_name -> stratum.hal.SetRequest.Request.Chassis
	134, // 144: stratum.hal.SetRequest.Request.optical_network_interface:type_name -> stratum.hal.SetRequest.Request.OpticalNetworkInterface
	56,  // 145: stratum.hal.SetRequest.Request.Port.admin_status:type_name -> stratum.hal.AdminStatus
	57,  // 146: stratum.hal.SetRequest.Request.Port.mac_address:type_name -> stratum.hal.MacAddress
	58,  // 147: stratum.hal.SetRequest.Request.Port.port_speed:type_name -> stratum.hal.PortSpeed
	57,  // 148: stratum.hal.SetRequest.Request.Port.lacp_router_mac:type_name -> stratum.hal.MacAddress
	59,  // 149: stratum.hal.SetRequest.Request.Port.lacp_system_priority:type_name -> stratum.hal.SystemPriority
	66,  // 150: stratum.hal.SetRequest.Request.Port.health_indicator:type_name -> stratum.hal.HealthIndicator
	67,  // 151: stratum.hal.SetRequest.Request.Port.autoneg_status:type_name -> stratum.hal.AutonegotiationStatus
	65,  // 152: stratum.hal.SetRequest.Request.Port.forwarding_viability:type_name -> stratum.hal.ForwardingViability
	55,  // 153: stratum.hal.SetRequest.Request.Port.loopback_status:type_name -> stratum.hal.LoopbackStatus
	53,  // 154: stratum.hal.SetRequest.Request.OpticalNetworkInterface.optical_transceiver_info:type_name -> stratum.hal.OpticalTransceiverInfo
	155, // [155:155] is the sub-list for method output_type
	155, // [155:155] is the sub-list for method input_type
	155, // [155:155] is the sub-list for extension type_name
	155, // [155:155] is the sub-list for extension extendee
	0,   // [0:155] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeFlowParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortFlowParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfigParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingletonPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrunkPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TofinoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfpModuleCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PsuCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermalCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrontPanelPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalTransceiverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoopbackStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortQosCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingViability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutonegotiationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwarePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FecStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdnPortId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams_LacpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams_NtpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams_PowerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams_FanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisConfigParams_TuntapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_VlanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_L2Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_SchedulerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_Dot1PMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_DscpMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_TrafficClassMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_PriorityGroupMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_CosqMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_IngressServicePoolMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfigParams_QosConfig_EgressServicePoolMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfigParams_HashConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortGroup_PortGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmKnetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRxConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmTxConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRateLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmBufferConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmKnetConfig_BcmKnetIntfConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRxConfig_BcmDmaChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRateLimitConfig_BcmPerCosRateLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmBufferConfig_ServicePoolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmBufferConfig_PriorityGroupConig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmBufferConfig_CosqConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig_HashFunctionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig_MacroFlowHashConfig_TableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig_BcmRtag7HashConfig_PerTypeHashConfig_TableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TofinoConfig_BfPortShapingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticalTransceiverInfo_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request_Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request_PortQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest_Request_OpticalNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest_Request_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest_Request_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest_Request_Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest_Request_OpticalNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*DataResponse_OperStatus)(nil),
		(*DataResponse_AdminStatus)(nil),
		(*DataResponse_MacAddress)(nil),
		(*DataResponse_PortSpeed)(nil),
		(*DataResponse_NegotiatedPortSpeed)(nil),
		(*DataResponse_LacpRouterMac)(nil),
		(*DataResponse_LacpSystemPriority)(nil),
		(*DataResponse_PortCounters)(nil),
		(*DataResponse_MemoryErrorAlarm)(nil),
		(*DataResponse_FlowProgrammingExceptionAlarm)(nil),
		(*DataResponse_PortQosCounters)(nil),
		(*DataResponse_NodePacketioDebugInfo)(nil),
		(*DataResponse_ForwardingViability)(nil),
		(*DataResponse_HealthIndicator)(nil),
		(*DataResponse_AutonegStatus)(nil),
		(*DataResponse_FrontPanelPortInfo)(nil),
		(*DataResponse_HardwarePort)(nil),
		(*DataResponse_FecStatus)(nil),
		(*DataResponse_OpticalTransceiverInfo)(nil),
		(*DataResponse_LoopbackStatus)(nil),
		(*DataResponse_NodeInfo)(nil),
		(*DataResponse_SdnPortId)(nil),
	}
	file_common_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_PacketShaping)(nil),
		(*TofinoConfig_BfPortShapingConfig_BfPerPortShapingConfig_ByteShaping)(nil),
	}
	file_common_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*DataRequest_Request_OperStatus)(nil),
		(*DataRequest_Request_AdminStatus)(nil),
		(*DataRequest_Request_MacAddress)(nil),
		(*DataRequest_Request_PortSpeed)(nil),
		(*DataRequest_Request_NegotiatedPortSpeed)(nil),
		(*DataRequest_Request_LacpRouterMac)(nil),
		(*DataRequest_Request_LacpSystemPriority)(nil),
		(*DataRequest_Request_PortCounters)(nil),
		(*DataRequest_Request_MemoryErrorAlarm)(nil),
		(*DataRequest_Request_FlowProgrammingExceptionAlarm)(nil),
		(*DataRequest_Request_PortQosCounters)(nil),
		(*DataRequest_Request_NodePacketioDebugInfo)(nil),
		(*DataRequest_Request_ForwardingViability)(nil),
		(*DataRequest_Request_HealthIndicator)(nil),
		(*DataRequest_Request_AutonegStatus)(nil),
		(*DataRequest_Request_FrontPanelPortInfo)(nil),
		(*DataRequest_Request_HardwarePort)(nil),
		(*DataRequest_Request_FecStatus)(nil),
		(*DataRequest_Request_OpticalTransceiverInfo)(nil),
		(*DataRequest_Request_LoopbackStatus)(nil),
		(*DataRequest_Request_NodeInfo)(nil),
		(*DataRequest_Request_SdnPortId)(nil),
	}
	file_common_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*SetRequest_Request_Port_)(nil),
		(*SetRequest_Request_Node_)(nil),
		(*SetRequest_Request_Chassis_)(nil),
		(*SetRequest_Request_OpticalNetworkInterface_)(nil),
	}
	file_common_proto_msgTypes[99].OneofWrappers = []interface{}{
		(*SetRequest_Request_Port_AdminStatus)(nil),
		(*SetRequest_Request_Port_MacAddress)(nil),
		(*SetRequest_Request_Port_PortSpeed)(nil),
		(*SetRequest_Request_Port_LacpRouterMac)(nil),
		(*SetRequest_Request_Port_LacpSystemPriority)(nil),
		(*SetRequest_Request_Port_HealthIndicator)(nil),
		(*SetRequest_Request_Port_AutonegStatus)(nil),
		(*SetRequest_Request_Port_ForwardingViability)(nil),
		(*SetRequest_Request_Port_LoopbackStatus)(nil),
	}
	file_common_proto_msgTypes[102].OneofWrappers = []interface{}{
		(*SetRequest_Request_OpticalNetworkInterface_OpticalTransceiverInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      32,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
